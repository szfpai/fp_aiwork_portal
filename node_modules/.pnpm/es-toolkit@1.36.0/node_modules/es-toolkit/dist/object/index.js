'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const compat_index = require('../_chunk/toSnakeCaseKeys-DZO2eB.js');

function mergeWith(target, source, merge) {
    const sourceKeys = Object.keys(source);
    for (let i = 0; i < sourceKeys.length; i++) {
        const key = sourceKeys[i];
        const sourceValue = source[key];
        const targetValue = target[key];
        const merged = merge(targetValue, sourceValue, key, target, source);
        if (merged != null) {
            target[key] = merged;
        }
        else if (Array.isArray(sourceValue)) {
            target[key] = mergeWith(targetValue ?? [], sourceValue, merge);
        }
        else if (compat_index.isObjectLike(targetValue) && compat_index.isObjectLike(sourceValue)) {
            target[key] = mergeWith(targetValue ?? {}, sourceValue, merge);
        }
        else if (targetValue === undefined || sourceValue !== undefined) {
            target[key] = sourceValue;
        }
    }
    return target;
}

function omit(obj, keys) {
    const result = { ...obj };
    for (let i = 0; i < keys.length; i++) {
        const key = keys[i];
        delete result[key];
    }
    return result;
}

function pick(obj, keys) {
    const result = {};
    for (let i = 0; i < keys.length; i++) {
        const key = keys[i];
        if (Object.hasOwn(obj, key)) {
            result[key] = obj[key];
        }
    }
    return result;
}

function pickBy(obj, shouldPick) {
    const result = {};
    const keys = Object.keys(obj);
    for (let i = 0; i < keys.length; i++) {
        const key = keys[i];
        const value = obj[key];
        if (shouldPick(value, key)) {
            result[key] = value;
        }
    }
    return result;
}

exports.clone = compat_index.clone;
exports.cloneDeep = compat_index.cloneDeep;
exports.cloneDeepWith = compat_index.cloneDeepWith;
exports.findKey = compat_index.findKey;
exports.flattenObject = compat_index.flattenObject;
exports.invert = compat_index.invert;
exports.mapKeys = compat_index.mapKeys;
exports.mapValues = compat_index.mapValues;
exports.merge = compat_index.merge;
exports.omitBy = compat_index.omitBy;
exports.toCamelCaseKeys = compat_index.toCamelCaseKeys;
exports.toMerged = compat_index.toMerged;
exports.toSnakeCaseKeys = compat_index.toSnakeCaseKeys;
exports.mergeWith = mergeWith;
exports.omit = omit;
exports.pick = pick;
exports.pickBy = pickBy;
