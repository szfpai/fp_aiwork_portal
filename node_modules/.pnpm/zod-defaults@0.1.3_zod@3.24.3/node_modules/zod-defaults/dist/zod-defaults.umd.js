(function(f,t){typeof exports=="object"&&typeof module<"u"?t(exports,require("zod")):typeof define=="function"&&define.amd?define(["exports","zod"],t):(f=typeof globalThis<"u"?globalThis:f||self,t(f.ZodDefaults={},f.zod))})(this,function(f,t){"use strict";const u=(e,o)=>e.constructor.name===o.name,n=new Map;n.set(t.z.ZodBoolean.name,()=>!1),n.set(t.z.ZodNumber.name,()=>0),n.set(t.z.ZodString.name,()=>""),n.set(t.z.ZodArray.name,()=>[]),n.set(t.z.ZodRecord.name,()=>({})),n.set(t.z.ZodDefault.name,e=>e._def.defaultValue()),n.set(t.z.ZodEffects.name,e=>a(e._def.schema)),n.set(t.z.ZodOptional.name,e=>u(e._def.innerType,t.z.ZodDefault)?e._def.innerType._def.defaultValue():void 0),n.set(t.z.ZodTuple.name,e=>{const o=[];for(const i of e._def.items)o.push(a(i));return o}),n.set(t.z.ZodEffects.name,e=>a(e._def.schema)),n.set(t.z.ZodUnion.name,e=>a(e._def.options[0])),n.set(t.z.ZodObject.name,e=>r(e)),n.set(t.z.ZodRecord.name,e=>r(e)),n.set(t.z.ZodIntersection.name,e=>r(e));function a(e){const o=e.constructor.name;if(!n.has(o)){console.warn("getSchemaDefaultForField: Unhandled type",e.constructor.name);return}return n.get(o)(e)}function r(e){if(u(e,t.z.ZodRecord))return{};if(u(e,t.z.ZodEffects))return r(e._def.schema);if(u(e,t.z.ZodIntersection))return{...r(e._def.left),...r(e._def.right)};if(u(e,t.z.ZodUnion)){for(const o of e._def.options)if(u(o,t.z.ZodObject))return r(o);return console.warn("getSchemaDefaultObject: No object found in union, returning empty object"),{}}return u(e,t.z.ZodObject)?Object.fromEntries(Object.entries(e.shape).map(([o,i])=>[o,a(i)]).filter(o=>o[1]!==void 0)):(console.warn(`getSchemaDefaultObject: Expected object schema, got ${e.constructor.name}`),{})}function s(e){return r(e)}f.getDefaultsForSchema=s,Object.defineProperty(f,Symbol.toStringTag,{value:"Module"})});
