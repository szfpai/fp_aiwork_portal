/**
 * tdesign-vue-chat v0.3.0
 * (c) 2025 tdesign
 * @license MIT
 */

import { defineComponent, createVNode } from 'vue';
import props from './props.mjs';
import _Chat from './chat.mjs';
import ChatItem from './chat-item.mjs';
import _ChatInput from './chat-input.mjs';
import _ChatAction from './chat-action.mjs';
import { useChat } from './useChat.mjs';
import '../_chunks/dep-0a876a74.mjs';
import '../_chunks/dep-af9a7256.mjs';
import 'tdesign-vue-next';
import 'tdesign-icons-vue-next';
import 'lodash-es';
import '../hooks/useConfig.mjs';
import '../config-provider/useConfig.mjs';
import '../_chunks/dep-69b31c1a.mjs';
import '../_chunks/dep-524b9ae9.mjs';
import '../_chunks/dep-23b40ee3.mjs';
import '../_chunks/dep-9a586377.mjs';
import '../_chunks/dep-910b96f9.mjs';
import '../_chunks/dep-b3810236.mjs';
import '../_chunks/dep-eca7bf22.mjs';
import '../_common/js/global-config/default-config.mjs';
import '../_common/js/global-config/locale/zh_CN.mjs';
import '../_chunks/dep-1a6518d4.mjs';
import '../_chunks/dep-4a666d03.mjs';
import '../_chunks/dep-0dfec231.mjs';
import '../_chunks/dep-fd26cd56.mjs';
import '../_chunks/dep-69090813.mjs';
import '../hooks/tnode.mjs';
import '../_chunks/dep-d42afe56.mjs';
import '../_chunks/dep-6606dd57.mjs';
import '../_chunks/dep-fcf07f5d.mjs';
import '../utils/render-tnode.mjs';
import './chat-item-props.mjs';
import './chat-content.mjs';
import 'clipboard';
import 'highlight.js';
import 'marked';
import 'marked-highlight';
import './chat-loading.mjs';
import './chat-reasoning.mjs';
import '../_chunks/dep-391e6464.mjs';
import '../_chunks/dep-0c0f7233.mjs';
import './chat-reasoning-props.mjs';
import '../hooks/useVModel.mjs';
import './util.mjs';
import '../_chunks/dep-f8be3f0f.mjs';
import '../_chunks/dep-0fb45440.mjs';
import './sseRequest.mjs';
import '../_chunks/dep-1a588411.mjs';
import './sseRequest-hunyuan.mjs';

var _ChatMofa = defineComponent({
  name: "TChatMofa",
  components: {
    Chat: _Chat,
    ChatItem: ChatItem,
    ChatInput: _ChatInput,
    ChatAction: _ChatAction
  },
  props: {
    apiKey: {
      type: String
    },
    mofaId: {
      type: String,
      required: true
    },
    welcome: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    userMeta: {
      type: Object,
      "default": function _default() {
        return {};
      }
    },
    assistantMeta: {
      type: Object,
      "default": function _default() {
        return {};
      }
    },
    footer: {
      type: Boolean,
      "default": true
    },
    showUserMsg: {
      type: Boolean,
      "default": true
    },
    operationBtn: props.operationBtn,
    chatRequest: {
      type: Function
    },
    layout: props.layout,
    onOperation: props.onOperation
  },
  emits: ["operation", "clear"],
  setup: function setup(props2, _ref) {
    var emit = _ref.emit;
    var _useChat = useChat(props2, emit),
      chatList = _useChat.chatList,
      loading = _useChat.loading,
      onStop = _useChat.onStop,
      operation = _useChat.operation,
      clearConfirm = _useChat.clearConfirm,
      isStreamLoad = _useChat.isStreamLoad,
      sendRequest = _useChat.sendRequest;
    var handleSend = function handleSend(inputValue) {
      sendRequest("mofa", inputValue, props2.mofaId);
    };
    return function () {
      return createVNode(_Chat, {
        "layout": props2.layout,
        "clearHistory": chatList.value.length > 0 && !isStreamLoad.value,
        "onClear": clearConfirm
      }, {
        "default": function _default() {
          return [chatList.value.map(function (item, index) {
            return createVNode(ChatItem, {
              "key": index,
              "avatar": item.avatar,
              "role": item.role,
              "datetime": item.datetime,
              "content": item.content,
              "text-loading": index === 0 && loading.value
            }, {
              actions: function actions() {
                return createVNode(_ChatAction, {
                  "operationBtn": props2.operationBtn,
                  "content": item.content,
                  "onOperation": function onOperation(type, _ref2) {
                    var e = _ref2.e;
                    return operation(type, {
                      e: e,
                      index: index
                    });
                  }
                }, null);
              }
            });
          })];
        },
        footer: function footer() {
          return createVNode(_ChatInput, {
            "stopDisabled": isStreamLoad.value,
            "onSend": handleSend,
            "onStop": onStop
          }, null);
        }
      });
    };
  }
});

export { _ChatMofa as default };
//# sourceMappingURL=chat-mofa.mjs.map
