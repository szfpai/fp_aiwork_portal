import { PropType } from 'vue';
import { MetaData, TdChatItemProps } from './type';
declare const _default: import("vue").DefineComponent<{
    apiKey: {
        type: StringConstructor;
    };
    welcome: {
        type: ArrayConstructor;
        default: () => String[];
    };
    userMeta: {
        type: PropType<MetaData>;
        default(): {};
    };
    assistantMeta: {
        type: PropType<MetaData>;
        default(): {};
    };
    footer: {
        type: BooleanConstructor;
        default: boolean;
    };
    showUserMsg: {
        type: BooleanConstructor;
        default: boolean;
    };
    operationBtn: {
        type: PropType<import("./props").operationBtnType[]>;
        default: string[];
    };
    layout: {
        type: PropType<import("./type").Layout>;
        default: string;
        validator(val: string): boolean;
    };
    chatRequest: {
        type: FunctionConstructor;
    };
    model: {
        type: StringConstructor;
        default: string;
    };
    onOperation: PropType<(value: string, context: {
        e: MouseEvent;
        index?: number;
        item?: TdChatItemProps;
    }) => void>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("clear" | "operation")[], "clear" | "operation", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    apiKey: {
        type: StringConstructor;
    };
    welcome: {
        type: ArrayConstructor;
        default: () => String[];
    };
    userMeta: {
        type: PropType<MetaData>;
        default(): {};
    };
    assistantMeta: {
        type: PropType<MetaData>;
        default(): {};
    };
    footer: {
        type: BooleanConstructor;
        default: boolean;
    };
    showUserMsg: {
        type: BooleanConstructor;
        default: boolean;
    };
    operationBtn: {
        type: PropType<import("./props").operationBtnType[]>;
        default: string[];
    };
    layout: {
        type: PropType<import("./type").Layout>;
        default: string;
        validator(val: string): boolean;
    };
    chatRequest: {
        type: FunctionConstructor;
    };
    model: {
        type: StringConstructor;
        default: string;
    };
    onOperation: PropType<(value: string, context: {
        e: MouseEvent;
        index?: number;
        item?: TdChatItemProps;
    }) => void>;
}>> & {
    onClear?: (...args: any[]) => any;
    onOperation?: (...args: any[]) => any;
}, {
    footer: boolean;
    layout: import("./type").Layout;
    model: string;
    operationBtn: import("./props").operationBtnType[];
    welcome: unknown[];
    userMeta: {};
    assistantMeta: {};
    showUserMsg: boolean;
}, {}>;
export default _default;
