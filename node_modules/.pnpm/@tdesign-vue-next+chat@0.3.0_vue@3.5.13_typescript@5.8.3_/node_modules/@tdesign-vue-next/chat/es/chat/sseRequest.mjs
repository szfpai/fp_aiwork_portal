/**
 * tdesign-vue-chat v0.3.0
 * (c) 2025 tdesign
 * @license MIT
 */

import { _ as _toConsumableArray } from '../_chunks/dep-1a588411.mjs';
import { _ as _asyncToGenerator, r as regenerator } from '../_chunks/dep-0fb45440.mjs';
import { MessagePlugin } from 'tdesign-vue-next';
import '../_chunks/dep-0c0f7233.mjs';
import '../_chunks/dep-af9a7256.mjs';
import '../_chunks/dep-524b9ae9.mjs';

function sseRequest(_x, _x2) {
  return _sseRequest.apply(this, arguments);
}
function _sseRequest() {
  _sseRequest = _asyncToGenerator(/*#__PURE__*/regenerator.mark(function _callee3(params, apiKey) {
    var url, data, complete, cancel, abort, controller, signal, tokenHeaders, responsePromise;
    return regenerator.wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          url = params.url, data = params.data, complete = params.complete, cancel = params.cancel, abort = params.abort;
          controller = new AbortController();
          signal = controller.signal;
          cancel === null || cancel === void 0 || cancel(controller);
          tokenHeaders = {
            "Content-Type": "application/json"
          };
          tokenHeaders.Authorization = "Bearer".concat(apiKey ? " ".concat(apiKey) : "");
          responsePromise = fetch(url, {
            method: "POST",
            headers: tokenHeaders,
            body: JSON.stringify(data),
            signal: controller.signal
          })["catch"](function (err) {
            var msg = err.toString() || "\u6D41\u5F0F\u63A5\u53E3\u5F02\u5E38";
            complete === null || complete === void 0 || complete(false, msg);
            return Promise.reject(err);
          });
          fetchSSE(function () {
            return responsePromise;
          }, params);
          signal.addEventListener("abort", function () {
            try {
              abort && abort();
            } catch (_unused) {}
          });
        case 9:
        case "end":
          return _context3.stop();
      }
    }, _callee3);
  }));
  return _sseRequest.apply(this, arguments);
}
var fetchSSE = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator(/*#__PURE__*/regenerator.mark(function _callee2(fetchFn) {
    var options,
      success,
      fail,
      complete,
      responsePromise,
      _args2 = arguments;
    return regenerator.wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          options = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};
          success = options.success, fail = options.fail, complete = options.complete;
          responsePromise = fetchFn()["catch"](function (e) {
            var msg = e.toString() || "\u6D41\u5F0F\u63A5\u53E3\u5F02\u5E38";
            complete === null || complete === void 0 || complete(false, msg);
            return Promise.reject(e);
          });
          responsePromise.then(function (response) {
            if (response.status === 200 || response.status === 500) {
              var _response$body;
              var _processText = /*#__PURE__*/function () {
                var _ref3 = _asyncToGenerator(/*#__PURE__*/regenerator.mark(function _callee(_ref2) {
                  var done, value, chunk, buffers, i, line, jsonData, _JSON$parse, retmsg;
                  return regenerator.wrap(function _callee$(_context) {
                    while (1) switch (_context.prev = _context.next) {
                      case 0:
                        done = _ref2.done, value = _ref2.value;
                        if (!done) {
                          _context.next = 4;
                          break;
                        }
                        complete === null || complete === void 0 || complete(true, "");
                        return _context.abrupt("return", Promise.resolve());
                      case 4:
                        chunk = decoder.decode(value, {
                          stream: true
                        });
                        buffers = chunk.toString().split(/\r?\n/);
                        bufferArr.push.apply(bufferArr, _toConsumableArray(buffers));
                        i = 0;
                        while (i < bufferArr.length) {
                          line = bufferArr[i];
                          if (line) {
                            dataText = dataText + line;
                            if (line.startsWith("event:")) {
                              event.type = dataText.slice(6).trim();
                              dataText = "";
                            } else if (line.endsWith('"finished": false}') || line.endsWith('"delta": "[EOS]"}') || line.endsWith('"finished": true}') || line.endsWith('"finished":true}')) {
                              event.data = JSON.parse(dataText.slice(5).trim());
                              dataText = "";
                            }
                          }
                          if (event.type && event.data) {
                            jsonData = JSON.parse(JSON.stringify(event));
                            success(jsonData);
                            if (response.status === 500) {
                              _JSON$parse = JSON.parse(jsonData.data.response), retmsg = _JSON$parse.retmsg;
                              MessagePlugin.error(retmsg);
                            }
                            event.type = null;
                            event.data = null;
                          }
                          bufferArr.splice(i, 1);
                        }
                        return _context.abrupt("return", reader.read().then(_processText));
                      case 10:
                      case "end":
                        return _context.stop();
                    }
                  }, _callee);
                }));
                return function processText(_x4) {
                  return _ref3.apply(this, arguments);
                };
              }();
              var reader = response === null || response === void 0 || (_response$body = response.body) === null || _response$body === void 0 ? void 0 : _response$body.getReader();
              var decoder = new TextDecoder();
              if (!reader) throw new Error("No reader available");
              var bufferArr = [];
              var dataText = "";
              var event = {
                type: null,
                data: null
              };
              return reader.read().then(_processText);
            }
            complete === null || complete === void 0 || complete(false, response.statusText || "\u6682\u65E0\u5185\u5BB9\u8FD4\u56DE");
          })["catch"](function () {
            fail === null || fail === void 0 || fail();
          });
        case 4:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return function fetchSSE(_x3) {
    return _ref.apply(this, arguments);
  };
}();

export { fetchSSE, sseRequest };
//# sourceMappingURL=sseRequest.mjs.map
