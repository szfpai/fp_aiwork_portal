/**
 * tdesign-vue-chat v0.3.0
 * (c) 2025 tdesign
 * @license MIT
 */

import './dep-524b9ae9.mjs';
import { a as _baseGetTag } from './dep-23b40ee3.mjs';
import { _ as _typeof } from './dep-af9a7256.mjs';

function isObject$1(value) {
  var type = _typeof(value);
  return value != null && (type == 'object' || type == 'function');
}
var isObject_1 = isObject$1;

var baseGetTag = _baseGetTag,
  isObject = isObject_1;

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
  funcTag = '[object Function]',
  genTag = '[object GeneratorFunction]',
  proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}
var isFunction_1 = isFunction;

export { isObject_1 as a, isFunction_1 as i };
//# sourceMappingURL=dep-69b31c1a.mjs.map
