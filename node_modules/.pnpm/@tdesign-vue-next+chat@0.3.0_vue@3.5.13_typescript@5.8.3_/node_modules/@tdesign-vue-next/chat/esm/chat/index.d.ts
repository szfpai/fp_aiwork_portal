import { TdChatProps, TdChatItemProps, TdChatListProps, TdChatContentProps, TdChatActionsProps, TdChatInputProps, TdChatSenderProps, TdChatReasoning } from './type';
import './style';
export * from './type';
export declare type ChatProps = TdChatProps;
export declare type ChatItemProps = TdChatItemProps;
export declare type ChatListProps = TdChatListProps;
export declare type ChatContentProps = TdChatContentProps;
export declare type ChatActionsProps = TdChatActionsProps;
export declare type ChatInputProps = TdChatInputProps;
export declare type ChatSenderProps = TdChatSenderProps;
export declare type ChatReasoning = TdChatReasoning;
export declare const Chat: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        data: {
            type: import("vue").PropType<TdChatItemProps[]>;
        };
        layout: {
            type: import("vue").PropType<import("./type").Layout>;
            default: string;
            validator(val: string): boolean;
        };
        clearHistory: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        };
        reverse: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        isStreamLoad: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        textLoading: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        animation: {
            type: import("vue").PropType<"gradient" | "skeleton" | "moving">;
            default: string;
            validator(val: string): boolean;
        };
        onClear: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onScroll: import("vue").PropType<(e: Event) => void>;
    }>> & {
        onScroll?: (...args: any[]) => any;
        onClear?: (...args: any[]) => any;
    }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("scroll" | "clear")[], import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        data: {
            type: import("vue").PropType<TdChatItemProps[]>;
        };
        layout: {
            type: import("vue").PropType<import("./type").Layout>;
            default: string;
            validator(val: string): boolean;
        };
        clearHistory: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        };
        reverse: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        isStreamLoad: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        textLoading: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        animation: {
            type: import("vue").PropType<"gradient" | "skeleton" | "moving">;
            default: string;
            validator(val: string): boolean;
        };
        onClear: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onScroll: import("vue").PropType<(e: Event) => void>;
    }>> & {
        onScroll?: (...args: any[]) => any;
        onClear?: (...args: any[]) => any;
    }, {
        reverse: boolean;
        animation: "gradient" | "skeleton" | "moving";
        layout: import("./type").Layout;
        isStreamLoad: boolean;
        clearHistory: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        textLoading: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        data: {
            type: import("vue").PropType<TdChatItemProps[]>;
        };
        layout: {
            type: import("vue").PropType<import("./type").Layout>;
            default: string;
            validator(val: string): boolean;
        };
        clearHistory: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        };
        reverse: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        isStreamLoad: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        textLoading: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        animation: {
            type: import("vue").PropType<"gradient" | "skeleton" | "moving">;
            default: string;
            validator(val: string): boolean;
        };
        onClear: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onScroll: import("vue").PropType<(e: Event) => void>;
    }>> & {
        onScroll?: (...args: any[]) => any;
        onClear?: (...args: any[]) => any;
    }, () => JSX.Element, {}, {}, {}, {
        reverse: boolean;
        animation: "gradient" | "skeleton" | "moving";
        layout: import("./type").Layout;
        isStreamLoad: boolean;
        clearHistory: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        textLoading: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    data: {
        type: import("vue").PropType<TdChatItemProps[]>;
    };
    layout: {
        type: import("vue").PropType<import("./type").Layout>;
        default: string;
        validator(val: string): boolean;
    };
    clearHistory: {
        type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        default: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
    };
    reverse: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    isStreamLoad: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    textLoading: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    animation: {
        type: import("vue").PropType<"gradient" | "skeleton" | "moving">;
        default: string;
        validator(val: string): boolean;
    };
    onClear: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onScroll: import("vue").PropType<(e: Event) => void>;
}>> & {
    onScroll?: (...args: any[]) => any;
    onClear?: (...args: any[]) => any;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("scroll" | "clear")[], "clear" | "scroll", {
    reverse: boolean;
    animation: "gradient" | "skeleton" | "moving";
    layout: import("./type").Layout;
    isStreamLoad: boolean;
    clearHistory: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
    textLoading: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export declare const ChatItem: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        reasoningLoading: {
            type: BooleanConstructor;
            default: boolean;
        };
        actions: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        animation: {
            type: import("vue").PropType<"gradient" | "skeleton" | "moving">;
            default: "gradient" | "skeleton" | "moving";
            validator(val: "gradient" | "skeleton" | "moving"): boolean;
        };
        avatar: {
            type: import("vue").PropType<String | ((h: typeof import("vue").h) => import("..").SlotReturnValue) | import("tdesign-vue-next").TdAvatarProps>;
        };
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        datetime: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        name: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        reasoning: {
            type: import("vue").PropType<boolean | TdChatReasoning>;
            default: boolean | TdChatReasoning;
        };
        role: {
            type: import("vue").PropType<"error" | "user" | "assistant" | "model-change" | "system">;
            validator(val: "error" | "user" | "assistant" | "model-change" | "system"): boolean;
        };
        textLoading: BooleanConstructor;
        variant: {
            type: import("vue").PropType<"outline" | "base" | "text">;
            default: "outline" | "base" | "text";
            validator(val: "outline" | "base" | "text"): boolean;
        };
    }>> & {
        onOperation?: (...args: any[]) => any;
    }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "operation"[], import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        reasoningLoading: {
            type: BooleanConstructor;
            default: boolean;
        };
        actions: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        animation: {
            type: import("vue").PropType<"gradient" | "skeleton" | "moving">;
            default: "gradient" | "skeleton" | "moving";
            validator(val: "gradient" | "skeleton" | "moving"): boolean;
        };
        avatar: {
            type: import("vue").PropType<String | ((h: typeof import("vue").h) => import("..").SlotReturnValue) | import("tdesign-vue-next").TdAvatarProps>;
        };
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        datetime: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        name: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        reasoning: {
            type: import("vue").PropType<boolean | TdChatReasoning>;
            default: boolean | TdChatReasoning;
        };
        role: {
            type: import("vue").PropType<"error" | "user" | "assistant" | "model-change" | "system">;
            validator(val: "error" | "user" | "assistant" | "model-change" | "system"): boolean;
        };
        textLoading: BooleanConstructor;
        variant: {
            type: import("vue").PropType<"outline" | "base" | "text">;
            default: "outline" | "base" | "text";
            validator(val: "outline" | "base" | "text"): boolean;
        };
    }>> & {
        onOperation?: (...args: any[]) => any;
    }, {
        animation: "gradient" | "skeleton" | "moving";
        variant: "outline" | "base" | "text";
        textLoading: boolean;
        reasoning: boolean | TdChatReasoning;
        reasoningLoading: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        reasoningLoading: {
            type: BooleanConstructor;
            default: boolean;
        };
        actions: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        animation: {
            type: import("vue").PropType<"gradient" | "skeleton" | "moving">;
            default: "gradient" | "skeleton" | "moving";
            validator(val: "gradient" | "skeleton" | "moving"): boolean;
        };
        avatar: {
            type: import("vue").PropType<String | ((h: typeof import("vue").h) => import("..").SlotReturnValue) | import("tdesign-vue-next").TdAvatarProps>;
        };
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        datetime: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        name: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        reasoning: {
            type: import("vue").PropType<boolean | TdChatReasoning>;
            default: boolean | TdChatReasoning;
        };
        role: {
            type: import("vue").PropType<"error" | "user" | "assistant" | "model-change" | "system">;
            validator(val: "error" | "user" | "assistant" | "model-change" | "system"): boolean;
        };
        textLoading: BooleanConstructor;
        variant: {
            type: import("vue").PropType<"outline" | "base" | "text">;
            default: "outline" | "base" | "text";
            validator(val: "outline" | "base" | "text"): boolean;
        };
    }>> & {
        onOperation?: (...args: any[]) => any;
    }, () => JSX.Element, {}, {}, {}, {
        animation: "gradient" | "skeleton" | "moving";
        variant: "outline" | "base" | "text";
        textLoading: boolean;
        reasoning: boolean | TdChatReasoning;
        reasoningLoading: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    reasoningLoading: {
        type: BooleanConstructor;
        default: boolean;
    };
    actions: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    animation: {
        type: import("vue").PropType<"gradient" | "skeleton" | "moving">;
        default: "gradient" | "skeleton" | "moving";
        validator(val: "gradient" | "skeleton" | "moving"): boolean;
    };
    avatar: {
        type: import("vue").PropType<String | ((h: typeof import("vue").h) => import("..").SlotReturnValue) | import("tdesign-vue-next").TdAvatarProps>;
    };
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    datetime: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    name: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    reasoning: {
        type: import("vue").PropType<boolean | TdChatReasoning>;
        default: boolean | TdChatReasoning;
    };
    role: {
        type: import("vue").PropType<"error" | "user" | "assistant" | "model-change" | "system">;
        validator(val: "error" | "user" | "assistant" | "model-change" | "system"): boolean;
    };
    textLoading: BooleanConstructor;
    variant: {
        type: import("vue").PropType<"outline" | "base" | "text">;
        default: "outline" | "base" | "text";
        validator(val: "outline" | "base" | "text"): boolean;
    };
}>> & {
    onOperation?: (...args: any[]) => any;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "operation"[], "operation", {
    animation: "gradient" | "skeleton" | "moving";
    variant: "outline" | "base" | "text";
    textLoading: boolean;
    reasoning: boolean | TdChatReasoning;
    reasoningLoading: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export declare const ChatInput: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: StringConstructor;
            default: string;
        };
        value: {
            type: StringConstructor;
            default: string;
        };
        defaultValue: {
            type: StringConstructor;
            default: string;
        };
        placeholder: {
            type: StringConstructor;
            default: any;
        };
        stopDisabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        autofocus: {
            type: BooleanConstructor;
            default: boolean;
        };
        autosize: {
            type: import("vue").PropType<boolean | {
                minRows?: number;
                maxRows?: number;
            }>;
            default: {
                minRows: number;
                maxRows: number;
            };
        };
        onSend: import("vue").PropType<(value: string, context: {
            e: MouseEvent | KeyboardEvent;
        }) => void>;
        onStop: import("vue").PropType<(value: string, context: {
            e: MouseEvent;
        }) => void>;
        onChange: import("vue").PropType<(value: string, context: {
            e: MouseEvent | InputEvent | KeyboardEvent;
        }) => void>;
        onBlur: import("vue").PropType<(value: string, context: {
            e: FocusEvent;
        }) => void>;
        onFocus: import("vue").PropType<(value: string, context: {
            e: FocusEvent;
        }) => void>;
    }>> & {
        onStop?: (...args: any[]) => any;
        onFocus?: (...args: any[]) => any;
        onBlur?: (...args: any[]) => any;
        onSend?: (...args: any[]) => any;
        "onUpdate:modelValue"?: (...args: any[]) => any;
    }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("stop" | "blur" | "focus" | "send" | "update:modelValue")[], import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: StringConstructor;
            default: string;
        };
        value: {
            type: StringConstructor;
            default: string;
        };
        defaultValue: {
            type: StringConstructor;
            default: string;
        };
        placeholder: {
            type: StringConstructor;
            default: any;
        };
        stopDisabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        autofocus: {
            type: BooleanConstructor;
            default: boolean;
        };
        autosize: {
            type: import("vue").PropType<boolean | {
                minRows?: number;
                maxRows?: number;
            }>;
            default: {
                minRows: number;
                maxRows: number;
            };
        };
        onSend: import("vue").PropType<(value: string, context: {
            e: MouseEvent | KeyboardEvent;
        }) => void>;
        onStop: import("vue").PropType<(value: string, context: {
            e: MouseEvent;
        }) => void>;
        onChange: import("vue").PropType<(value: string, context: {
            e: MouseEvent | InputEvent | KeyboardEvent;
        }) => void>;
        onBlur: import("vue").PropType<(value: string, context: {
            e: FocusEvent;
        }) => void>;
        onFocus: import("vue").PropType<(value: string, context: {
            e: FocusEvent;
        }) => void>;
    }>> & {
        onStop?: (...args: any[]) => any;
        onFocus?: (...args: any[]) => any;
        onBlur?: (...args: any[]) => any;
        onSend?: (...args: any[]) => any;
        "onUpdate:modelValue"?: (...args: any[]) => any;
    }, {
        value: string;
        autofocus: boolean;
        disabled: boolean;
        placeholder: string;
        autosize: {
            minRows: number;
            maxRows: number;
        };
        modelValue: string;
        defaultValue: string;
        stopDisabled: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: StringConstructor;
            default: string;
        };
        value: {
            type: StringConstructor;
            default: string;
        };
        defaultValue: {
            type: StringConstructor;
            default: string;
        };
        placeholder: {
            type: StringConstructor;
            default: any;
        };
        stopDisabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        autofocus: {
            type: BooleanConstructor;
            default: boolean;
        };
        autosize: {
            type: import("vue").PropType<boolean | {
                minRows?: number;
                maxRows?: number;
            }>;
            default: {
                minRows: number;
                maxRows: number;
            };
        };
        onSend: import("vue").PropType<(value: string, context: {
            e: MouseEvent | KeyboardEvent;
        }) => void>;
        onStop: import("vue").PropType<(value: string, context: {
            e: MouseEvent;
        }) => void>;
        onChange: import("vue").PropType<(value: string, context: {
            e: MouseEvent | InputEvent | KeyboardEvent;
        }) => void>;
        onBlur: import("vue").PropType<(value: string, context: {
            e: FocusEvent;
        }) => void>;
        onFocus: import("vue").PropType<(value: string, context: {
            e: FocusEvent;
        }) => void>;
    }>> & {
        onStop?: (...args: any[]) => any;
        onFocus?: (...args: any[]) => any;
        onBlur?: (...args: any[]) => any;
        onSend?: (...args: any[]) => any;
        "onUpdate:modelValue"?: (...args: any[]) => any;
    }, () => JSX.Element, {}, {}, {}, {
        value: string;
        autofocus: boolean;
        disabled: boolean;
        placeholder: string;
        autosize: {
            minRows: number;
            maxRows: number;
        };
        modelValue: string;
        defaultValue: string;
        stopDisabled: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: StringConstructor;
        default: string;
    };
    value: {
        type: StringConstructor;
        default: string;
    };
    defaultValue: {
        type: StringConstructor;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    stopDisabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    autofocus: {
        type: BooleanConstructor;
        default: boolean;
    };
    autosize: {
        type: import("vue").PropType<boolean | {
            minRows?: number;
            maxRows?: number;
        }>;
        default: {
            minRows: number;
            maxRows: number;
        };
    };
    onSend: import("vue").PropType<(value: string, context: {
        e: MouseEvent | KeyboardEvent;
    }) => void>;
    onStop: import("vue").PropType<(value: string, context: {
        e: MouseEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: string, context: {
        e: MouseEvent | InputEvent | KeyboardEvent;
    }) => void>;
    onBlur: import("vue").PropType<(value: string, context: {
        e: FocusEvent;
    }) => void>;
    onFocus: import("vue").PropType<(value: string, context: {
        e: FocusEvent;
    }) => void>;
}>> & {
    onStop?: (...args: any[]) => any;
    onFocus?: (...args: any[]) => any;
    onBlur?: (...args: any[]) => any;
    onSend?: (...args: any[]) => any;
    "onUpdate:modelValue"?: (...args: any[]) => any;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("stop" | "blur" | "focus" | "send" | "update:modelValue")[], "stop" | "blur" | "focus" | "send" | "update:modelValue", {
    value: string;
    autofocus: boolean;
    disabled: boolean;
    placeholder: string;
    autosize: {
        minRows: number;
        maxRows: number;
    };
    modelValue: string;
    defaultValue: string;
    stopDisabled: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export declare const ChatSender: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        disabled: BooleanConstructor;
        placeholder: {
            type: StringConstructor;
            default: string;
        };
        prefix: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        stopDisabled: BooleanConstructor;
        suffix: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        textareaProps: {
            type: import("vue").PropType<import("tdesign-vue-next").TdTextareaProps>;
        };
        value: {
            type: import("vue").PropType<string>;
            default: string;
        };
        modelValue: {
            type: import("vue").PropType<string>;
            default: string;
        };
        defaultValue: {
            type: import("vue").PropType<string>;
        };
        onBlur: import("vue").PropType<(value: string, context: {
            e: FocusEvent;
        }) => void>;
        onChange: import("vue").PropType<(value: string, context: {
            e: MouseEvent | InputEvent | KeyboardEvent;
        }) => void>;
        onFocus: import("vue").PropType<(value: string, context: {
            e: FocusEvent;
        }) => void>;
        onSend: import("vue").PropType<(value: string, context: {
            e: MouseEvent | KeyboardEvent;
        }) => void>;
        onStop: import("vue").PropType<(value: string, context: {
            e: MouseEvent;
        }) => void>;
        onFileSelect: import("vue").PropType<(params: {
            files: File[];
            name: import("./type").UploadActionType;
        }) => void>;
    }>> & {
        onStop?: (...args: any[]) => any;
        onFocus?: (...args: any[]) => any;
        onBlur?: (...args: any[]) => any;
        onSend?: (...args: any[]) => any;
        "onUpdate:modelValue"?: (...args: any[]) => any;
        onFileSelect?: (...args: any[]) => any;
    }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("stop" | "blur" | "focus" | "send" | "update:modelValue" | "fileSelect")[], import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        disabled: BooleanConstructor;
        placeholder: {
            type: StringConstructor;
            default: string;
        };
        prefix: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        stopDisabled: BooleanConstructor;
        suffix: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        textareaProps: {
            type: import("vue").PropType<import("tdesign-vue-next").TdTextareaProps>;
        };
        value: {
            type: import("vue").PropType<string>;
            default: string;
        };
        modelValue: {
            type: import("vue").PropType<string>;
            default: string;
        };
        defaultValue: {
            type: import("vue").PropType<string>;
        };
        onBlur: import("vue").PropType<(value: string, context: {
            e: FocusEvent;
        }) => void>;
        onChange: import("vue").PropType<(value: string, context: {
            e: MouseEvent | InputEvent | KeyboardEvent;
        }) => void>;
        onFocus: import("vue").PropType<(value: string, context: {
            e: FocusEvent;
        }) => void>;
        onSend: import("vue").PropType<(value: string, context: {
            e: MouseEvent | KeyboardEvent;
        }) => void>;
        onStop: import("vue").PropType<(value: string, context: {
            e: MouseEvent;
        }) => void>;
        onFileSelect: import("vue").PropType<(params: {
            files: File[];
            name: import("./type").UploadActionType;
        }) => void>;
    }>> & {
        onStop?: (...args: any[]) => any;
        onFocus?: (...args: any[]) => any;
        onBlur?: (...args: any[]) => any;
        onSend?: (...args: any[]) => any;
        "onUpdate:modelValue"?: (...args: any[]) => any;
        onFileSelect?: (...args: any[]) => any;
    }, {
        value: string;
        disabled: boolean;
        placeholder: string;
        modelValue: string;
        stopDisabled: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        disabled: BooleanConstructor;
        placeholder: {
            type: StringConstructor;
            default: string;
        };
        prefix: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        stopDisabled: BooleanConstructor;
        suffix: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        textareaProps: {
            type: import("vue").PropType<import("tdesign-vue-next").TdTextareaProps>;
        };
        value: {
            type: import("vue").PropType<string>;
            default: string;
        };
        modelValue: {
            type: import("vue").PropType<string>;
            default: string;
        };
        defaultValue: {
            type: import("vue").PropType<string>;
        };
        onBlur: import("vue").PropType<(value: string, context: {
            e: FocusEvent;
        }) => void>;
        onChange: import("vue").PropType<(value: string, context: {
            e: MouseEvent | InputEvent | KeyboardEvent;
        }) => void>;
        onFocus: import("vue").PropType<(value: string, context: {
            e: FocusEvent;
        }) => void>;
        onSend: import("vue").PropType<(value: string, context: {
            e: MouseEvent | KeyboardEvent;
        }) => void>;
        onStop: import("vue").PropType<(value: string, context: {
            e: MouseEvent;
        }) => void>;
        onFileSelect: import("vue").PropType<(params: {
            files: File[];
            name: import("./type").UploadActionType;
        }) => void>;
    }>> & {
        onStop?: (...args: any[]) => any;
        onFocus?: (...args: any[]) => any;
        onBlur?: (...args: any[]) => any;
        onSend?: (...args: any[]) => any;
        "onUpdate:modelValue"?: (...args: any[]) => any;
        onFileSelect?: (...args: any[]) => any;
    }, () => JSX.Element, {}, {}, {}, {
        value: string;
        disabled: boolean;
        placeholder: string;
        modelValue: string;
        stopDisabled: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    disabled: BooleanConstructor;
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    prefix: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    stopDisabled: BooleanConstructor;
    suffix: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    textareaProps: {
        type: import("vue").PropType<import("tdesign-vue-next").TdTextareaProps>;
    };
    value: {
        type: import("vue").PropType<string>;
        default: string;
    };
    modelValue: {
        type: import("vue").PropType<string>;
        default: string;
    };
    defaultValue: {
        type: import("vue").PropType<string>;
    };
    onBlur: import("vue").PropType<(value: string, context: {
        e: FocusEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: string, context: {
        e: MouseEvent | InputEvent | KeyboardEvent;
    }) => void>;
    onFocus: import("vue").PropType<(value: string, context: {
        e: FocusEvent;
    }) => void>;
    onSend: import("vue").PropType<(value: string, context: {
        e: MouseEvent | KeyboardEvent;
    }) => void>;
    onStop: import("vue").PropType<(value: string, context: {
        e: MouseEvent;
    }) => void>;
    onFileSelect: import("vue").PropType<(params: {
        files: File[];
        name: import("./type").UploadActionType;
    }) => void>;
}>> & {
    onStop?: (...args: any[]) => any;
    onFocus?: (...args: any[]) => any;
    onBlur?: (...args: any[]) => any;
    onSend?: (...args: any[]) => any;
    "onUpdate:modelValue"?: (...args: any[]) => any;
    onFileSelect?: (...args: any[]) => any;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("stop" | "blur" | "focus" | "send" | "update:modelValue" | "fileSelect")[], "stop" | "blur" | "focus" | "send" | "update:modelValue" | "fileSelect", {
    value: string;
    disabled: boolean;
    placeholder: string;
    modelValue: string;
    stopDisabled: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export declare const ChatContent: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        actions: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        name: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        avatar: {
            type: import("vue").PropType<String | ((h: typeof import("vue").h) => import("..").SlotReturnValue) | import("tdesign-vue-next").TdAvatarProps>;
        };
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: string;
        };
        datetime: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        role: {
            type: import("vue").PropType<"error" | "user" | "assistant" | "model-change" | "system">;
            default: string;
            validator(val: string): boolean;
        };
        isGood: {
            type: import("vue").PropType<Boolean>;
            default: boolean;
        };
        isBad: {
            type: import("vue").PropType<Boolean>;
            default: boolean;
        };
        layout: {
            type: import("vue").PropType<import("./type").Layout>;
            default: string;
            validator(val: string): boolean;
        };
        isStreamLoad: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        clearHistory: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        };
        reverse: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        textLoading: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        data: {
            type: import("vue").PropType<TdChatItemProps[]>;
        };
        variant: {
            type: import("vue").PropType<"outline" | "base" | "text">;
            default: string;
            validator(val: string): boolean;
        };
        animation: {
            type: import("vue").PropType<"gradient" | "skeleton" | "moving">;
            default: string;
            validator(val: string): boolean;
        };
        onClear: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        operationBtn: {
            type: import("vue").PropType<import("./props").operationBtnType[]>;
            default: string[];
        };
        onOperation: import("vue").PropType<(value: string, context: {
            e: MouseEvent;
            index?: number;
            item?: TdChatItemProps;
        }) => void>;
        disabled: import("vue").PropType<boolean>;
        onSend: import("vue").PropType<(value: string, context: {
            e: MouseEvent | KeyboardEvent;
        }) => void>;
        onStop: import("vue").PropType<(value: string, context: {
            e: MouseEvent;
        }) => void>;
        onChange: import("vue").PropType<(value: string, context: {
            e: MouseEvent | InputEvent | KeyboardEvent;
        }) => void>;
        onScroll: import("vue").PropType<(e: Event) => void>;
        onFocus: import("vue").PropType<(value: string, context: {
            e: FocusEvent;
        }) => void>;
        onBlur: import("vue").PropType<(value: string, context: {
            e: FocusEvent;
        }) => void>;
        autosize: {
            type: import("vue").PropType<boolean | {
                minRows?: number;
                maxRows?: number;
            }>;
            default: {
                minRows: number;
                maxRows: number;
            };
        };
        reasoning: {
            type: import("vue").PropType<boolean | TdChatReasoning>;
            default: boolean | TdChatReasoning;
        };
        textareaProps: {
            type: import("vue").PropType<import("tdesign-vue-next").TdTextareaProps>;
        };
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        actions: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        name: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        avatar: {
            type: import("vue").PropType<String | ((h: typeof import("vue").h) => import("..").SlotReturnValue) | import("tdesign-vue-next").TdAvatarProps>;
        };
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: string;
        };
        datetime: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        role: {
            type: import("vue").PropType<"error" | "user" | "assistant" | "model-change" | "system">;
            default: string;
            validator(val: string): boolean;
        };
        isGood: {
            type: import("vue").PropType<Boolean>;
            default: boolean;
        };
        isBad: {
            type: import("vue").PropType<Boolean>;
            default: boolean;
        };
        layout: {
            type: import("vue").PropType<import("./type").Layout>;
            default: string;
            validator(val: string): boolean;
        };
        isStreamLoad: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        clearHistory: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        };
        reverse: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        textLoading: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        data: {
            type: import("vue").PropType<TdChatItemProps[]>;
        };
        variant: {
            type: import("vue").PropType<"outline" | "base" | "text">;
            default: string;
            validator(val: string): boolean;
        };
        animation: {
            type: import("vue").PropType<"gradient" | "skeleton" | "moving">;
            default: string;
            validator(val: string): boolean;
        };
        onClear: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        operationBtn: {
            type: import("vue").PropType<import("./props").operationBtnType[]>;
            default: string[];
        };
        onOperation: import("vue").PropType<(value: string, context: {
            e: MouseEvent;
            index?: number;
            item?: TdChatItemProps;
        }) => void>;
        disabled: import("vue").PropType<boolean>;
        onSend: import("vue").PropType<(value: string, context: {
            e: MouseEvent | KeyboardEvent;
        }) => void>;
        onStop: import("vue").PropType<(value: string, context: {
            e: MouseEvent;
        }) => void>;
        onChange: import("vue").PropType<(value: string, context: {
            e: MouseEvent | InputEvent | KeyboardEvent;
        }) => void>;
        onScroll: import("vue").PropType<(e: Event) => void>;
        onFocus: import("vue").PropType<(value: string, context: {
            e: FocusEvent;
        }) => void>;
        onBlur: import("vue").PropType<(value: string, context: {
            e: FocusEvent;
        }) => void>;
        autosize: {
            type: import("vue").PropType<boolean | {
                minRows?: number;
                maxRows?: number;
            }>;
            default: {
                minRows: number;
                maxRows: number;
            };
        };
        reasoning: {
            type: import("vue").PropType<boolean | TdChatReasoning>;
            default: boolean | TdChatReasoning;
        };
        textareaProps: {
            type: import("vue").PropType<import("tdesign-vue-next").TdTextareaProps>;
        };
    }>>, {
        reverse: boolean;
        animation: "gradient" | "skeleton" | "moving";
        content: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        layout: import("./type").Layout;
        role: "error" | "user" | "assistant" | "model-change" | "system";
        autosize: {
            minRows: number;
            maxRows: number;
        };
        variant: "outline" | "base" | "text";
        isGood: Boolean;
        isBad: Boolean;
        isStreamLoad: boolean;
        clearHistory: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        textLoading: boolean;
        reasoning: boolean | TdChatReasoning;
        operationBtn: import("./props").operationBtnType[];
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        actions: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        name: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        avatar: {
            type: import("vue").PropType<String | ((h: typeof import("vue").h) => import("..").SlotReturnValue) | import("tdesign-vue-next").TdAvatarProps>;
        };
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: string;
        };
        datetime: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        role: {
            type: import("vue").PropType<"error" | "user" | "assistant" | "model-change" | "system">;
            default: string;
            validator(val: string): boolean;
        };
        isGood: {
            type: import("vue").PropType<Boolean>;
            default: boolean;
        };
        isBad: {
            type: import("vue").PropType<Boolean>;
            default: boolean;
        };
        layout: {
            type: import("vue").PropType<import("./type").Layout>;
            default: string;
            validator(val: string): boolean;
        };
        isStreamLoad: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        clearHistory: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        };
        reverse: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        textLoading: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        data: {
            type: import("vue").PropType<TdChatItemProps[]>;
        };
        variant: {
            type: import("vue").PropType<"outline" | "base" | "text">;
            default: string;
            validator(val: string): boolean;
        };
        animation: {
            type: import("vue").PropType<"gradient" | "skeleton" | "moving">;
            default: string;
            validator(val: string): boolean;
        };
        onClear: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        operationBtn: {
            type: import("vue").PropType<import("./props").operationBtnType[]>;
            default: string[];
        };
        onOperation: import("vue").PropType<(value: string, context: {
            e: MouseEvent;
            index?: number;
            item?: TdChatItemProps;
        }) => void>;
        disabled: import("vue").PropType<boolean>;
        onSend: import("vue").PropType<(value: string, context: {
            e: MouseEvent | KeyboardEvent;
        }) => void>;
        onStop: import("vue").PropType<(value: string, context: {
            e: MouseEvent;
        }) => void>;
        onChange: import("vue").PropType<(value: string, context: {
            e: MouseEvent | InputEvent | KeyboardEvent;
        }) => void>;
        onScroll: import("vue").PropType<(e: Event) => void>;
        onFocus: import("vue").PropType<(value: string, context: {
            e: FocusEvent;
        }) => void>;
        onBlur: import("vue").PropType<(value: string, context: {
            e: FocusEvent;
        }) => void>;
        autosize: {
            type: import("vue").PropType<boolean | {
                minRows?: number;
                maxRows?: number;
            }>;
            default: {
                minRows: number;
                maxRows: number;
            };
        };
        reasoning: {
            type: import("vue").PropType<boolean | TdChatReasoning>;
            default: boolean | TdChatReasoning;
        };
        textareaProps: {
            type: import("vue").PropType<import("tdesign-vue-next").TdTextareaProps>;
        };
    }>>, () => JSX.Element, {}, {}, {}, {
        reverse: boolean;
        animation: "gradient" | "skeleton" | "moving";
        content: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        layout: import("./type").Layout;
        role: "error" | "user" | "assistant" | "model-change" | "system";
        autosize: {
            minRows: number;
            maxRows: number;
        };
        variant: "outline" | "base" | "text";
        isGood: Boolean;
        isBad: Boolean;
        isStreamLoad: boolean;
        clearHistory: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        textLoading: boolean;
        reasoning: boolean | TdChatReasoning;
        operationBtn: import("./props").operationBtnType[];
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    actions: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    name: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    avatar: {
        type: import("vue").PropType<String | ((h: typeof import("vue").h) => import("..").SlotReturnValue) | import("tdesign-vue-next").TdAvatarProps>;
    };
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        default: string;
    };
    datetime: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    role: {
        type: import("vue").PropType<"error" | "user" | "assistant" | "model-change" | "system">;
        default: string;
        validator(val: string): boolean;
    };
    isGood: {
        type: import("vue").PropType<Boolean>;
        default: boolean;
    };
    isBad: {
        type: import("vue").PropType<Boolean>;
        default: boolean;
    };
    layout: {
        type: import("vue").PropType<import("./type").Layout>;
        default: string;
        validator(val: string): boolean;
    };
    isStreamLoad: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    clearHistory: {
        type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        default: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
    };
    reverse: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    textLoading: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    data: {
        type: import("vue").PropType<TdChatItemProps[]>;
    };
    variant: {
        type: import("vue").PropType<"outline" | "base" | "text">;
        default: string;
        validator(val: string): boolean;
    };
    animation: {
        type: import("vue").PropType<"gradient" | "skeleton" | "moving">;
        default: string;
        validator(val: string): boolean;
    };
    onClear: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    operationBtn: {
        type: import("vue").PropType<import("./props").operationBtnType[]>;
        default: string[];
    };
    onOperation: import("vue").PropType<(value: string, context: {
        e: MouseEvent;
        index?: number;
        item?: TdChatItemProps;
    }) => void>;
    disabled: import("vue").PropType<boolean>;
    onSend: import("vue").PropType<(value: string, context: {
        e: MouseEvent | KeyboardEvent;
    }) => void>;
    onStop: import("vue").PropType<(value: string, context: {
        e: MouseEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: string, context: {
        e: MouseEvent | InputEvent | KeyboardEvent;
    }) => void>;
    onScroll: import("vue").PropType<(e: Event) => void>;
    onFocus: import("vue").PropType<(value: string, context: {
        e: FocusEvent;
    }) => void>;
    onBlur: import("vue").PropType<(value: string, context: {
        e: FocusEvent;
    }) => void>;
    autosize: {
        type: import("vue").PropType<boolean | {
            minRows?: number;
            maxRows?: number;
        }>;
        default: {
            minRows: number;
            maxRows: number;
        };
    };
    reasoning: {
        type: import("vue").PropType<boolean | TdChatReasoning>;
        default: boolean | TdChatReasoning;
    };
    textareaProps: {
        type: import("vue").PropType<import("tdesign-vue-next").TdTextareaProps>;
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    reverse: boolean;
    animation: "gradient" | "skeleton" | "moving";
    content: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
    layout: import("./type").Layout;
    role: "error" | "user" | "assistant" | "model-change" | "system";
    autosize: {
        minRows: number;
        maxRows: number;
    };
    variant: "outline" | "base" | "text";
    isGood: Boolean;
    isBad: Boolean;
    isStreamLoad: boolean;
    clearHistory: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
    textLoading: boolean;
    reasoning: boolean | TdChatReasoning;
    operationBtn: import("./props").operationBtnType[];
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export declare const ChatReasoning: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        collapsePanelProps: {
            type: import("vue").PropType<import("tdesign-vue-next").TdCollapsePanelProps>;
            default: () => import("tdesign-vue-next").TdCollapsePanelProps;
        };
        expandIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        expandIconPlacement: {
            type: import("vue").PropType<"left" | "right">;
            default: "left" | "right";
            validator(val: "left" | "right"): boolean;
        };
        header: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        headerRightContent: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        onExpandChange: {
            type: import("vue").PropType<(value: boolean) => void>;
            default: () => void;
        };
        collapsed: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        modelValue: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        defaultCollapsed: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
    }>> & {
        "onUpdate:collapsed"?: (...args: any[]) => any;
    }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "update:collapsed"[], import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        collapsePanelProps: {
            type: import("vue").PropType<import("tdesign-vue-next").TdCollapsePanelProps>;
            default: () => import("tdesign-vue-next").TdCollapsePanelProps;
        };
        expandIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        expandIconPlacement: {
            type: import("vue").PropType<"left" | "right">;
            default: "left" | "right";
            validator(val: "left" | "right"): boolean;
        };
        header: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        headerRightContent: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        onExpandChange: {
            type: import("vue").PropType<(value: boolean) => void>;
            default: () => void;
        };
        collapsed: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        modelValue: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        defaultCollapsed: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
    }>> & {
        "onUpdate:collapsed"?: (...args: any[]) => any;
    }, {
        modelValue: boolean;
        collapsed: boolean;
        onExpandChange: (value: boolean) => void;
        expandIconPlacement: "left" | "right";
        collapsePanelProps: import("tdesign-vue-next").TdCollapsePanelProps;
        defaultCollapsed: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        collapsePanelProps: {
            type: import("vue").PropType<import("tdesign-vue-next").TdCollapsePanelProps>;
            default: () => import("tdesign-vue-next").TdCollapsePanelProps;
        };
        expandIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        expandIconPlacement: {
            type: import("vue").PropType<"left" | "right">;
            default: "left" | "right";
            validator(val: "left" | "right"): boolean;
        };
        header: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        headerRightContent: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        onExpandChange: {
            type: import("vue").PropType<(value: boolean) => void>;
            default: () => void;
        };
        collapsed: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        modelValue: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        defaultCollapsed: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
    }>> & {
        "onUpdate:collapsed"?: (...args: any[]) => any;
    }, () => JSX.Element, {}, {}, {}, {
        modelValue: boolean;
        collapsed: boolean;
        onExpandChange: (value: boolean) => void;
        expandIconPlacement: "left" | "right";
        collapsePanelProps: import("tdesign-vue-next").TdCollapsePanelProps;
        defaultCollapsed: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    collapsePanelProps: {
        type: import("vue").PropType<import("tdesign-vue-next").TdCollapsePanelProps>;
        default: () => import("tdesign-vue-next").TdCollapsePanelProps;
    };
    expandIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    expandIconPlacement: {
        type: import("vue").PropType<"left" | "right">;
        default: "left" | "right";
        validator(val: "left" | "right"): boolean;
    };
    header: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    headerRightContent: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    onExpandChange: {
        type: import("vue").PropType<(value: boolean) => void>;
        default: () => void;
    };
    collapsed: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    modelValue: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    defaultCollapsed: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
}>> & {
    "onUpdate:collapsed"?: (...args: any[]) => any;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "update:collapsed"[], "update:collapsed", {
    modelValue: boolean;
    collapsed: boolean;
    onExpandChange: (value: boolean) => void;
    expandIconPlacement: "left" | "right";
    collapsePanelProps: import("tdesign-vue-next").TdCollapsePanelProps;
    defaultCollapsed: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export declare const ChatAI: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        apiKey: {
            type: StringConstructor;
        };
        welcome: {
            type: ArrayConstructor;
            default: () => String[];
        };
        userMeta: {
            type: import("vue").PropType<import("./type").MetaData>;
            default(): {};
        };
        assistantMeta: {
            type: import("vue").PropType<import("./type").MetaData>;
            default(): {};
        };
        footer: {
            type: BooleanConstructor;
            default: boolean;
        };
        showUserMsg: {
            type: BooleanConstructor;
            default: boolean;
        };
        operationBtn: {
            type: import("vue").PropType<import("./props").operationBtnType[]>;
            default: string[];
        };
        layout: {
            type: import("vue").PropType<import("./type").Layout>;
            default: string;
            validator(val: string): boolean;
        };
        chatRequest: {
            type: FunctionConstructor;
        };
        model: {
            type: StringConstructor;
            default: string;
        };
        onOperation: import("vue").PropType<(value: string, context: {
            e: MouseEvent;
            index?: number;
            item?: TdChatItemProps;
        }) => void>;
    }>> & {
        onClear?: (...args: any[]) => any;
        onOperation?: (...args: any[]) => any;
    }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("clear" | "operation")[], import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        apiKey: {
            type: StringConstructor;
        };
        welcome: {
            type: ArrayConstructor;
            default: () => String[];
        };
        userMeta: {
            type: import("vue").PropType<import("./type").MetaData>;
            default(): {};
        };
        assistantMeta: {
            type: import("vue").PropType<import("./type").MetaData>;
            default(): {};
        };
        footer: {
            type: BooleanConstructor;
            default: boolean;
        };
        showUserMsg: {
            type: BooleanConstructor;
            default: boolean;
        };
        operationBtn: {
            type: import("vue").PropType<import("./props").operationBtnType[]>;
            default: string[];
        };
        layout: {
            type: import("vue").PropType<import("./type").Layout>;
            default: string;
            validator(val: string): boolean;
        };
        chatRequest: {
            type: FunctionConstructor;
        };
        model: {
            type: StringConstructor;
            default: string;
        };
        onOperation: import("vue").PropType<(value: string, context: {
            e: MouseEvent;
            index?: number;
            item?: TdChatItemProps;
        }) => void>;
    }>> & {
        onClear?: (...args: any[]) => any;
        onOperation?: (...args: any[]) => any;
    }, {
        footer: boolean;
        layout: import("./type").Layout;
        model: string;
        operationBtn: import("./props").operationBtnType[];
        welcome: unknown[];
        userMeta: {};
        assistantMeta: {};
        showUserMsg: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        apiKey: {
            type: StringConstructor;
        };
        welcome: {
            type: ArrayConstructor;
            default: () => String[];
        };
        userMeta: {
            type: import("vue").PropType<import("./type").MetaData>;
            default(): {};
        };
        assistantMeta: {
            type: import("vue").PropType<import("./type").MetaData>;
            default(): {};
        };
        footer: {
            type: BooleanConstructor;
            default: boolean;
        };
        showUserMsg: {
            type: BooleanConstructor;
            default: boolean;
        };
        operationBtn: {
            type: import("vue").PropType<import("./props").operationBtnType[]>;
            default: string[];
        };
        layout: {
            type: import("vue").PropType<import("./type").Layout>;
            default: string;
            validator(val: string): boolean;
        };
        chatRequest: {
            type: FunctionConstructor;
        };
        model: {
            type: StringConstructor;
            default: string;
        };
        onOperation: import("vue").PropType<(value: string, context: {
            e: MouseEvent;
            index?: number;
            item?: TdChatItemProps;
        }) => void>;
    }>> & {
        onClear?: (...args: any[]) => any;
        onOperation?: (...args: any[]) => any;
    }, () => JSX.Element, {}, {}, {}, {
        footer: boolean;
        layout: import("./type").Layout;
        model: string;
        operationBtn: import("./props").operationBtnType[];
        welcome: unknown[];
        userMeta: {};
        assistantMeta: {};
        showUserMsg: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    apiKey: {
        type: StringConstructor;
    };
    welcome: {
        type: ArrayConstructor;
        default: () => String[];
    };
    userMeta: {
        type: import("vue").PropType<import("./type").MetaData>;
        default(): {};
    };
    assistantMeta: {
        type: import("vue").PropType<import("./type").MetaData>;
        default(): {};
    };
    footer: {
        type: BooleanConstructor;
        default: boolean;
    };
    showUserMsg: {
        type: BooleanConstructor;
        default: boolean;
    };
    operationBtn: {
        type: import("vue").PropType<import("./props").operationBtnType[]>;
        default: string[];
    };
    layout: {
        type: import("vue").PropType<import("./type").Layout>;
        default: string;
        validator(val: string): boolean;
    };
    chatRequest: {
        type: FunctionConstructor;
    };
    model: {
        type: StringConstructor;
        default: string;
    };
    onOperation: import("vue").PropType<(value: string, context: {
        e: MouseEvent;
        index?: number;
        item?: TdChatItemProps;
    }) => void>;
}>> & {
    onClear?: (...args: any[]) => any;
    onOperation?: (...args: any[]) => any;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("clear" | "operation")[], "clear" | "operation", {
    footer: boolean;
    layout: import("./type").Layout;
    model: string;
    operationBtn: import("./props").operationBtnType[];
    welcome: unknown[];
    userMeta: {};
    assistantMeta: {};
    showUserMsg: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export declare const ChatMofa: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        apiKey: {
            type: StringConstructor;
        };
        mofaId: {
            type: StringConstructor;
            required: true;
        };
        welcome: {
            type: ArrayConstructor;
            default: () => String[];
        };
        userMeta: {
            type: import("vue").PropType<import("./type").MetaData>;
            default(): {};
        };
        assistantMeta: {
            type: import("vue").PropType<import("./type").MetaData>;
            default(): {};
        };
        footer: {
            type: BooleanConstructor;
            default: boolean;
        };
        showUserMsg: {
            type: BooleanConstructor;
            default: boolean;
        };
        operationBtn: {
            type: import("vue").PropType<import("./props").operationBtnType[]>;
            default: string[];
        };
        chatRequest: {
            type: FunctionConstructor;
        };
        layout: {
            type: import("vue").PropType<import("./type").Layout>;
            default: string;
            validator(val: string): boolean;
        };
        onOperation: import("vue").PropType<(value: string, context: {
            e: MouseEvent;
            index?: number;
            item?: TdChatItemProps;
        }) => void>;
    }>> & {
        onClear?: (...args: any[]) => any;
        onOperation?: (...args: any[]) => any;
    }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("clear" | "operation")[], import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        apiKey: {
            type: StringConstructor;
        };
        mofaId: {
            type: StringConstructor;
            required: true;
        };
        welcome: {
            type: ArrayConstructor;
            default: () => String[];
        };
        userMeta: {
            type: import("vue").PropType<import("./type").MetaData>;
            default(): {};
        };
        assistantMeta: {
            type: import("vue").PropType<import("./type").MetaData>;
            default(): {};
        };
        footer: {
            type: BooleanConstructor;
            default: boolean;
        };
        showUserMsg: {
            type: BooleanConstructor;
            default: boolean;
        };
        operationBtn: {
            type: import("vue").PropType<import("./props").operationBtnType[]>;
            default: string[];
        };
        chatRequest: {
            type: FunctionConstructor;
        };
        layout: {
            type: import("vue").PropType<import("./type").Layout>;
            default: string;
            validator(val: string): boolean;
        };
        onOperation: import("vue").PropType<(value: string, context: {
            e: MouseEvent;
            index?: number;
            item?: TdChatItemProps;
        }) => void>;
    }>> & {
        onClear?: (...args: any[]) => any;
        onOperation?: (...args: any[]) => any;
    }, {
        footer: boolean;
        layout: import("./type").Layout;
        operationBtn: import("./props").operationBtnType[];
        welcome: unknown[];
        userMeta: {};
        assistantMeta: {};
        showUserMsg: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        apiKey: {
            type: StringConstructor;
        };
        mofaId: {
            type: StringConstructor;
            required: true;
        };
        welcome: {
            type: ArrayConstructor;
            default: () => String[];
        };
        userMeta: {
            type: import("vue").PropType<import("./type").MetaData>;
            default(): {};
        };
        assistantMeta: {
            type: import("vue").PropType<import("./type").MetaData>;
            default(): {};
        };
        footer: {
            type: BooleanConstructor;
            default: boolean;
        };
        showUserMsg: {
            type: BooleanConstructor;
            default: boolean;
        };
        operationBtn: {
            type: import("vue").PropType<import("./props").operationBtnType[]>;
            default: string[];
        };
        chatRequest: {
            type: FunctionConstructor;
        };
        layout: {
            type: import("vue").PropType<import("./type").Layout>;
            default: string;
            validator(val: string): boolean;
        };
        onOperation: import("vue").PropType<(value: string, context: {
            e: MouseEvent;
            index?: number;
            item?: TdChatItemProps;
        }) => void>;
    }>> & {
        onClear?: (...args: any[]) => any;
        onOperation?: (...args: any[]) => any;
    }, () => JSX.Element, {}, {}, {}, {
        footer: boolean;
        layout: import("./type").Layout;
        operationBtn: import("./props").operationBtnType[];
        welcome: unknown[];
        userMeta: {};
        assistantMeta: {};
        showUserMsg: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    apiKey: {
        type: StringConstructor;
    };
    mofaId: {
        type: StringConstructor;
        required: true;
    };
    welcome: {
        type: ArrayConstructor;
        default: () => String[];
    };
    userMeta: {
        type: import("vue").PropType<import("./type").MetaData>;
        default(): {};
    };
    assistantMeta: {
        type: import("vue").PropType<import("./type").MetaData>;
        default(): {};
    };
    footer: {
        type: BooleanConstructor;
        default: boolean;
    };
    showUserMsg: {
        type: BooleanConstructor;
        default: boolean;
    };
    operationBtn: {
        type: import("vue").PropType<import("./props").operationBtnType[]>;
        default: string[];
    };
    chatRequest: {
        type: FunctionConstructor;
    };
    layout: {
        type: import("vue").PropType<import("./type").Layout>;
        default: string;
        validator(val: string): boolean;
    };
    onOperation: import("vue").PropType<(value: string, context: {
        e: MouseEvent;
        index?: number;
        item?: TdChatItemProps;
    }) => void>;
}>> & {
    onClear?: (...args: any[]) => any;
    onOperation?: (...args: any[]) => any;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("clear" | "operation")[], "clear" | "operation", {
    footer: boolean;
    layout: import("./type").Layout;
    operationBtn: import("./props").operationBtnType[];
    welcome: unknown[];
    userMeta: {};
    assistantMeta: {};
    showUserMsg: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export declare const ChatAction: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        isGood: {
            type: import("vue").PropType<Boolean>;
            default: boolean;
        };
        isBad: {
            type: import("vue").PropType<Boolean>;
            default: boolean;
        };
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: string;
        };
        disabled: import("vue").PropType<boolean>;
        operationBtn: {
            type: import("vue").PropType<import("./props").operationBtnType[]>;
            default: string[];
        };
        onOperation: import("vue").PropType<(value: string, context: {
            e: MouseEvent;
            index?: number;
            item?: TdChatItemProps;
        }) => void>;
    }>> & {
        onOperation?: (...args: any[]) => any;
    }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "operation"[], import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        isGood: {
            type: import("vue").PropType<Boolean>;
            default: boolean;
        };
        isBad: {
            type: import("vue").PropType<Boolean>;
            default: boolean;
        };
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: string;
        };
        disabled: import("vue").PropType<boolean>;
        operationBtn: {
            type: import("vue").PropType<import("./props").operationBtnType[]>;
            default: string[];
        };
        onOperation: import("vue").PropType<(value: string, context: {
            e: MouseEvent;
            index?: number;
            item?: TdChatItemProps;
        }) => void>;
    }>> & {
        onOperation?: (...args: any[]) => any;
    }, {
        content: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        isGood: Boolean;
        isBad: Boolean;
        operationBtn: import("./props").operationBtnType[];
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        isGood: {
            type: import("vue").PropType<Boolean>;
            default: boolean;
        };
        isBad: {
            type: import("vue").PropType<Boolean>;
            default: boolean;
        };
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: string;
        };
        disabled: import("vue").PropType<boolean>;
        operationBtn: {
            type: import("vue").PropType<import("./props").operationBtnType[]>;
            default: string[];
        };
        onOperation: import("vue").PropType<(value: string, context: {
            e: MouseEvent;
            index?: number;
            item?: TdChatItemProps;
        }) => void>;
    }>> & {
        onOperation?: (...args: any[]) => any;
    }, () => JSX.Element, {}, {}, {}, {
        content: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        isGood: Boolean;
        isBad: Boolean;
        operationBtn: import("./props").operationBtnType[];
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    isGood: {
        type: import("vue").PropType<Boolean>;
        default: boolean;
    };
    isBad: {
        type: import("vue").PropType<Boolean>;
        default: boolean;
    };
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        default: string;
    };
    disabled: import("vue").PropType<boolean>;
    operationBtn: {
        type: import("vue").PropType<import("./props").operationBtnType[]>;
        default: string[];
    };
    onOperation: import("vue").PropType<(value: string, context: {
        e: MouseEvent;
        index?: number;
        item?: TdChatItemProps;
    }) => void>;
}>> & {
    onOperation?: (...args: any[]) => any;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "operation"[], "operation", {
    content: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
    isGood: Boolean;
    isBad: Boolean;
    operationBtn: import("./props").operationBtnType[];
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export declare const ChatLoading: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        animation: {
            type: StringConstructor;
            default: string;
        };
        text: {
            type: StringConstructor;
            default: string;
        };
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        animation: {
            type: StringConstructor;
            default: string;
        };
        text: {
            type: StringConstructor;
            default: string;
        };
    }>>, {
        animation: string;
        text: string;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        animation: {
            type: StringConstructor;
            default: string;
        };
        text: {
            type: StringConstructor;
            default: string;
        };
    }>>, () => JSX.Element, {}, {}, {}, {
        animation: string;
        text: string;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    animation: {
        type: StringConstructor;
        default: string;
    };
    text: {
        type: StringConstructor;
        default: string;
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    animation: string;
    text: string;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export default Chat;
