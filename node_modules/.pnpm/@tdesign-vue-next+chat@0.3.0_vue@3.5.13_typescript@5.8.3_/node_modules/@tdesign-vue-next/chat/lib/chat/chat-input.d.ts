declare const _default: import("vue").DefineComponent<{
    modelValue: {
        type: StringConstructor;
        default: string;
    };
    value: {
        type: StringConstructor;
        default: string;
    };
    defaultValue: {
        type: StringConstructor;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    stopDisabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    autofocus: {
        type: BooleanConstructor;
        default: boolean;
    };
    autosize: {
        type: import("vue").PropType<boolean | {
            minRows?: number;
            maxRows?: number;
        }>;
        default: {
            minRows: number;
            maxRows: number;
        };
    };
    onSend: import("vue").PropType<(value: string, context: {
        e: MouseEvent | KeyboardEvent;
    }) => void>;
    onStop: import("vue").PropType<(value: string, context: {
        e: MouseEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: string, context: {
        e: MouseEvent | InputEvent | KeyboardEvent;
    }) => void>;
    onBlur: import("vue").PropType<(value: string, context: {
        e: FocusEvent;
    }) => void>;
    onFocus: import("vue").PropType<(value: string, context: {
        e: FocusEvent;
    }) => void>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("stop" | "blur" | "focus" | "send" | "update:modelValue")[], "stop" | "blur" | "focus" | "send" | "update:modelValue", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: StringConstructor;
        default: string;
    };
    value: {
        type: StringConstructor;
        default: string;
    };
    defaultValue: {
        type: StringConstructor;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    stopDisabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    autofocus: {
        type: BooleanConstructor;
        default: boolean;
    };
    autosize: {
        type: import("vue").PropType<boolean | {
            minRows?: number;
            maxRows?: number;
        }>;
        default: {
            minRows: number;
            maxRows: number;
        };
    };
    onSend: import("vue").PropType<(value: string, context: {
        e: MouseEvent | KeyboardEvent;
    }) => void>;
    onStop: import("vue").PropType<(value: string, context: {
        e: MouseEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: string, context: {
        e: MouseEvent | InputEvent | KeyboardEvent;
    }) => void>;
    onBlur: import("vue").PropType<(value: string, context: {
        e: FocusEvent;
    }) => void>;
    onFocus: import("vue").PropType<(value: string, context: {
        e: FocusEvent;
    }) => void>;
}>> & {
    onStop?: (...args: any[]) => any;
    onFocus?: (...args: any[]) => any;
    onBlur?: (...args: any[]) => any;
    onSend?: (...args: any[]) => any;
    "onUpdate:modelValue"?: (...args: any[]) => any;
}, {
    value: string;
    autofocus: boolean;
    disabled: boolean;
    placeholder: string;
    autosize: {
        minRows: number;
        maxRows: number;
    };
    modelValue: string;
    defaultValue: string;
    stopDisabled: boolean;
}, {}>;
export default _default;
