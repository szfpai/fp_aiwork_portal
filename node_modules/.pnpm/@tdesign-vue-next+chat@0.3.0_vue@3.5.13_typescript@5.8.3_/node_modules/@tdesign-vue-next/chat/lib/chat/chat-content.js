/**
 * tdesign-vue-chat v0.3.0
 * (c) 2025 tdesign
 * @license MIT
 */

import { defineComponent, inject, computed, onMounted, createVNode } from 'vue';
import Clipboard from 'clipboard';
import hljs from 'highlight.js';
import { Marked } from 'marked';
import { markedHighlight } from 'marked-highlight';
import props from './props.js';
import { usePrefixClass } from '../hooks/useConfig.js';
import { useConfig } from '../config-provider/useConfig.js';
import '../_chunks/dep-71e79d05.js';
import '../_chunks/dep-bcb12ef4.js';
import '@babel/runtime/helpers/typeof';
import '../_chunks/dep-00225ab5.js';
import '../_chunks/dep-9877a0b1.js';
import '../_chunks/dep-790f0c90.js';
import '../_chunks/dep-f4def779.js';
import '../_chunks/dep-9ad1aba4.js';
import '../_common/js/global-config/default-config.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../_chunks/dep-e130a03a.js';
import '../_chunks/dep-7c13804f.js';
import '../_chunks/dep-7ca3deee.js';
import '../_chunks/dep-44c1237e.js';

var escapeTest = /[&<>"']/;
var escapeReplace = new RegExp(escapeTest.source, "g");
var escapeTestNoEncode = /[<>"']|&(?!(#\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\w+);)/;
var escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, "g");
var escapeReplacements = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#39;"
};
var getEscapeReplacement = function getEscapeReplacement(ch) {
  return escapeReplacements[ch];
};
function escape(html) {
  var encode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  if (encode) {
    if (escapeTest.test(html)) {
      return html.replace(escapeReplace, getEscapeReplacement);
    }
  } else if (escapeTestNoEncode.test(html)) {
    return html.replace(escapeReplaceNoEncode, getEscapeReplacement);
  }
  return html;
}
var _ChatContent = defineComponent({
  name: "TChatContent",
  components: {},
  props: props,
  setup: function setup(props2) {
    var COMPONENT_NAME = usePrefixClass("chat");
    var _useConfig = useConfig("chat"),
      globalConfig = _useConfig.globalConfig;
    var _globalConfig$value = globalConfig.value,
      copyCodeBtnText = _globalConfig$value.copyCodeBtnText,
      copyCodeSuccessText = _globalConfig$value.copyCodeSuccessText;
    var injectedRole = inject("role");
    var role = computed(function () {
      return props2.role || (injectedRole === null || injectedRole === void 0 ? void 0 : injectedRole.value) || "";
    });
    onMounted(function () {
      var clipboard = new Clipboard(".".concat(COMPONENT_NAME.value, "__copy-btn"), {
        target: function target(trigger) {
          return trigger.parentNode.nextElementSibling;
        }
      });
      clipboard.on("success", function (e) {
        e.trigger.textContent = copyCodeSuccessText;
        setTimeout(function () {
          e.trigger.textContent = copyCodeBtnText;
        }, 2e3);
        e.clearSelection();
      });
    });
    var marked = new Marked(markedHighlight({
      highlight: function highlight(code) {
        return hljs.highlightAuto(code).value;
      }
    }), {
      renderer: {
        code: function code(_code, lang, escaped) {
          return "<pre class=\"hljs\"><div class=\"t-chat__code-header\">\n        <span class=\"t-chat__language-txt\">".concat(escape(lang) || "", "</span>\n        <div class=\"t-chat__copy-btn\" data-clipboard-action=\"copy\">").concat(copyCodeBtnText, "</div>\n        </div><code class=\"hljs language-").concat(escape(lang), "\" >").concat(escaped ? _code : escape(_code), "</code></pre>");
        }
      }
    });
    var getHtmlByMarked = function getHtmlByMarked(markdown) {
      if (!markdown) {
        return '<div class="waiting"></div>';
      }
      return marked.parse(markdown);
    };
    var textInfo = computed(function () {
      if (role.value === "model-change") {
        return props2.content || "";
      }
      if (role.value === "user" && typeof props2.content === "string") {
        return escape(props2.content);
      }
      return getHtmlByMarked(props2.content);
    });
    return function () {
      return createVNode("div", {
        "class": ["".concat(COMPONENT_NAME.value, "__text")]
      }, [role.value === "user" ? createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__text--").concat(role.value)
      }, [createVNode("pre", {
        "innerHTML": textInfo.value
      }, null)]) : createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__text__assistant")
      }, [createVNode("div", {
        "class": ["".concat(COMPONENT_NAME.value, "__text__content"), "".concat(COMPONENT_NAME.value, "__text--").concat(role.value)],
        "innerHTML": textInfo.value
      }, null)])]);
    };
  }
});

export { _ChatContent as default };
//# sourceMappingURL=chat-content.js.map
