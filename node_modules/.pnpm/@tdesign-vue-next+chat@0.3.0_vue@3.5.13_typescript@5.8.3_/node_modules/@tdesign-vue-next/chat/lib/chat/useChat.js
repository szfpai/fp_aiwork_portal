/**
 * tdesign-vue-chat v0.3.0
 * (c) 2025 tdesign
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import _asyncToGenerator from '@babel/runtime/helpers/asyncToGenerator';
import _regeneratorRuntime from '@babel/runtime/regenerator';
import { ref } from 'vue';
import { formatDateByRule, getUrl, getMofaUrl } from './util.js';
import { sseRequest as sseRequest$1, fetchSSE as fetchSSE$1 } from './sseRequest.js';
import { sseRequest, fetchSSE } from './sseRequest-hunyuan.js';
import '@babel/runtime/helpers/classCallCheck';
import '@babel/runtime/helpers/createClass';
import 'tdesign-vue-next';
import '@babel/runtime/helpers/toConsumableArray';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function useChat(props, emit) {
  var welcome = props.welcome || [];
  var apiKey = props.apiKey || "";
  var assistantMeta = (props === null || props === void 0 ? void 0 : props.assistantMeta) || {};
  var userMeta = (props === null || props === void 0 ? void 0 : props.userMeta) || {};
  var chatList = ref([]);
  var loading = ref(false);
  var fetchCancel = ref(null);
  var isStreamLoad = ref(false);
  var controller = new AbortController();
  var signal = controller.signal;
  if (welcome.length > 0) {
    welcome.forEach(function (item) {
      chatList.value.unshift({
        avatar: assistantMeta === null || assistantMeta === void 0 ? void 0 : assistantMeta.avatar,
        name: assistantMeta === null || assistantMeta === void 0 ? void 0 : assistantMeta.name,
        datetime: formatDateByRule(new Date(), "yyyy/MM/dd hh:mm:ss"),
        content: item,
        role: "system"
      });
    });
  }
  signal.addEventListener("abort", function () {
    try {
      onAbort && onAbort();
    } catch (_unused) {}
  });
  var clearConfirm = function clearConfirm(context) {
    chatList.value = [];
    emit("clear", context);
  };
  var onStop = function onStop() {
    if (controller && isStreamLoad.value) {
      fetchCancel.value.abort();
      loading.value = false;
      isStreamLoad.value = false;
    }
  };
  var innerFetchSSE = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(url, params, sseRequest2) {
      var lastItem;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            lastItem = chatList.value[0];
            sseRequest2({
              url: url,
              data: params,
              success: function success(result) {
                loading.value = false;
                var type = result.type,
                  data = result.data;
                if (type === "error") {
                  Object.assign(lastItem, {
                    role: "error",
                    content: data.response
                  });
                } else if (type === "delta") {
                  lastItem.content += data === null || data === void 0 ? void 0 : data.delta.content;
                } else {
                  if (data !== null && data !== void 0 && data.response) {
                    lastItem.content = data === null || data === void 0 ? void 0 : data.response;
                  }
                }
              },
              cancel: function cancel(_cancel) {
                fetchCancel.value = _cancel;
              },
              abort: function abort() {
                isStreamLoad.value = false;
                loading.value = false;
              },
              complete: function complete(isOk, msg) {
                if (!isOk || !lastItem.content) {
                  lastItem.role = "error";
                  lastItem.content = msg;
                }
                isStreamLoad.value = false;
                loading.value = false;
              }
            }, apiKey);
          case 2:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function innerFetchSSE(_x, _x2, _x3) {
      return _ref.apply(this, arguments);
    };
  }();
  var operation = function operation(type, options) {
    var index = options.index;
    var item = chatList.value[index];
    if (type === "replay") {
      var userQuery = chatList.value[index + 1].content;
      sendRequest("hunyuan", userQuery, props.model || props.mofaId);
    }
    emit("operation", type, _objectSpread(_objectSpread({}, options), {}, {
      item: item
    }));
  };
  var getParams = function getParams(type, inputValue, modelOrMofaId) {
    var paramsMap = {
      hunyuan: {
        reqData: {
          messages: [{
            role: "user",
            content: inputValue
          }],
          model: modelOrMofaId || props.model,
          stream: true
        },
        url: getUrl(props.model),
        sseRequest: sseRequest,
        fetchSSE: fetchSSE
      },
      mofa: {
        reqData: {
          query: inputValue,
          history: [],
          mofa_id: modelOrMofaId || props.mofaId,
          contextFlag: 1
        },
        url: getMofaUrl(),
        sseRequest: sseRequest$1,
        fetchSSE: fetchSSE$1
      }
    };
    return paramsMap[type];
  };
  var setChatList = function setChatList(inputValue) {
    if (loading.value) {
      return;
    }
    if (!inputValue) return;
    if (props.showUserMsg) {
      chatList.value.unshift({
        avatar: userMeta === null || userMeta === void 0 ? void 0 : userMeta.avatar,
        name: userMeta === null || userMeta === void 0 ? void 0 : userMeta.name,
        datetime: new Date().toDateString(),
        content: inputValue,
        role: "user"
      });
    }
    chatList.value.unshift({
      avatar: assistantMeta === null || assistantMeta === void 0 ? void 0 : assistantMeta.avatar,
      name: assistantMeta === null || assistantMeta === void 0 ? void 0 : assistantMeta.name,
      datetime: new Date().toDateString(),
      content: "",
      role: "assistant"
    });
  };
  var onAbort = function onAbort() {
    isStreamLoad.value = false;
    loading.value = false;
  };
  var sendRequest = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(type, inputValue, modelOrMofaId) {
      var lastItem, _getParams, reqData, url, sseRequest2, fetchSSE2;
      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            setChatList(inputValue);
            loading.value = true;
            isStreamLoad.value = true;
            lastItem = chatList.value[0];
            _getParams = getParams(type, inputValue, modelOrMofaId), reqData = _getParams.reqData, url = _getParams.url, sseRequest2 = _getParams.sseRequest, fetchSSE2 = _getParams.fetchSSE;
            if (!props.chatRequest) {
              _context2.next = 9;
              break;
            }
            _context2.next = 8;
            return fetchSSE2(function () {
              return props.chatRequest({
                messages: [{
                  role: "user",
                  content: inputValue
                }],
                cancel: function cancel(_cancel2) {
                  fetchCancel.value = _cancel2;
                }
              });
            }, {
              success: function success(result) {
                loading.value = false;
                var type2 = result.type,
                  data = result.data;
                if (type2 === "error") {
                  Object.assign(lastItem, {
                    role: "error",
                    content: data.response
                  });
                } else if (type2 === "delta") {
                  lastItem.content += data === null || data === void 0 ? void 0 : data.delta.content;
                } else {
                  if (data !== null && data !== void 0 && data.response) {
                    lastItem.content = data === null || data === void 0 ? void 0 : data.response;
                  }
                }
              },
              complete: function complete(isOk, msg) {
                if (!isOk || !lastItem.content) {
                  lastItem.role = "error";
                  lastItem.content = msg;
                }
                isStreamLoad.value = false;
                loading.value = false;
              }
            });
          case 8:
            return _context2.abrupt("return");
          case 9:
            if (url) {
              _context2.next = 11;
              break;
            }
            return _context2.abrupt("return");
          case 11:
            innerFetchSSE(url, reqData, sseRequest2);
          case 12:
          case "end":
            return _context2.stop();
        }
      }, _callee2);
    }));
    return function sendRequest(_x4, _x5, _x6) {
      return _ref2.apply(this, arguments);
    };
  }();
  return {
    chatList: chatList,
    loading: loading,
    isStreamLoad: isStreamLoad,
    onStop: onStop,
    setChatList: setChatList,
    operation: operation,
    clearConfirm: clearConfirm,
    sendRequest: sendRequest
  };
}

export { useChat };
//# sourceMappingURL=useChat.js.map
