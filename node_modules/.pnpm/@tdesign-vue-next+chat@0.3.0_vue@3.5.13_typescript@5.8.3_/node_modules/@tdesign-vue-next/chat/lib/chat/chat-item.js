/**
 * tdesign-vue-chat v0.3.0
 * (c) 2025 tdesign
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, computed, provide, createVNode, Fragment } from 'vue';
import { usePrefixClass } from '../hooks/useConfig.js';
import props from './chat-item-props.js';
import { isString, isObject } from 'lodash-es';
import { Skeleton } from 'tdesign-vue-next';
import { useTNodeJSX } from '../hooks/tnode.js';
import _ChatContent from './chat-content.js';
import { CheckCircleIcon } from 'tdesign-icons-vue-next';
import _ChatLoading from './chat-loading.js';
import _ChatReasoning from './chat-reasoning.js';
import { useConfig } from '../config-provider/useConfig.js';
import '../_chunks/dep-71e79d05.js';
import '../_chunks/dep-bcb12ef4.js';
import '@babel/runtime/helpers/typeof';
import '../_chunks/dep-00225ab5.js';
import '../_chunks/dep-0c30715b.js';
import '../_chunks/dep-e93ca1b3.js';
import '../_chunks/dep-9ad1aba4.js';
import '../_chunks/dep-f4def779.js';
import '../_chunks/dep-3c645bb6.js';
import '../utils/render-tnode.js';
import '../_chunks/dep-7ca3deee.js';
import '../_chunks/dep-790f0c90.js';
import '../_chunks/dep-44c1237e.js';
import 'clipboard';
import 'highlight.js';
import 'marked';
import 'marked-highlight';
import './props.js';
import '@babel/runtime/helpers/slicedToArray';
import './chat-reasoning-props.js';
import '../hooks/useVModel.js';
import '../_chunks/dep-9877a0b1.js';
import '../_common/js/global-config/default-config.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../_chunks/dep-e130a03a.js';
import '../_chunks/dep-7c13804f.js';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var ChatItem = defineComponent({
  name: "TChatItem",
  props: _objectSpread(_objectSpread({}, props), {}, {
    reasoningLoading: {
      type: Boolean,
      "default": false
    }
  }),
  emits: ["operation"],
  setup: function setup(props2) {
    var COMPONENT_NAME = usePrefixClass("chat");
    var _useConfig = useConfig("chat"),
      globalConfig = _useConfig.globalConfig;
    var _globalConfig$value = globalConfig.value,
      loadingText = _globalConfig$value.loadingText,
      loadingEndText = _globalConfig$value.loadingEndText;
    var renderTNodeJSX = useTNodeJSX();
    var role = computed(function () {
      return renderTNodeJSX("role");
    });
    var variant = computed(function () {
      return renderTNodeJSX("variant");
    });
    provide("role", role);
    return function () {
      var roleValue = renderTNodeJSX("role");
      var name = renderTNodeJSX("name", {
        slotFirst: true
      }) || props2.name;
      var datetime = renderTNodeJSX("datetime", {
        slotFirst: true
      }) || props2.datetime;
      var avatar = renderTNodeJSX("avatar", {
        slotFirst: true
      }) || props2.avatar;
      var showNameDatetime = computed(function () {
        return name || datetime;
      });
      var content = renderTNodeJSX("content", {
        slotFirst: true
      }) || props2.content;
      var contentClasses = computed(function () {
        return showNameDatetime.value ? ["".concat(COMPONENT_NAME.value, "__content")] : ["".concat(COMPONENT_NAME.value, "__content"), "".concat(COMPONENT_NAME.value, "__content--base")];
      });
      var avatarDom = avatar ? createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__avatar")
      }, [createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__avatar__box")
      }, [isString(avatar) ? createVNode("img", {
        "src": avatar,
        "alt": "",
        "class": "".concat(COMPONENT_NAME.value, "__avatar-image")
      }, null) : avatar])]) : null;
      var nameDatetimeDom = showNameDatetime.value && createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__base")
      }, [name && createVNode("span", {
        "class": "".concat(COMPONENT_NAME.value, "__name")
      }, [name]), datetime && createVNode("span", {
        "class": "".concat(COMPONENT_NAME.value, "__time")
      }, [datetime])]);
      var textLoading = props2.textLoading;
      var reasoningLoading = props2.reasoningLoading;
      var showActions = computed(function () {
        return renderTNodeJSX("actions");
      });
      var renderHeader = function renderHeader() {
        if (reasoningLoading) {
          return createVNode(_ChatLoading, {
            "text": loadingText
          }, null);
        }
        return createVNode("div", {
          "style": "display:flex;align-items:center"
        }, [createVNode(CheckCircleIcon, {
          "style": {
            color: "var(--td-success-color-5)",
            fontSize: "20px",
            marginRight: "8px"
          }
        }, null), createVNode("span", null, [loadingEndText])]);
      };
      var contentDom = createVNode(Fragment, null, [role.value !== "model-change" && avatarDom, createVNode("div", {
        "class": contentClasses.value
      }, [role.value !== "model-change" && nameDatetimeDom, textLoading && (props2.animation === "skeleton" ? createVNode(Skeleton, {
        "loading": textLoading,
        "animation": "gradient"
      }, null) : createVNode(_ChatLoading, {
        "loading": textLoading,
        "animation": props2.animation
      }, null)), !textLoading && createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__detail")
      }, [isObject(props2.reasoning) && role.value === "assistant" && createVNode(_ChatReasoning, {
        "role": role.value,
        "expandIconPlacement": props2.reasoning.expandIconPlacement,
        "onExpandChange": props2.reasoning.onExpandChange,
        "collapse-panel-props": _objectSpread({}, props2.reasoning.collapsePanelProps)
      }, null), isString(props2.reasoning) && role.value === "assistant" && createVNode(_ChatReasoning, {
        "role": role.value,
        "expandIconPlacement": "right",
        "collapse-panel-props": {
          header: renderHeader(),
          content: createVNode(_ChatContent, {
            "isNormalText": false,
            "content": props2.reasoning,
            "role": role.value
          }, null)
        }
      }, null), isString(content) ? createVNode(_ChatContent, {
        "isNormalText": false,
        "content": content,
        "role": role.value
      }, null) : content]), role.value === "assistant" && showActions.value && createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__actions-margin")
      }, [renderTNodeJSX("actions")])])]);
      return createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__inner ").concat(roleValue, " ").concat(COMPONENT_NAME.value, "__text--variant--").concat(variant.value)
      }, [contentDom]);
    };
  }
});

export { ChatItem as default };
//# sourceMappingURL=chat-item.js.map
