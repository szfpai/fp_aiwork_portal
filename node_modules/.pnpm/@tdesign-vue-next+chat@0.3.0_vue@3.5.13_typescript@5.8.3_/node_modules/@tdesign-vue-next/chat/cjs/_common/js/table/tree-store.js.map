{"version":3,"file":"tree-store.js","sources":["../../../../node_modules/lodash-es/set.js","../../../../src/_common/js/table/tree-store.ts"],"sourcesContent":["import baseSet from './_baseSet.js';\n\n/**\n * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,\n * it's created. Arrays are created for missing index properties while objects\n * are created for all other missing properties. Use `_.setWith` to customize\n * `path` creation.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns `object`.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.set(object, 'a[0].b.c', 4);\n * console.log(object.a[0].b.c);\n * // => 4\n *\n * _.set(object, ['x', '0', 'y', 'z'], 5);\n * console.log(object.x[0].y.z);\n * // => 5\n */\nfunction set(object, path, value) {\n  return object == null ? object : baseSet(object, path, value);\n}\n\nexport default set;\n","import { isUndefined, get, set } from 'lodash-es';\n/* eslint-disable class-methods-use-this */\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-use-before-define */\nimport { isRowSelectedDisabled } from './utils';\nimport { PrimaryTableCol, TableRowState, TableRowValue, TableRowData } from './types';\nimport log from '../log';\n\nexport type TableTreeDataMap = Map<string | number, TableRowState>;\n\nexport interface TableRowModel<T> extends TableRowState<T> {\n  setData?: (key: string | number, data: T) => void;\n}\n\nexport interface KeysType {\n  rowKey: string;\n  childrenKey: string;\n}\n\nexport interface SwapParams<T> {\n  current: T;\n  target: T;\n  currentIndex: number;\n  targetIndex: number;\n}\n\nexport const TABLE_TREE_ERROR_CODE_NOT_SAME_LEVEL = {\n  code: 1001,\n  reason: 'The same level of rows can not be swapped.',\n};\n\n/**\n * 获取行唯一标识\n * @param row 行数据\n * @param colKey 列字段\n * @param rowIndex 行下标\n * @param level 层级\n */\nexport function getUniqueRowValue(row: TableRowData, colKey: string, rowIndex: number = 0, level: number = 0) {\n  const rowValue = get(row, colKey);\n  return rowIndex || level ? `${rowValue}_${rowIndex || 0}_${level || 0}}` : rowValue;\n}\n\n/**\n * 表格树形结构处理器\n * Vue 和 React 可以通用\n * 关键函数有以下几个\n * @toggleExpandData 处理树形结构展开收起\n * @setData 更新当行数据\n * @getData 获取单行数据\n * @remove 移除行数据，及其子节点\n * @appendTo 追加子节点到末尾\n */\nclass TableTreeStore<T extends TableRowData = TableRowData> {\n  /** 树形结构 Map 存储 */\n  treeDataMap: TableTreeDataMap = new Map();\n\n  expandAllRowIndex: 0;\n\n  constructor() {\n    this.treeDataMap = new Map();\n  }\n\n  /**\n   * 初始化 treeDataMap，不会改变 dataSource\n   * @param dataSource 树形数据源\n   * @param columns 列配置\n   * @param keys 字段别名\n   */\n  initialTreeStore(dataSource: T[], columns: PrimaryTableCol[], keys: KeysType) {\n    this.treeDataMap?.clear();\n    this.initialTreeDataMap(this.treeDataMap, dataSource, columns.find((col) => col.colKey === 'row-select'), keys);\n  }\n\n  /**\n   * 获取所有节点的唯一标识\n   */\n  getAllUniqueKeys(data: T[], keys: KeysType, arr: T[] = []) {\n    for (let i = 0, len = data.length; i < len; i++) {\n      const item = data[i];\n      arr.push(getUniqueRowValue(item, keys.rowKey));\n      const children = get(item, keys.childrenKey);\n      if (children?.length) {\n        this.getAllUniqueKeys(children, keys, arr);\n      }\n    }\n    return arr;\n  }\n\n  getExpandedChildrenKeys(data: T[], keys: KeysType, arr: (string | number)[] = []) {\n    for (let i = 0, len = data.length; i < len; i++) {\n      const item = data[i];\n      const rowValue = getUniqueRowValue(item, keys.rowKey);\n      const rowState = this.treeDataMap.get(rowValue);\n      if (rowState.expanded) {\n        arr.push(rowValue);\n      }\n      const children = get(item, keys.childrenKey);\n      if (children?.length) {\n        this.getExpandedChildrenKeys(children, keys, arr);\n      }\n    }\n    return arr;\n  }\n\n  expandTreeNode(rowList: (string | number)[], dataSource: T[], keys: KeysType) {\n    if (!rowList.length) return dataSource;\n    rowList.forEach((rowValue) => {\n      const rowState = this.treeDataMap.get(rowValue);\n      if (!rowState) return;\n      this.toggleExpandData({ row: rowState.row as T, rowIndex: rowState.rowIndex }, dataSource, keys, 'expand');\n    });\n    return dataSource;\n  }\n\n  foldTreeNode(rowList: (string | number)[], dataSource: T[], keys: KeysType) {\n    if (!rowList.length) return dataSource;\n    rowList.forEach((rowValue) => {\n      const rowState = this.treeDataMap.get(rowValue);\n      if (!rowState) return;\n      this.toggleExpandData({ row: rowState.row as T, rowIndex: rowState.rowIndex }, dataSource, keys, 'fold');\n    });\n    return dataSource;\n  }\n\n  toggleExpandData(p: { rowIndex: number; row: T }, dataSource: T[], keys: KeysType, type?: 'expand' | 'fold') {\n    if (!p) {\n      log.error('EnhancedTable', 'the node toggleExpanded doest not exist in `data`');\n      return dataSource;\n    }\n    const rowValue = get(p.row, keys.rowKey);\n    if (isUndefined(rowValue)) {\n      log.error('EnhancedTable', '`rowKey` could be wrong, can not get rowValue from `data` by `rowKey`.');\n      return [];\n    }\n    const childrenNodes = get(p.row, keys.childrenKey);\n    // childrenNodes = true，表示懒加载，直接返回，暂时不做展开处理\n    if (childrenNodes === true) return dataSource;\n    const r = this.treeDataMap.get(rowValue);\n    if (type === 'expand' && r.expanded) return dataSource;\n    if (type === 'fold' && !r.expanded) return dataSource;\n    r.rowIndex = r.rowIndex ?? p.rowIndex;\n    r.expanded = !r.expanded;\n    this.treeDataMap.set(rowValue, r);\n    return this.updateExpandRow(r, dataSource, keys);\n  }\n\n  updateExpandRow(changeRow: TableRowState, dataSource: T[], keys: KeysType): T[] {\n    const { row, rowIndex, expanded } = changeRow;\n    const { treeDataMap } = this;\n    const childrenNodes = get(row, keys.childrenKey);\n    if (!row || !childrenNodes) return dataSource;\n    if (expanded) {\n      updateChildrenRowState(treeDataMap, changeRow, expanded, keys);\n      updateRowExpandLength(treeDataMap, row, childrenNodes.length, 'expand', keys);\n      // eslint-disable-next-line\n      dataSource.splice.apply(dataSource, [rowIndex + 1, 0].concat(childrenNodes));\n    } else {\n      updateChildrenRowState<T>(treeDataMap, changeRow, expanded, keys);\n      const len = changeRow.expandChildrenLength || childrenNodes.length;\n      updateRowExpandLength(treeDataMap, row, -1 * len, 'fold', keys);\n      dataSource.splice(rowIndex + 1, len);\n    }\n    // 展开或收起后，会影响后续节点的 rowIndex，需同步更新\n    updateRowIndex(treeDataMap, dataSource, {\n      rowKey: keys.rowKey,\n      minRowIndex: rowIndex + 1,\n    });\n    return dataSource;\n  }\n\n  /**\n   * 获取当前行全部数据\n   * @param key 行唯一标识\n   * @returns {TableRowState} 当前行数据\n   */\n  getData(key: TableRowValue): TableRowState {\n    return this.treeDataMap.get(key);\n  }\n\n  /**\n   * 更新当前行数据，并返回当前行下标\n   * @param rowValue 当前行唯一标识值\n   * @param newRowData 新行数据\n   * @returns {number} rowIndex 设置的行下标\n   */\n  updateData(rowValue: TableRowValue, newRowData: T, dataSource: T[], keys: KeysType): number {\n    const newRowValue = getUniqueRowValue(newRowData, keys.rowKey);\n    const rowState = this.treeDataMap.get(rowValue);\n    // Map 没有查询到，或者查询到的 rowIndex 值为 -1，均表示当前数据不在 dataSource 列表中，未显示在页面中\n    if (!rowState || rowState.rowIndex === -1) {\n      updateRowData(dataSource, rowValue, newRowData, {\n        rowKey: keys.rowKey,\n        childrenKey: keys.childrenKey,\n      });\n      return -1;\n    }\n\n    // 懒加载处理：children 为 true，则需清空子元素在 map 中的值，而后方便重新加载\n    if (get(newRowData, keys.childrenKey) === true) {\n      const oldChildren = get(rowState.row, keys.childrenKey);\n      if (oldChildren?.length) {\n        for (let i = 0, len = oldChildren.length; i < len; i++) {\n          const rowValue = getUniqueRowValue(oldChildren[i], keys.rowKey);\n          const state = this.treeDataMap.get(rowValue);\n          if (state) {\n            this.treeDataMap.delete(rowValue);\n          }\n        }\n      }\n    }\n\n    const currentRowIndex = rowState.rowIndex;\n    rowState.row = newRowData;\n    rowState.id = newRowValue;\n\n    // 更新父元素中存储的当前元素值\n    if (rowState.parent) {\n      // 更新直接子元素数组\n      const siblings = get(rowState.parent.row, keys.childrenKey);\n      const index = siblings.findIndex((item: T) => getUniqueRowValue(item, keys.rowKey) === rowValue);\n      siblings[index] = newRowData;\n    }\n\n    this.treeDataMap.set(newRowValue, rowState);\n    // rowValue 也发生了变化，需移除 旧 rowValue 数据\n    if (rowValue !== newRowValue) {\n      this.treeDataMap.delete(rowValue);\n    }\n    return currentRowIndex;\n  }\n\n  /**\n   * 移除指定节点\n   * @param key 行唯一标识\n   */\n  remove(key: TableRowValue, dataSource: T[], keys: KeysType): T[] {\n    const r = this.treeDataMap.get(key);\n    if (r && r.rowIndex >= 0) {\n      // 移除当前节点时，展开的节点的子节点需同步移除\n      const removeNumber = (r.expandChildrenLength || 0) + 1;\n      dataSource.splice(r.rowIndex, removeNumber);\n\n      if (r.parent) {\n        const siblings = get(r.parent.row, keys.childrenKey);\n        const index = siblings.findIndex((item: TableRowData) => get(item, keys.rowKey) === key);\n        siblings.splice(index, 1);\n        updateRowExpandLength(this.treeDataMap, r.parent.row, -1 * removeNumber, 'delete', keys);\n      }\n\n      this.treeDataMap.delete(key);\n\n      // 更新 rowIndex 之后的下标\n      updateRowIndex(this.treeDataMap, dataSource, {\n        minRowIndex: r.rowIndex,\n        rowKey: keys.rowKey,\n        type: 'remove',\n      });\n    } else {\n      log.warn('EnhancedTable', 'Can not remove this node, which is not appeared.');\n    }\n    return dataSource;\n  }\n\n  /**\n   * 清除子节点\n   * @param key\n   * @param dataSource\n   * @param keys\n   */\n  removeChildren(key: TableRowValue, dataSource: T[], keys: KeysType): T[] {\n    const r = this.treeDataMap.get(key);\n    if (r && r.rowIndex >= 0) {\n      const removeNumber = r.expandChildrenLength || 0;\n      if (removeNumber) {\n        dataSource.splice(r.rowIndex + 1, removeNumber);\n      }\n      if (r.parent) {\n        updateRowExpandLength(this.treeDataMap, r.parent.row, -1 * removeNumber, 'delete', keys);\n      }\n      r.expandChildrenLength = 0;\n      r.expanded = false;\n      set(r.row, keys.childrenKey, undefined);\n      this.treeDataMap.set(key, r);\n      // 更新 rowIndex 之后的下标\n      if (removeNumber) {\n        updateRowIndex(this.treeDataMap, dataSource, {\n          minRowIndex: r.rowIndex + 1,\n          rowKey: keys.rowKey,\n          type: 'remove',\n        });\n      }\n    } else {\n      log.warn('EnhancedTable', 'Can not remove this node\\'s children, which is not appeared.');\n    }\n    return dataSource;\n  }\n\n  /**\n   * 为当前节点添加子节点，默认添加到最后一个节点。允许添加单个或多个\n   * @param rowValue 当前节点唯一标识\n   * @param newData 待添加的新节点\n   */\n  appendTo(rowValue: string | number, newData: T | T[], dataSource: T[], keys: KeysType): T[] {\n    const state = this.treeDataMap.get(rowValue);\n    if (!this.validateDataExist(state, rowValue)) return dataSource;\n    const children: T[] = get(state.row, keys.childrenKey);\n    // 子节点不存在，则表示为叶子节点\n    const isShowNewNode = state.expanded || !children?.length;\n    // 添加多个子节点时，需去除重复子节点\n    const tmpData = newData instanceof Array ? newData : [newData];\n    const newChildrenData: T[] = [];\n    const newChildrenStates: TableRowState[] = [];\n    let firstNewChildrenIndex = -1;\n    for (let i = 0, len = tmpData.length; i < len; i++) {\n      const oneData = tmpData[i];\n      const newRowValue = getUniqueRowValue(oneData, keys.rowKey);\n      const mapState = this.treeDataMap.get(newRowValue);\n      if (!this.validateDataDoubleExist(mapState, newRowValue)) {\n        log.warn('Table', `Duplicated Data \\`${newRowValue}\\` has been removed.`);\n      } else {\n        const rowIndex = isShowNewNode ? state.rowIndex + (state.expandChildrenLength || 0) + (i + 1) : -1;\n        if (i === 0) {\n          firstNewChildrenIndex = rowIndex;\n        }\n        const newState = {\n          id: newRowValue,\n          row: oneData,\n          rowIndex,\n          level: state.level + 1,\n          expanded: false,\n          expandChildrenLength: 0,\n          disabled: false,\n          path: [...state.path],\n          parent: state,\n        };\n        newState.path = newState.path.concat(newState);\n        newChildrenData.push(oneData);\n        newChildrenStates.push(newState);\n        this.treeDataMap.set(newRowValue, newState);\n      }\n    }\n    if (!newChildrenData.length) return dataSource;\n\n    if (children?.length) {\n      state.row[keys.childrenKey] = state.row[keys.childrenKey].concat(newChildrenData);\n    } else {\n      state.row[keys.childrenKey] = newChildrenData;\n      state.expanded = true;\n    }\n\n    // 如果当前节点为展开状态，则需要继续处理\n    if (isShowNewNode) {\n      dataSource.splice(firstNewChildrenIndex, 0, ...newChildrenData);\n      // 更新父元素及祖先元素展开子节点的数量\n      const newChildrenCount = newChildrenData.length || 1;\n      updateRowExpandLength(this.treeDataMap, state.row, newChildrenCount, 'insert', {\n        rowKey: keys.rowKey,\n        childrenKey: keys.childrenKey,\n      });\n      // 更新 rowIndex 之后的下标\n      updateRowIndex(this.treeDataMap, dataSource, {\n        minRowIndex: firstNewChildrenIndex + newChildrenData.length - 1,\n        rowKey: keys.rowKey,\n        type: 'add',\n        count: 1,\n      });\n    }\n\n    return dataSource;\n  }\n\n  appendToRoot(newData: T | T[], dataSource: T[], keys: KeysType) {\n    const newDataSource = dataSource.concat(newData);\n    const tmpNewData = newData instanceof Array ? newData : [newData];\n    const dataSourceLen = dataSource.length;\n    for (let i = 0, len = tmpNewData.length; i < len; i++) {\n      const rowValue = get(tmpNewData[i], keys.rowKey);\n      if (!rowValue) {\n        log.error('Table', '`rowKey` could be wrong, can not get rowValue from `data` by `rowKey`.');\n        continue;\n      }\n      const state: TableRowState = {\n        id: rowValue,\n        row: tmpNewData[i],\n        rowIndex: dataSourceLen + i,\n        level: 0,\n        expanded: false,\n        expandChildrenLength: 0,\n        disabled: false,\n      };\n      state.path = [state];\n      this.treeDataMap.set(rowValue, state);\n    }\n    return newDataSource;\n  }\n\n  /**\n   * 在当前节点后，插入一个兄弟节点\n   * @param rowValue 当前节点唯一标识\n   * @param newData 待添加的新节点\n   */\n  insertAfter(rowValue: string | number, newData: T, dataSource: T[], keys: KeysType): T[] {\n    return this.insert(rowValue, newData, dataSource, keys, 'after');\n  }\n\n  /**\n   * 在当前节点前，插入一个兄弟节点\n   * @param rowValue 当前节点唯一标识\n   * @param newData 待添加的新节点\n   */\n  insertBefore(rowValue: string | number, newData: T, dataSource: T[], keys: KeysType): T[] {\n    return this.insert(rowValue, newData, dataSource, keys, 'before');\n  }\n\n  insert(rowValue: string | number, newData: T, dataSource: T[], keys: KeysType, type: 'before' | 'after') {\n    const state = this.treeDataMap.get(rowValue);\n    if (!this.validateDataExist(state, rowValue)) return dataSource;\n    const newRowValue = get(newData, keys.rowKey);\n    const mapState = this.treeDataMap.get(newRowValue);\n    if (!this.validateDataDoubleExist(mapState, newRowValue)) return dataSource;\n    const rowIndex = type === 'after' ? state.rowIndex + 1 : state.rowIndex;\n    const newState = {\n      id: newRowValue,\n      row: newData,\n      rowIndex,\n      level: state.level,\n      expanded: false,\n      expandChildrenLength: 0,\n      disabled: false,\n      path: state.path.slice(0, -1),\n      parent: state.parent,\n    };\n    newState.path = newState.path.concat(newState);\n    const dataIndex = type === 'after' ? state.rowIndex + (state.expandChildrenLength + 1) : state.rowIndex;\n    dataSource.splice(dataIndex, 0, newData);\n    const distance = type === 'after' ? 1 : 0;\n    if (state.parent) {\n      const childrenIndex = state.parent.row[keys.childrenKey].findIndex(\n        (t: TableRowData) => rowValue === get(t, keys.rowKey),\n      );\n      state.parent.row[keys.childrenKey].splice(childrenIndex + distance, 0, newData);\n      updateRowExpandLength(this.treeDataMap, state.parent.row, 1, 'insert', keys);\n    }\n    this.treeDataMap.set(newRowValue, newState);\n\n    // 更新 rowIndex 之后的下标\n    updateRowIndex(this.treeDataMap, dataSource, {\n      rowKey: keys.rowKey,\n      minRowIndex: state.rowIndex + 1,\n      type: 'add',\n    });\n\n    return dataSource;\n  }\n\n  /**\n   * 交换数据行\n   * @returns 交换失败返回 false\n   */\n  swapData(\n    dataSource: T[],\n    params: SwapParams<T>,\n    keys: KeysType,\n  ): { dataSource: T[]; result: boolean; code?: number; reason?: string } {\n    const startIndex = params.currentIndex;\n    const endIndex = params.targetIndex;\n    if (startIndex === endIndex) return { dataSource, result: true };\n    const startRowValue = get(params.current, keys.rowKey);\n    const endRowValue = get(params.target, keys.rowKey);\n    const startState = this.treeDataMap.get(startRowValue);\n    const endState = this.treeDataMap.get(endRowValue);\n    if (startState.level !== endState.level) {\n      return {\n        dataSource,\n        result: false,\n        code: TABLE_TREE_ERROR_CODE_NOT_SAME_LEVEL.code,\n        reason: TABLE_TREE_ERROR_CODE_NOT_SAME_LEVEL.reason,\n      };\n    }\n    const startLastIndex = startIndex + startState.expandChildrenLength + 1;\n    const endLastIndex = endIndex + endState.expandChildrenLength + 1;\n    const startRowList = dataSource.slice(startIndex, startLastIndex);\n    const endRowList = dataSource.slice(endIndex, endLastIndex);\n    if (startIndex > endIndex) {\n      const middleRowList = dataSource.slice(endLastIndex, startIndex);\n      const allSwapList = startRowList.concat(endRowList, middleRowList);\n      dataSource.splice(endIndex, allSwapList.length);\n      dataSource.splice(endIndex, 0, ...allSwapList);\n      updateRowIndex(this.treeDataMap, dataSource, {\n        rowKey: keys.rowKey,\n        minRowIndex: endIndex,\n        maxRowIndex: startLastIndex,\n      });\n    } else {\n      const middleRowList = dataSource.slice(startLastIndex, endIndex);\n      const allSwapList = middleRowList.concat(endRowList, startRowList);\n      dataSource.splice(startIndex, allSwapList.length);\n      dataSource.splice(startIndex, 0, ...allSwapList);\n      updateRowIndex(this.treeDataMap, dataSource, {\n        rowKey: keys.rowKey,\n        minRowIndex: startIndex,\n        maxRowIndex: endLastIndex,\n      });\n    }\n\n    // 交换父元素中的两个元素位置\n    if (startState.parent) {\n      const children = startState.parent.row[keys.childrenKey];\n      let count = 0;\n      let targetIndex = -1;\n      let currentIndex = -1;\n      for (let i = 0, len = children.length; i < len; i++) {\n        if (get(children[i], keys.rowKey) === startRowValue) {\n          currentIndex = i;\n          count += 1;\n        }\n        if (get(children[i], keys.rowKey) === endRowValue) {\n          targetIndex = i;\n          count += 1;\n        }\n        if (count >= 2) break;\n      }\n      // 向后拖拽\n      if (currentIndex < targetIndex) {\n        children.splice(targetIndex + 1, 0, params.current);\n        children.splice(currentIndex, 1);\n      } else {\n        // 向前拖拽\n        children.splice(currentIndex, 1);\n        children.splice(targetIndex, 0, params.current);\n      }\n    }\n\n    return { dataSource, result: true };\n  }\n\n  /**\n   * 展开所有节点\n   */\n  expandAll(dataSource: T[], keys: KeysType) {\n    this.expandAllRowIndex = 0;\n    const newData: T[] = [];\n    const expandLoop = (\n      dataSource: T[],\n      keys: KeysType,\n      parent: TableRowState = null,\n    ) => {\n      for (let i = 0, len = dataSource.length; i < len; i++) {\n        const item = dataSource[i];\n        const rowValue = get(item, keys.rowKey);\n        const state = this.treeDataMap.get(rowValue);\n        const children = get(item, keys.childrenKey);\n        state.rowIndex = this.expandAllRowIndex;\n        // children = true is async load\n        if (children !== true && children?.length) {\n          state.expanded = true;\n        }\n        state.expandChildrenLength = children?.length || 0;\n        this.expandAllRowIndex += 1;\n        newData.push(item);\n        this.treeDataMap.set(rowValue, state);\n        if (children?.length) {\n          // 同步更新父元素的展开数量\n          let tmpParent = parent;\n          while (tmpParent?.row) {\n            tmpParent.expandChildrenLength += children.length;\n            this.treeDataMap.set(tmpParent.id, tmpParent);\n            tmpParent = tmpParent.parent;\n          }\n          // 继续子元素\n          expandLoop(children, keys, state);\n        }\n      }\n    };\n    expandLoop(dataSource, keys);\n    return newData;\n  }\n\n  /**\n   * 收起所有节点\n   */\n  foldAll(dataSource: T[], keys: KeysType) {\n    const newData: T[] = [];\n    let index = 0;\n    for (let i = 0, len = dataSource.length; i < len; i++) {\n      const item = dataSource[i];\n      const rowValue = get(item, keys.rowKey);\n      const state = this.treeDataMap.get(rowValue);\n      state.rowIndex = state.level === 0 ? index : -1;\n      state.expanded = false;\n      state.expandChildrenLength = 0;\n      if (state.level === 0) {\n        newData.push(item);\n        index += 1;\n      }\n      const children = get(item, keys.childrenKey);\n      if (children?.length) {\n        this.foldAll(children, keys);\n      }\n    }\n    return newData;\n  }\n\n  /** 获取整个树形结构 */\n  getTreeNode(dataSource: T[], keys: KeysType): T[] {\n    // let isStarted = false;\n    const treeData: T[] = [];\n    for (let i = 0, len = dataSource.length; i < len; i++) {\n      const item = dataSource[i];\n      const rowValue = get(item, keys.rowKey);\n      const state = this.treeDataMap.get(rowValue);\n      // 只需要压入第一层数据\n      if (state.level === 0) {\n        treeData.push(item);\n      }\n    }\n    return treeData;\n  }\n\n  /**\n   * 获取展开的树形节点\n   * @param dataSource 平铺的树形结构数据\n   * @param keys 行唯一标识和子节点的字段名\n   * @param type 'unique' 标识获取展开节点的行唯一标识值，'data' 表示获取展开节点的数据，'all' 表示获取行节点包含展开状态的全部数据\n   * @returns 展开的树形节点\n   */\n  getTreeExpandedRow(dataSource: T[], keys: KeysType, type: 'unique' | 'data' | 'all' = 'data') {\n    const arr: (T | any)[] = [];\n    dataSource.forEach((item) => {\n      const rowValue = get(item, keys.rowKey);\n      const rowState = this.treeDataMap.get(rowValue);\n      if (!rowState.expanded) return;\n      if (type === 'unique') {\n        arr.push(rowValue);\n      } else if (type === 'data') {\n        arr.push(item);\n      } else {\n        arr.push(rowState);\n      }\n    });\n    return arr;\n  }\n\n  /**\n   * 初始化树形结构 Map\n   * @param treeDataMap 树形结构 Map\n   * @param dataSource 数据源\n   * @param column 树形结构列\n   * @param keys 字段映射关系\n   * @param level 层级\n   * @param parent 父元素\n   * @returns void\n   */\n  initialTreeDataMap(\n    treeDataMap: TableTreeDataMap,\n    dataSource: T[],\n    column: PrimaryTableCol,\n    keys: KeysType,\n    level = 0,\n    parent: TableRowState = null,\n  ) {\n    for (let i = 0, len = dataSource.length; i < len; i++) {\n      const item = dataSource[i];\n      const rowValue = getUniqueRowValue(item, keys.rowKey);\n      if (isUndefined(rowValue)) {\n        log.error('EnhancedTable', '`rowKey` could be wrong, can not get rowValue from `data` by `rowKey`.');\n        return;\n      }\n      const children = get(item, keys.childrenKey);\n      const state: TableRowState = {\n        id: rowValue,\n        row: item,\n        rowIndex: level === 0 ? i : -1,\n        level,\n        expanded: false,\n        expandChildrenLength: 0,\n        disabled: isRowSelectedDisabled(column, item, i),\n        parent,\n      };\n      state.path = parent ? parent.path.concat(state) : [state];\n      treeDataMap.set(rowValue, state);\n      if (children?.length) {\n        this.initialTreeDataMap(treeDataMap, children, column, keys, level + 1, state);\n      }\n    }\n  }\n\n  // column.checkProps 和 column.disabled 会影响行的禁用状态，因此当列发生变化时，需要重置禁用状态\n  updateDisabledState(dataSource: T[], column: PrimaryTableCol, keys: KeysType) {\n    for (let i = 0, len = dataSource.length; i < len; i++) {\n      const item = dataSource[i];\n      const rowValue = get(item, keys.rowKey);\n      if (isUndefined(rowValue)) {\n        log.error('EnhancedTable', '`rowKey` could be wrong, can not get rowValue from `data` by `rowKey`.');\n        return;\n      }\n      const state = this.treeDataMap.get(rowValue);\n      state.disabled = isRowSelectedDisabled(column, item, i);\n      this.treeDataMap.set(rowValue, state);\n      const children = get(item, keys.childrenKey);\n      if (children?.length) {\n        this.updateDisabledState(children, column, keys);\n      }\n    }\n  }\n\n  /**\n   * 校验数据合法性\n   */\n  validateDataExist(state: TableRowState, rowValue: string | number) {\n    if (!state) {\n      log.warn('EnhancedTable', `${rowValue} does not exist.`);\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * 校验数据是否已存在\n   */\n  validateDataDoubleExist(state: TableRowState, rowValue: string | number) {\n    if (state) {\n      log.warn('EnhancedTable', `Duplicated Key. ${rowValue} already exists.`);\n      return false;\n    }\n    return true;\n  }\n}\n\nexport default TableTreeStore;\n\n/**\n * 更新展开的子节点数量\n * @param rowSate 行数据和状态\n * @param distance 需要调整的展开子节点长度数量，展开时增加，收起时减少。值为负数，表示减\n * @param expanded 展开/收起\n */\nexport function updateRowExpandLength(\n  treeDataMap: TableTreeDataMap,\n  row: TableRowData,\n  distance: number,\n  type: 'expand' | 'fold' | 'delete' | 'insert',\n  keys: KeysType,\n) {\n  let tmp = row;\n  while (tmp) {\n    const state = treeDataMap.get(get(tmp, keys.rowKey));\n    const expandLen = (state.expandChildrenLength || 0) + distance;\n    state.expandChildrenLength = Math.max(0, expandLen);\n    tmp = state?.parent?.row;\n  }\n  // 如果是收起状态，子节点需全部收起，清空子节点展开行数量，设置 expandChildrenLength 为 0\n  if (type === 'fold') {\n    clearRowExpandLength(treeDataMap, row, keys);\n  }\n}\n\nexport function clearRowExpandLength<T>(treeDataMap: TableTreeDataMap, row: T, keys: KeysType) {\n  const children = get(row, keys.childrenKey);\n  if (children?.length) {\n    children.forEach((item: T[]) => {\n      const state = treeDataMap.get(get(item, keys.rowKey));\n      if (!state) return;\n      state.expandChildrenLength = 0;\n      clearRowExpandLength(treeDataMap, state.row, keys);\n    });\n  }\n}\n\n/**\n * 更新子节点行状态，行数据、父节点、层级、路径等数据\n * @param rowState 行状态数据\n * @param expanded 展开或收起\n * @param keys\n */\nexport function updateChildrenRowState<T>(\n  treeDataMap: TableTreeDataMap,\n  rowState: TableRowState,\n  expanded: boolean,\n  keys: KeysType,\n) {\n  const { row, rowIndex } = rowState;\n  const childrenNodes = get(row, keys.childrenKey);\n  childrenNodes.forEach((item: T, kidRowIndex: number) => {\n    const rowValue = get(item, keys.rowKey);\n    const index = expanded ? rowIndex + 1 + kidRowIndex : -1;\n    const curState = treeDataMap.get(rowValue);\n    const newState: TableRowState = {\n      ...curState,\n      row: item,\n      rowIndex: index,\n      expanded: false,\n      parent: rowState,\n    };\n    treeDataMap.set(rowValue, newState);\n    // 父节点展开，子节点不一定展开；父节点收起，则所有子节点收起\n    if (!expanded) {\n      const children = get(item, keys.childrenKey);\n      if (children?.length) {\n        updateChildrenRowState(\n          treeDataMap,\n          {\n            ...newState,\n            rowIndex: -1,\n            expanded: false,\n          } as any,\n          expanded,\n          keys,\n        );\n      }\n    }\n  });\n}\n\nexport function updateRowData<T extends TableRowData = TableRowData>(\n  data: T[],\n  key: string | number,\n  newData: T,\n  keys: KeysType,\n) {\n  for (let i = 0, len = data.length; i < len; i++) {\n    const item = data[i];\n    if (get(item, keys.rowKey) === key) {\n      // eslint-disable-next-line no-param-reassign\n      data[i] = newData;\n      return;\n    }\n    const children: T[] = get(item, keys.childrenKey) || [];\n    if (children?.length) {\n      updateRowData(children, key, newData, keys);\n    }\n  }\n}\n\nexport function updateRowIndex<T>(\n  treeDataMap: TableTreeDataMap,\n  dataSource: T[],\n  extra: {\n    rowKey: string;\n    minRowIndex?: number;\n    maxRowIndex?: number;\n    type?: 'add' | 'remove';\n    count?: number;\n  },\n) {\n  const start = extra.minRowIndex || 0;\n  const end = extra.maxRowIndex || dataSource.length;\n  for (let rowIndex = start; rowIndex < end; rowIndex++) {\n    const item = dataSource[rowIndex];\n    const state = treeDataMap.get(get(item, extra.rowKey));\n    if (!state) {\n      log.warn('Table', 'tree map went wrong');\n    }\n    state.rowIndex = rowIndex + (extra?.count || 1) - 1;\n  }\n}\n\nexport function diffExpandedTreeNode(\n  newExpandedNode: (number | string)[] = [],\n  oldExpandedNode: (number | string)[] = [],\n) {\n  const removedList: (number | string)[] = [];\n  const addedList: (number | string)[] = [];\n  const newExpandedNodeMap: Map<any, boolean> = new Map();\n  const oldExpandedNodeMap: Map<any, boolean> = new Map();\n  for (let i = 0, len = newExpandedNode.length; i < len; i++) {\n    newExpandedNodeMap.set(newExpandedNode[i], true);\n  }\n  for (let i = 0, len = oldExpandedNode.length; i < len; i++) {\n    oldExpandedNodeMap.set(oldExpandedNode[i], true);\n  }\n  for (let i = 0, len = newExpandedNode.length; i < len; i++) {\n    if (!oldExpandedNodeMap.get(newExpandedNode[i])) {\n      addedList.push(newExpandedNode[i]);\n    }\n  }\n  for (let i = 0, len = oldExpandedNode.length; i < len; i++) {\n    if (!newExpandedNodeMap.get(oldExpandedNode[i])) {\n      removedList.push(oldExpandedNode[i]);\n    }\n  }\n  return {\n    removedList,\n    addedList,\n  };\n}\n\nexport type TreeDataMapType = InstanceType<typeof TableTreeStore>['treeDataMap'];\n"],"names":["set","object","path","value","baseSet","TABLE_TREE_ERROR_CODE_NOT_SAME_LEVEL","code","reason","getUniqueRowValue","row","colKey","rowIndex","arguments","length","undefined","level","rowValue","get","concat","TableTreeStore","_classCallCheck","_defineProperty","Map","treeDataMap","_createClass","key","initialTreeStore","dataSource","columns","keys","_this$treeDataMap","clear","initialTreeDataMap","find","col","getAllUniqueKeys","data","arr","i","len","item","push","rowKey","children","childrenKey","getExpandedChildrenKeys","rowState","expanded","expandTreeNode","rowList","_this","forEach","toggleExpandData","foldTreeNode","_this2","p","type","_r$rowIndex","log","error","isUndefined","childrenNodes","r","updateExpandRow","changeRow","updateChildrenRowState","updateRowExpandLength","splice","apply","expandChildrenLength","updateRowIndex","minRowIndex","getData","updateData","newRowData","newRowValue","updateRowData","oldChildren","state","currentRowIndex","id","parent","siblings","index","findIndex","remove","removeNumber","warn","removeChildren","appendTo","newData","validateDataExist","isShowNewNode","tmpData","Array","newChildrenData","firstNewChildrenIndex","oneData","mapState","validateDataDoubleExist","newState","disabled","_toConsumableArray","newChildrenCount","count","appendToRoot","newDataSource","tmpNewData","dataSourceLen","insertAfter","insert","insertBefore","slice","dataIndex","distance","childrenIndex","t","swapData","params","startIndex","currentIndex","endIndex","targetIndex","result","startRowValue","current","endRowValue","target","startState","endState","startLastIndex","endLastIndex","startRowList","endRowList","middleRowList","allSwapList","maxRowIndex","expandAll","_this3","expandAllRowIndex","expandLoop","tmpParent","_tmpParent","foldAll","getTreeNode","treeData","getTreeExpandedRow","_this4","column","isRowSelectedDisabled","updateDisabledState","tmp","_state$parent","expandLen","Math","max","clearRowExpandLength","kidRowIndex","curState","_objectSpread","extra","start","end","diffExpandedTreeNode","newExpandedNode","oldExpandedNode","removedList","addedList","newExpandedNodeMap","oldExpandedNodeMap"],"mappings":"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"}