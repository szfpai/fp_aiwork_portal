/**
 * tdesign-vue-chat v0.3.0
 * (c) 2025 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vue = require('vue');
var _getTag = require('../_chunks/dep-9d5d5e32.js');
var isArrayLike$1 = require('../_chunks/dep-450670e7.js');
var isArray$1 = require('../_chunks/dep-9d60843d.js');
var isString = require('../_chunks/dep-6c8863dc.js');
var isFunction = require('../_chunks/dep-564eb3a6.js');
var camelCase = require('../_chunks/dep-adad3ae9.js');
var kebabCase = require('../_chunks/dep-4e7b00f6.js');
require('../_chunks/dep-29409216.js');
require('@babel/runtime/helpers/typeof');
require('../_chunks/dep-07868b50.js');
require('../_chunks/dep-6fa0a6ce.js');
require('../_chunks/dep-8e4e04d4.js');

var baseKeys = _getTag._baseKeys,
  getTag = _getTag._getTag,
  isArguments = isArrayLike$1.isArguments_1,
  isArray = isArray$1.isArray_1,
  isArrayLike = isArrayLike$1.isArrayLike_1,
  isBuffer = isArrayLike$1.isBuffer.exports,
  isPrototype = isArrayLike$1._isPrototype,
  isTypedArray = isArrayLike$1.isTypedArray_1;

/** `Object#toString` result references. */
var mapTag = '[object Map]',
  setTag = '[object Set]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if `value` is an empty object, collection, map, or set.
 *
 * Objects are considered empty if they have no own enumerable string keyed
 * properties.
 *
 * Array-like values such as `arguments` objects, arrays, buffers, strings, or
 * jQuery-like collections are considered empty if they have a `length` of `0`.
 * Similarly, maps and sets are considered empty if they have a `size` of `0`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is empty, else `false`.
 * @example
 *
 * _.isEmpty(null);
 * // => true
 *
 * _.isEmpty(true);
 * // => true
 *
 * _.isEmpty(1);
 * // => true
 *
 * _.isEmpty([1, 2, 3]);
 * // => false
 *
 * _.isEmpty({ 'a': 1 });
 * // => false
 */
function isEmpty(value) {
  if (value == null) {
    return true;
  }
  if (isArrayLike(value) && (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
    return !value.length;
  }
  var tag = getTag(value);
  if (tag == mapTag || tag == setTag) {
    return !value.size;
  }
  if (isPrototype(value)) {
    return !baseKeys(value).length;
  }
  for (var key in value) {
    if (hasOwnProperty.call(value, key)) {
      return false;
    }
  }
  return true;
}
var isEmpty_1 = isEmpty;

function getDefaultNode(options) {
  var defaultNode;
  if (isFunction.isObject_1(options) && "defaultNode" in options) {
    defaultNode = options.defaultNode;
  } else if (vue.isVNode(options) || isString.isString_1(options)) {
    defaultNode = options;
  }
  return defaultNode;
}
function getParams(options) {
  return isFunction.isObject_1(options) && "params" in options ? options.params : {};
}
function getSlotFirst(options) {
  return isFunction.isObject_1(options) && "slotFirst" in options ? options.slotFirst : {};
}
function handleSlots(instance, params, name) {
  var _instance$$slots$came, _instance$$slots, _instance$$slots$keba, _instance$$slots2;
  var node = (_instance$$slots$came = (_instance$$slots = instance.$slots)[camelCase.camelCase_1(name)]) === null || _instance$$slots$came === void 0 ? void 0 : _instance$$slots$came.call(_instance$$slots, params);
  if (node) return node;
  node = (_instance$$slots$keba = (_instance$$slots2 = instance.$slots)[kebabCase.kebabCase_1(name)]) === null || _instance$$slots$keba === void 0 ? void 0 : _instance$$slots$keba.call(_instance$$slots2, params);
  if (node) return node;
  return null;
}
var renderTNodeJSX = function renderTNodeJSX(instance, name, options) {
  var params = getParams(options);
  var defaultNode = getDefaultNode(options);
  var propsNode;
  if (name in instance) {
    propsNode = instance[name];
  }
  if (propsNode === false) return;
  if (propsNode === true && defaultNode) {
    return handleSlots(instance, params, name) || defaultNode;
  }
  if (isFunction.isFunction_1(propsNode)) return propsNode(vue.h, params);
  var isPropsEmpty = [void 0, params, ""].includes(propsNode);
  if (isPropsEmpty && (instance.$slots[camelCase.camelCase_1(name)] || instance.$slots[kebabCase.kebabCase_1(name)])) {
    return handleSlots(instance, params, name);
  }
  return propsNode;
};
var renderTNodeJSXDefault = function renderTNodeJSXDefault(vm, name, options) {
  var defaultNode = getDefaultNode(options);
  return renderTNodeJSX(vm, name, options) || defaultNode;
};
var renderContent = function renderContent(vm, name1, name2, options) {
  var params = getParams(options);
  var defaultNode = getDefaultNode(options);
  var toParams = params ? {
    params: params
  } : void 0;
  var node1 = renderTNodeJSX(vm, name1, toParams);
  var node2 = renderTNodeJSX(vm, name2, toParams);
  var res = isEmpty_1(node1) ? node2 : node1;
  return isEmpty_1(res) ? defaultNode : res;
};

exports.getDefaultNode = getDefaultNode;
exports.getParams = getParams;
exports.getSlotFirst = getSlotFirst;
exports.handleSlots = handleSlots;
exports.renderContent = renderContent;
exports.renderTNodeJSX = renderTNodeJSX;
exports.renderTNodeJSXDefault = renderTNodeJSXDefault;
//# sourceMappingURL=render-tnode.js.map
