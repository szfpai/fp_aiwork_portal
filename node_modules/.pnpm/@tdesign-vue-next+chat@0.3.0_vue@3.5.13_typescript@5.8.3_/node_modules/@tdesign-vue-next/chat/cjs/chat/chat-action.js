/**
 * tdesign-vue-chat v0.3.0
 * (c) 2025 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vue = require('vue');
var tdesignVueNext = require('tdesign-vue-next');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var chat_props = require('./props.js');
var hooks_useConfig = require('../hooks/useConfig.js');
var hooks_tnode = require('../hooks/tnode.js');
var Clipboard = require('clipboard');
var chat_util = require('./util.js');
var configProvider_useConfig = require('../config-provider/useConfig.js');
require('../_chunks/dep-564eb3a6.js');
require('../_chunks/dep-29409216.js');
require('@babel/runtime/helpers/typeof');
require('../_chunks/dep-07868b50.js');
require('../_chunks/dep-adad3ae9.js');
require('../_chunks/dep-8e4e04d4.js');
require('../_chunks/dep-9d60843d.js');
require('../_chunks/dep-6fa0a6ce.js');
require('../_chunks/dep-4e7b00f6.js');
require('../utils/render-tnode.js');
require('../_chunks/dep-9d5d5e32.js');
require('../_chunks/dep-450670e7.js');
require('../_chunks/dep-6c8863dc.js');
require('@babel/runtime/helpers/classCallCheck');
require('@babel/runtime/helpers/createClass');
require('@babel/runtime/helpers/defineProperty');
require('../_chunks/dep-e67737c2.js');
require('../_common/js/global-config/default-config.js');
require('../_common/js/global-config/locale/zh_CN.js');
require('../_chunks/dep-e0cf1420.js');
require('../_chunks/dep-6f62d484.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var Clipboard__default = /*#__PURE__*/_interopDefaultLegacy(Clipboard);

var _ChatAction = vue.defineComponent({
  name: "TChatAction",
  props: {
    isGood: chat_props["default"].isGood,
    isBad: chat_props["default"].isBad,
    content: chat_props["default"].content,
    disabled: chat_props["default"].disabled,
    operationBtn: chat_props["default"].operationBtn,
    onOperation: chat_props["default"].onOperation
  },
  emits: ["operation"],
  setup: function setup(props2, _ref) {
    var emit = _ref.emit;
    var COMPONENT_NAME = hooks_useConfig.usePrefixClass("chat");
    var renderTNodeJSX = hooks_tnode.useTNodeJSX();
    var messagePluginInstance = chat_util.MessagePluginSingleton.getInstance();
    var _useConfig = configProvider_useConfig.useConfig("chat"),
      globalConfig = _useConfig.globalConfig;
    var _globalConfig$value = globalConfig.value,
      copyTipText = _globalConfig$value.copyTipText,
      likeTipText = _globalConfig$value.likeTipText,
      dislikeTipText = _globalConfig$value.dislikeTipText,
      refreshTipText = _globalConfig$value.refreshTipText,
      copyTextSuccess = _globalConfig$value.copyTextSuccess,
      copyTextFail = _globalConfig$value.copyTextFail;
    return function () {
      var content = renderTNodeJSX("content");
      var disabled = props2.disabled;
      var copyAnswer = function copyAnswer() {
        var copyBtn = new Clipboard__default["default"](".copy-btn");
        copyBtn.on("success", function () {
          messagePluginInstance.showSuccess(copyTextSuccess);
        });
        copyBtn.on("error", function () {
          messagePluginInstance.showError(copyTextFail);
        });
      };
      var handleClick = function handleClick(e, type) {
        if (type === "copy") {
          copyAnswer();
        }
        emit("operation", type, {
          e: e
        });
      };
      var replayButton = props2.operationBtn.includes("replay") ? vue.createVNode(tdesignVueNext.Space, null, {
        "default": function _default() {
          return [vue.createVNode("div", {
            "class": "".concat(COMPONENT_NAME.value, "__refresh")
          }, [vue.createVNode(tdesignVueNext.Tooltip, {
            "content": refreshTipText
          }, {
            "default": function _default() {
              return [vue.createVNode(tdesignVueNext.Button, {
                "theme": "default",
                "size": "small",
                "disabled": disabled,
                "onClick": function onClick(e) {
                  return handleClick(e, "replay");
                }
              }, {
                "default": function _default() {
                  return [vue.createVNode(tdesignIconsVueNext.RefreshIcon, null, null)];
                }
              })];
            }
          }), vue.createVNode("span", {
            "class": "".concat(COMPONENT_NAME.value, "__refresh-line")
          }, null)])];
        }
      }) : null;
      var copyButton = props2.operationBtn.includes("copy") ? vue.createVNode(tdesignVueNext.Space, null, {
        "default": function _default() {
          return [vue.createVNode(tdesignVueNext.Tooltip, {
            "content": copyTipText
          }, {
            "default": function _default() {
              return [vue.createVNode(tdesignVueNext.Button, {
                "theme": "default",
                "size": "small",
                "class": "copy-btn",
                "disabled": disabled,
                "onClick": function onClick(e) {
                  return handleClick(e, "copy");
                },
                "data-clipboard-text": content
              }, {
                "default": function _default() {
                  return [vue.createVNode(tdesignIconsVueNext.CopyIcon, null, null)];
                }
              })];
            }
          })];
        }
      }) : null;
      var goodButton = props2.operationBtn.includes("good") ? vue.createVNode(tdesignVueNext.Space, null, {
        "default": function _default() {
          return [vue.createVNode(tdesignVueNext.Tooltip, {
            "content": likeTipText
          }, {
            "default": function _default() {
              return [vue.createVNode(tdesignVueNext.Button, {
                "theme": "default",
                "size": "small",
                "class": props2.isGood && "".concat(COMPONENT_NAME.value, "-button--active"),
                "disabled": disabled,
                "onClick": function onClick(e) {
                  return handleClick(e, "good");
                }
              }, {
                "default": function _default() {
                  return [props2.isGood ? vue.createVNode(tdesignIconsVueNext.ThumbUpFilledIcon, null, null) : vue.createVNode(tdesignIconsVueNext.ThumbUpIcon, null, null)];
                }
              })];
            }
          })];
        }
      }) : null;
      var badButton = props2.operationBtn.includes("bad") ? vue.createVNode(tdesignVueNext.Space, null, {
        "default": function _default() {
          return [vue.createVNode(tdesignVueNext.Tooltip, {
            "content": dislikeTipText
          }, {
            "default": function _default() {
              return [vue.createVNode(tdesignVueNext.Button, {
                "theme": "default",
                "size": "small",
                "class": props2.isBad && "".concat(COMPONENT_NAME.value, "-button--active"),
                "disabled": disabled,
                "onClick": function onClick(e) {
                  return handleClick(e, "bad");
                }
              }, {
                "default": function _default() {
                  return [props2.isBad ? vue.createVNode(tdesignIconsVueNext.ThumbDownFilledIcon, null, null) : vue.createVNode(tdesignIconsVueNext.ThumbDownIcon, null, null)];
                }
              })];
            }
          })];
        }
      }) : null;
      var buttonComponents = {
        replay: replayButton,
        copy: copyButton,
        good: goodButton,
        bad: badButton
      };
      return vue.createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__actions")
      }, [props2.operationBtn.map(function (btnKey) {
        return buttonComponents[btnKey];
      })]);
    };
  }
});

exports["default"] = _ChatAction;
//# sourceMappingURL=chat-action.js.map
