/**
 * tdesign-vue-chat v0.3.0
 * (c) 2025 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var hooks_useConfig = require('../hooks/useConfig.js');
var chat_chatItemProps = require('./chat-item-props.js');
var tdesignVueNext = require('tdesign-vue-next');
var hooks_tnode = require('../hooks/tnode.js');
var chat_chatContent = require('./chat-content.js');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var chat_chatLoading = require('./chat-loading.js');
var chat_chatReasoning = require('./chat-reasoning.js');
var configProvider_useConfig = require('../config-provider/useConfig.js');
var isString = require('../_chunks/dep-06b3a112.js');
var isObject = require('../_chunks/dep-4d9346bc.js');
require('../_chunks/dep-564eb3a6.js');
require('../_chunks/dep-29409216.js');
require('@babel/runtime/helpers/typeof');
require('../_chunks/dep-07868b50.js');
require('../_chunks/dep-adad3ae9.js');
require('../_chunks/dep-8e4e04d4.js');
require('../_chunks/dep-9d60843d.js');
require('../_chunks/dep-6fa0a6ce.js');
require('../_chunks/dep-4e7b00f6.js');
require('../utils/render-tnode.js');
require('../_chunks/dep-9d5d5e32.js');
require('../_chunks/dep-450670e7.js');
require('../_chunks/dep-6c8863dc.js');
require('clipboard');
require('highlight.js');
require('marked');
require('marked-highlight');
require('./props.js');
require('@babel/runtime/helpers/slicedToArray');
require('./chat-reasoning-props.js');
require('../hooks/useVModel.js');
require('../_chunks/dep-e67737c2.js');
require('../_common/js/global-config/default-config.js');
require('../_common/js/global-config/locale/zh_CN.js');
require('../_chunks/dep-e0cf1420.js');
require('../_chunks/dep-6f62d484.js');
require('../_chunks/dep-ad95cbf6.js');
require('../_chunks/dep-2e1b35d3.js');
require('../_chunks/dep-ae3c7717.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty__default["default"](e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var ChatItem = vue.defineComponent({
  name: "TChatItem",
  props: _objectSpread(_objectSpread({}, chat_chatItemProps["default"]), {}, {
    reasoningLoading: {
      type: Boolean,
      "default": false
    }
  }),
  emits: ["operation"],
  setup: function setup(props2) {
    var COMPONENT_NAME = hooks_useConfig.usePrefixClass("chat");
    var _useConfig = configProvider_useConfig.useConfig("chat"),
      globalConfig = _useConfig.globalConfig;
    var _globalConfig$value = globalConfig.value,
      loadingText = _globalConfig$value.loadingText,
      loadingEndText = _globalConfig$value.loadingEndText;
    var renderTNodeJSX = hooks_tnode.useTNodeJSX();
    var role = vue.computed(function () {
      return renderTNodeJSX("role");
    });
    var variant = vue.computed(function () {
      return renderTNodeJSX("variant");
    });
    vue.provide("role", role);
    return function () {
      var roleValue = renderTNodeJSX("role");
      var name = renderTNodeJSX("name", {
        slotFirst: true
      }) || props2.name;
      var datetime = renderTNodeJSX("datetime", {
        slotFirst: true
      }) || props2.datetime;
      var avatar = renderTNodeJSX("avatar", {
        slotFirst: true
      }) || props2.avatar;
      var showNameDatetime = vue.computed(function () {
        return name || datetime;
      });
      var content = renderTNodeJSX("content", {
        slotFirst: true
      }) || props2.content;
      var contentClasses = vue.computed(function () {
        return showNameDatetime.value ? ["".concat(COMPONENT_NAME.value, "__content")] : ["".concat(COMPONENT_NAME.value, "__content"), "".concat(COMPONENT_NAME.value, "__content--base")];
      });
      var avatarDom = avatar ? vue.createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__avatar")
      }, [vue.createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__avatar__box")
      }, [isString.isString(avatar) ? vue.createVNode("img", {
        "src": avatar,
        "alt": "",
        "class": "".concat(COMPONENT_NAME.value, "__avatar-image")
      }, null) : avatar])]) : null;
      var nameDatetimeDom = showNameDatetime.value && vue.createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__base")
      }, [name && vue.createVNode("span", {
        "class": "".concat(COMPONENT_NAME.value, "__name")
      }, [name]), datetime && vue.createVNode("span", {
        "class": "".concat(COMPONENT_NAME.value, "__time")
      }, [datetime])]);
      var textLoading = props2.textLoading;
      var reasoningLoading = props2.reasoningLoading;
      var showActions = vue.computed(function () {
        return renderTNodeJSX("actions");
      });
      var renderHeader = function renderHeader() {
        if (reasoningLoading) {
          return vue.createVNode(chat_chatLoading["default"], {
            "text": loadingText
          }, null);
        }
        return vue.createVNode("div", {
          "style": "display:flex;align-items:center"
        }, [vue.createVNode(tdesignIconsVueNext.CheckCircleIcon, {
          "style": {
            color: "var(--td-success-color-5)",
            fontSize: "20px",
            marginRight: "8px"
          }
        }, null), vue.createVNode("span", null, [loadingEndText])]);
      };
      var contentDom = vue.createVNode(vue.Fragment, null, [role.value !== "model-change" && avatarDom, vue.createVNode("div", {
        "class": contentClasses.value
      }, [role.value !== "model-change" && nameDatetimeDom, textLoading && (props2.animation === "skeleton" ? vue.createVNode(tdesignVueNext.Skeleton, {
        "loading": textLoading,
        "animation": "gradient"
      }, null) : vue.createVNode(chat_chatLoading["default"], {
        "loading": textLoading,
        "animation": props2.animation
      }, null)), !textLoading && vue.createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__detail")
      }, [isObject.isObject(props2.reasoning) && role.value === "assistant" && vue.createVNode(chat_chatReasoning["default"], {
        "role": role.value,
        "expandIconPlacement": props2.reasoning.expandIconPlacement,
        "onExpandChange": props2.reasoning.onExpandChange,
        "collapse-panel-props": _objectSpread({}, props2.reasoning.collapsePanelProps)
      }, null), isString.isString(props2.reasoning) && role.value === "assistant" && vue.createVNode(chat_chatReasoning["default"], {
        "role": role.value,
        "expandIconPlacement": "right",
        "collapse-panel-props": {
          header: renderHeader(),
          content: vue.createVNode(chat_chatContent["default"], {
            "isNormalText": false,
            "content": props2.reasoning,
            "role": role.value
          }, null)
        }
      }, null), isString.isString(content) ? vue.createVNode(chat_chatContent["default"], {
        "isNormalText": false,
        "content": content,
        "role": role.value
      }, null) : content]), role.value === "assistant" && showActions.value && vue.createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__actions-margin")
      }, [renderTNodeJSX("actions")])])]);
      return vue.createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__inner ").concat(roleValue, " ").concat(COMPONENT_NAME.value, "__text--variant--").concat(variant.value)
      }, [contentDom]);
    };
  }
});

exports["default"] = ChatItem;
//# sourceMappingURL=chat-item.js.map
