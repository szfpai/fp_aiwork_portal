import type { UploadActionType } from './type';
declare const _default: import("vue").DefineComponent<{
    disabled: BooleanConstructor;
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    prefix: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    stopDisabled: BooleanConstructor;
    suffix: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    textareaProps: {
        type: import("vue").PropType<import("tdesign-vue-next").TdTextareaProps>;
    };
    value: {
        type: import("vue").PropType<string>;
        default: string;
    };
    modelValue: {
        type: import("vue").PropType<string>;
        default: string;
    };
    defaultValue: {
        type: import("vue").PropType<string>;
    };
    onBlur: import("vue").PropType<(value: string, context: {
        e: FocusEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: string, context: {
        e: MouseEvent | InputEvent | KeyboardEvent;
    }) => void>;
    onFocus: import("vue").PropType<(value: string, context: {
        e: FocusEvent;
    }) => void>;
    onSend: import("vue").PropType<(value: string, context: {
        e: MouseEvent | KeyboardEvent;
    }) => void>;
    onStop: import("vue").PropType<(value: string, context: {
        e: MouseEvent;
    }) => void>;
    onFileSelect: import("vue").PropType<(params: {
        files: File[];
        name: UploadActionType;
    }) => void>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("stop" | "blur" | "focus" | "send" | "update:modelValue" | "fileSelect")[], "stop" | "blur" | "focus" | "send" | "update:modelValue" | "fileSelect", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    disabled: BooleanConstructor;
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    prefix: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    stopDisabled: BooleanConstructor;
    suffix: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    textareaProps: {
        type: import("vue").PropType<import("tdesign-vue-next").TdTextareaProps>;
    };
    value: {
        type: import("vue").PropType<string>;
        default: string;
    };
    modelValue: {
        type: import("vue").PropType<string>;
        default: string;
    };
    defaultValue: {
        type: import("vue").PropType<string>;
    };
    onBlur: import("vue").PropType<(value: string, context: {
        e: FocusEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: string, context: {
        e: MouseEvent | InputEvent | KeyboardEvent;
    }) => void>;
    onFocus: import("vue").PropType<(value: string, context: {
        e: FocusEvent;
    }) => void>;
    onSend: import("vue").PropType<(value: string, context: {
        e: MouseEvent | KeyboardEvent;
    }) => void>;
    onStop: import("vue").PropType<(value: string, context: {
        e: MouseEvent;
    }) => void>;
    onFileSelect: import("vue").PropType<(params: {
        files: File[];
        name: UploadActionType;
    }) => void>;
}>> & {
    onStop?: (...args: any[]) => any;
    onFocus?: (...args: any[]) => any;
    onBlur?: (...args: any[]) => any;
    onSend?: (...args: any[]) => any;
    "onUpdate:modelValue"?: (...args: any[]) => any;
    onFileSelect?: (...args: any[]) => any;
}, {
    value: string;
    disabled: boolean;
    placeholder: string;
    modelValue: string;
    stopDisabled: boolean;
}, {}>;
export default _default;
