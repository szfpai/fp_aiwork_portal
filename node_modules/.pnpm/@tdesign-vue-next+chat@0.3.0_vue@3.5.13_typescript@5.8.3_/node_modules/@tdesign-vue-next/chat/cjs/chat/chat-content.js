/**
 * tdesign-vue-chat v0.3.0
 * (c) 2025 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vue = require('vue');
var Clipboard = require('clipboard');
var hljs = require('highlight.js');
var marked = require('marked');
var markedHighlight = require('marked-highlight');
var chat_props = require('./props.js');
var hooks_useConfig = require('../hooks/useConfig.js');
var configProvider_useConfig = require('../config-provider/useConfig.js');
require('../_chunks/dep-564eb3a6.js');
require('../_chunks/dep-29409216.js');
require('@babel/runtime/helpers/typeof');
require('../_chunks/dep-07868b50.js');
require('../_chunks/dep-e67737c2.js');
require('../_chunks/dep-450670e7.js');
require('../_chunks/dep-6fa0a6ce.js');
require('../_chunks/dep-9d60843d.js');
require('../_common/js/global-config/default-config.js');
require('../_common/js/global-config/locale/zh_CN.js');
require('../_chunks/dep-e0cf1420.js');
require('../_chunks/dep-6f62d484.js');
require('../_chunks/dep-9d5d5e32.js');
require('../_chunks/dep-6c8863dc.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var Clipboard__default = /*#__PURE__*/_interopDefaultLegacy(Clipboard);
var hljs__default = /*#__PURE__*/_interopDefaultLegacy(hljs);

var escapeTest = /[&<>"']/;
var escapeReplace = new RegExp(escapeTest.source, "g");
var escapeTestNoEncode = /[<>"']|&(?!(#\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\w+);)/;
var escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, "g");
var escapeReplacements = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#39;"
};
var getEscapeReplacement = function getEscapeReplacement(ch) {
  return escapeReplacements[ch];
};
function escape(html) {
  var encode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  if (encode) {
    if (escapeTest.test(html)) {
      return html.replace(escapeReplace, getEscapeReplacement);
    }
  } else if (escapeTestNoEncode.test(html)) {
    return html.replace(escapeReplaceNoEncode, getEscapeReplacement);
  }
  return html;
}
var _ChatContent = vue.defineComponent({
  name: "TChatContent",
  components: {},
  props: chat_props["default"],
  setup: function setup(props2) {
    var COMPONENT_NAME = hooks_useConfig.usePrefixClass("chat");
    var _useConfig = configProvider_useConfig.useConfig("chat"),
      globalConfig = _useConfig.globalConfig;
    var _globalConfig$value = globalConfig.value,
      copyCodeBtnText = _globalConfig$value.copyCodeBtnText,
      copyCodeSuccessText = _globalConfig$value.copyCodeSuccessText;
    var injectedRole = vue.inject("role");
    var role = vue.computed(function () {
      return props2.role || (injectedRole === null || injectedRole === void 0 ? void 0 : injectedRole.value) || "";
    });
    vue.onMounted(function () {
      var clipboard = new Clipboard__default["default"](".".concat(COMPONENT_NAME.value, "__copy-btn"), {
        target: function target(trigger) {
          return trigger.parentNode.nextElementSibling;
        }
      });
      clipboard.on("success", function (e) {
        e.trigger.textContent = copyCodeSuccessText;
        setTimeout(function () {
          e.trigger.textContent = copyCodeBtnText;
        }, 2e3);
        e.clearSelection();
      });
    });
    var marked$1 = new marked.Marked(markedHighlight.markedHighlight({
      highlight: function highlight(code) {
        return hljs__default["default"].highlightAuto(code).value;
      }
    }), {
      renderer: {
        code: function code(_code, lang, escaped) {
          return "<pre class=\"hljs\"><div class=\"t-chat__code-header\">\n        <span class=\"t-chat__language-txt\">".concat(escape(lang) || "", "</span>\n        <div class=\"t-chat__copy-btn\" data-clipboard-action=\"copy\">").concat(copyCodeBtnText, "</div>\n        </div><code class=\"hljs language-").concat(escape(lang), "\" >").concat(escaped ? _code : escape(_code), "</code></pre>");
        }
      }
    });
    var getHtmlByMarked = function getHtmlByMarked(markdown) {
      if (!markdown) {
        return '<div class="waiting"></div>';
      }
      return marked$1.parse(markdown);
    };
    var textInfo = vue.computed(function () {
      if (role.value === "model-change") {
        return props2.content || "";
      }
      if (role.value === "user" && typeof props2.content === "string") {
        return escape(props2.content);
      }
      return getHtmlByMarked(props2.content);
    });
    return function () {
      return vue.createVNode("div", {
        "class": ["".concat(COMPONENT_NAME.value, "__text")]
      }, [role.value === "user" ? vue.createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__text--").concat(role.value)
      }, [vue.createVNode("pre", {
        "innerHTML": textInfo.value
      }, null)]) : vue.createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__text__assistant")
      }, [vue.createVNode("div", {
        "class": ["".concat(COMPONENT_NAME.value, "__text__content"), "".concat(COMPONENT_NAME.value, "__text--").concat(role.value)],
        "innerHTML": textInfo.value
      }, null)])]);
    };
  }
});

exports["default"] = _ChatContent;
//# sourceMappingURL=chat-content.js.map
