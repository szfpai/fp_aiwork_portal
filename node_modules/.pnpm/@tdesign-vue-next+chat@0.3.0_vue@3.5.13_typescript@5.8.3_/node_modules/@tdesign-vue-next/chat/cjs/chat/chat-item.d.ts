declare const _default: import("vue").DefineComponent<{
    reasoningLoading: {
        type: BooleanConstructor;
        default: boolean;
    };
    actions: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    animation: {
        type: import("vue").PropType<"gradient" | "skeleton" | "moving">;
        default: "gradient" | "skeleton" | "moving";
        validator(val: "gradient" | "skeleton" | "moving"): boolean;
    };
    avatar: {
        type: import("vue").PropType<String | ((h: typeof import("vue").h) => import("..").SlotReturnValue) | import("tdesign-vue-next").TdAvatarProps>;
    };
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    datetime: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    name: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    reasoning: {
        type: import("vue").PropType<boolean | import("./type").TdChatReasoning>;
        default: boolean | import("./type").TdChatReasoning;
    };
    role: {
        type: import("vue").PropType<"error" | "user" | "assistant" | "model-change" | "system">;
        validator(val: "error" | "user" | "assistant" | "model-change" | "system"): boolean;
    };
    textLoading: BooleanConstructor;
    variant: {
        type: import("vue").PropType<"outline" | "base" | "text">;
        default: "outline" | "base" | "text";
        validator(val: "outline" | "base" | "text"): boolean;
    };
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "operation"[], "operation", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    reasoningLoading: {
        type: BooleanConstructor;
        default: boolean;
    };
    actions: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    animation: {
        type: import("vue").PropType<"gradient" | "skeleton" | "moving">;
        default: "gradient" | "skeleton" | "moving";
        validator(val: "gradient" | "skeleton" | "moving"): boolean;
    };
    avatar: {
        type: import("vue").PropType<String | ((h: typeof import("vue").h) => import("..").SlotReturnValue) | import("tdesign-vue-next").TdAvatarProps>;
    };
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    datetime: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    name: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    reasoning: {
        type: import("vue").PropType<boolean | import("./type").TdChatReasoning>;
        default: boolean | import("./type").TdChatReasoning;
    };
    role: {
        type: import("vue").PropType<"error" | "user" | "assistant" | "model-change" | "system">;
        validator(val: "error" | "user" | "assistant" | "model-change" | "system"): boolean;
    };
    textLoading: BooleanConstructor;
    variant: {
        type: import("vue").PropType<"outline" | "base" | "text">;
        default: "outline" | "base" | "text";
        validator(val: "outline" | "base" | "text"): boolean;
    };
}>> & {
    onOperation?: (...args: any[]) => any;
}, {
    animation: "gradient" | "skeleton" | "moving";
    variant: "outline" | "base" | "text";
    textLoading: boolean;
    reasoning: boolean | import("./type").TdChatReasoning;
    reasoningLoading: boolean;
}, {}>;
export default _default;
