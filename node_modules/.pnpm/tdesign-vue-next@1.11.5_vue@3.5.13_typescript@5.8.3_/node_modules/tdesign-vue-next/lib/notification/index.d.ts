import { TdNotificationProps } from './type';
import './style';
export * from './type';
export * from './plugin';
export type NotificationProps = TdNotificationProps;
export declare const Notification: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        placement: StringConstructor;
        closeBtn: {
            type: import("vue").PropType<TdNotificationProps["closeBtn"]>;
            default: any;
        };
        content: {
            type: import("vue").PropType<TdNotificationProps["content"]>;
        };
        default: {
            type: import("vue").PropType<TdNotificationProps["default"]>;
        };
        duration: {
            type: NumberConstructor;
            default: number;
        };
        footer: {
            type: import("vue").PropType<TdNotificationProps["footer"]>;
        };
        icon: {
            type: import("vue").PropType<TdNotificationProps["icon"]>;
            default: boolean;
        };
        theme: {
            type: import("vue").PropType<TdNotificationProps["theme"]>;
            default: TdNotificationProps["theme"];
            validator(val: TdNotificationProps["theme"]): boolean;
        };
        title: {
            type: import("vue").PropType<TdNotificationProps["title"]>;
        };
        onCloseBtnClick: import("vue").PropType<TdNotificationProps["onCloseBtnClick"]>;
        onDurationEnd: import("vue").PropType<TdNotificationProps["onDurationEnd"]>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        placement: StringConstructor;
        closeBtn: {
            type: import("vue").PropType<TdNotificationProps["closeBtn"]>;
            default: any;
        };
        content: {
            type: import("vue").PropType<TdNotificationProps["content"]>;
        };
        default: {
            type: import("vue").PropType<TdNotificationProps["default"]>;
        };
        duration: {
            type: NumberConstructor;
            default: number;
        };
        footer: {
            type: import("vue").PropType<TdNotificationProps["footer"]>;
        };
        icon: {
            type: import("vue").PropType<TdNotificationProps["icon"]>;
            default: boolean;
        };
        theme: {
            type: import("vue").PropType<TdNotificationProps["theme"]>;
            default: TdNotificationProps["theme"];
            validator(val: TdNotificationProps["theme"]): boolean;
        };
        title: {
            type: import("vue").PropType<TdNotificationProps["title"]>;
        };
        onCloseBtnClick: import("vue").PropType<TdNotificationProps["onCloseBtnClick"]>;
        onDurationEnd: import("vue").PropType<TdNotificationProps["onDurationEnd"]>;
    }>>, {
        duration: number;
        icon: boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        theme: import("./type").NotificationThemeList;
        closeBtn: string | boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        placement: StringConstructor;
        closeBtn: {
            type: import("vue").PropType<TdNotificationProps["closeBtn"]>;
            default: any;
        };
        content: {
            type: import("vue").PropType<TdNotificationProps["content"]>;
        };
        default: {
            type: import("vue").PropType<TdNotificationProps["default"]>;
        };
        duration: {
            type: NumberConstructor;
            default: number;
        };
        footer: {
            type: import("vue").PropType<TdNotificationProps["footer"]>;
        };
        icon: {
            type: import("vue").PropType<TdNotificationProps["icon"]>;
            default: boolean;
        };
        theme: {
            type: import("vue").PropType<TdNotificationProps["theme"]>;
            default: TdNotificationProps["theme"];
            validator(val: TdNotificationProps["theme"]): boolean;
        };
        title: {
            type: import("vue").PropType<TdNotificationProps["title"]>;
        };
        onCloseBtnClick: import("vue").PropType<TdNotificationProps["onCloseBtnClick"]>;
        onDurationEnd: import("vue").PropType<TdNotificationProps["onDurationEnd"]>;
    }>>, () => JSX.Element, {}, {}, {}, {
        duration: number;
        icon: boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        theme: import("./type").NotificationThemeList;
        closeBtn: string | boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    placement: StringConstructor;
    closeBtn: {
        type: import("vue").PropType<TdNotificationProps["closeBtn"]>;
        default: any;
    };
    content: {
        type: import("vue").PropType<TdNotificationProps["content"]>;
    };
    default: {
        type: import("vue").PropType<TdNotificationProps["default"]>;
    };
    duration: {
        type: NumberConstructor;
        default: number;
    };
    footer: {
        type: import("vue").PropType<TdNotificationProps["footer"]>;
    };
    icon: {
        type: import("vue").PropType<TdNotificationProps["icon"]>;
        default: boolean;
    };
    theme: {
        type: import("vue").PropType<TdNotificationProps["theme"]>;
        default: TdNotificationProps["theme"];
        validator(val: TdNotificationProps["theme"]): boolean;
    };
    title: {
        type: import("vue").PropType<TdNotificationProps["title"]>;
    };
    onCloseBtnClick: import("vue").PropType<TdNotificationProps["onCloseBtnClick"]>;
    onDurationEnd: import("vue").PropType<TdNotificationProps["onDurationEnd"]>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    duration: number;
    icon: boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
    theme: import("./type").NotificationThemeList;
    closeBtn: string | boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export { default as NotifyPlugin } from './plugin';
export default Notification;
