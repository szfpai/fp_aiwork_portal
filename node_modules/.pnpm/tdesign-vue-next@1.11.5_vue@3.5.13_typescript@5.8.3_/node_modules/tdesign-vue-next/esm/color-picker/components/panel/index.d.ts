import { TdColorPickerProps } from '../../type';
declare const _default: import("vue").DefineComponent<{
    togglePopup: {
        type: FunctionConstructor;
    };
    borderless: BooleanConstructor;
    clearable: BooleanConstructor;
    closeBtn: {
        type: import("vue").PropType<TdColorPickerProps["closeBtn"]>;
        default: TdColorPickerProps["closeBtn"];
    };
    colorModes: {
        type: import("vue").PropType<TdColorPickerProps["colorModes"]>;
        default: () => TdColorPickerProps["colorModes"];
    };
    disabled: BooleanConstructor;
    enableAlpha: BooleanConstructor;
    enableMultipleGradient: {
        type: BooleanConstructor;
        default: boolean;
    };
    format: {
        type: import("vue").PropType<TdColorPickerProps["format"]>;
        default: TdColorPickerProps["format"];
        validator(val: TdColorPickerProps["format"]): boolean;
    };
    inputProps: {
        type: import("vue").PropType<TdColorPickerProps["inputProps"]>;
    };
    multiple: BooleanConstructor;
    popupProps: {
        type: import("vue").PropType<TdColorPickerProps["popupProps"]>;
    };
    recentColors: {
        type: import("vue").PropType<TdColorPickerProps["recentColors"]>;
        default: TdColorPickerProps["recentColors"];
    };
    defaultRecentColors: {
        type: import("vue").PropType<TdColorPickerProps["defaultRecentColors"]>;
        default: () => TdColorPickerProps["defaultRecentColors"];
    };
    selectInputProps: {
        type: import("vue").PropType<TdColorPickerProps["selectInputProps"]>;
    };
    showPrimaryColorPreview: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<TdColorPickerProps["size"]>;
        default: TdColorPickerProps["size"];
        validator(val: TdColorPickerProps["size"]): boolean;
    };
    swatchColors: {
        type: import("vue").PropType<TdColorPickerProps["swatchColors"]>;
    };
    value: {
        type: StringConstructor;
        default: any;
    };
    modelValue: {
        type: StringConstructor;
        default: any;
    };
    defaultValue: {
        type: StringConstructor;
        default: string;
    };
    onChange: import("vue").PropType<TdColorPickerProps["onChange"]>;
    onPaletteBarChange: import("vue").PropType<TdColorPickerProps["onPaletteBarChange"]>;
    onRecentColorsChange: import("vue").PropType<TdColorPickerProps["onRecentColorsChange"]>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    togglePopup: {
        type: FunctionConstructor;
    };
    borderless: BooleanConstructor;
    clearable: BooleanConstructor;
    closeBtn: {
        type: import("vue").PropType<TdColorPickerProps["closeBtn"]>;
        default: TdColorPickerProps["closeBtn"];
    };
    colorModes: {
        type: import("vue").PropType<TdColorPickerProps["colorModes"]>;
        default: () => TdColorPickerProps["colorModes"];
    };
    disabled: BooleanConstructor;
    enableAlpha: BooleanConstructor;
    enableMultipleGradient: {
        type: BooleanConstructor;
        default: boolean;
    };
    format: {
        type: import("vue").PropType<TdColorPickerProps["format"]>;
        default: TdColorPickerProps["format"];
        validator(val: TdColorPickerProps["format"]): boolean;
    };
    inputProps: {
        type: import("vue").PropType<TdColorPickerProps["inputProps"]>;
    };
    multiple: BooleanConstructor;
    popupProps: {
        type: import("vue").PropType<TdColorPickerProps["popupProps"]>;
    };
    recentColors: {
        type: import("vue").PropType<TdColorPickerProps["recentColors"]>;
        default: TdColorPickerProps["recentColors"];
    };
    defaultRecentColors: {
        type: import("vue").PropType<TdColorPickerProps["defaultRecentColors"]>;
        default: () => TdColorPickerProps["defaultRecentColors"];
    };
    selectInputProps: {
        type: import("vue").PropType<TdColorPickerProps["selectInputProps"]>;
    };
    showPrimaryColorPreview: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<TdColorPickerProps["size"]>;
        default: TdColorPickerProps["size"];
        validator(val: TdColorPickerProps["size"]): boolean;
    };
    swatchColors: {
        type: import("vue").PropType<TdColorPickerProps["swatchColors"]>;
    };
    value: {
        type: StringConstructor;
        default: any;
    };
    modelValue: {
        type: StringConstructor;
        default: any;
    };
    defaultValue: {
        type: StringConstructor;
        default: string;
    };
    onChange: import("vue").PropType<TdColorPickerProps["onChange"]>;
    onPaletteBarChange: import("vue").PropType<TdColorPickerProps["onPaletteBarChange"]>;
    onRecentColorsChange: import("vue").PropType<TdColorPickerProps["onRecentColorsChange"]>;
}>>, {
    format: "CMYK" | "HEX" | "RGB" | "HSL" | "HSV" | "CSS" | "RGBA" | "HSLA" | "HSB" | "HSVA";
    value: string;
    multiple: boolean;
    size: import("../../..").SizeEnum;
    disabled: boolean;
    defaultValue: string;
    modelValue: string;
    borderless: boolean;
    clearable: boolean;
    closeBtn: string | boolean | ((h: typeof import("vue").h) => import("../../..").TNodeReturnValue);
    colorModes: ("monochrome" | "linear-gradient")[];
    recentColors: boolean | string[];
    defaultRecentColors: boolean | string[];
    enableAlpha: boolean;
    enableMultipleGradient: boolean;
    showPrimaryColorPreview: boolean;
}, {}>;
export default _default;
