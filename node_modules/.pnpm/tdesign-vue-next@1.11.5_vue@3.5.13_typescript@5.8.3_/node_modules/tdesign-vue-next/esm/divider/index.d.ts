import { TdDividerProps } from './type';
import './style';
export * from './type';
export type DividerProps = TdDividerProps;
export declare const Divider: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        align: {
            type: import("vue").PropType<TdDividerProps["align"]>;
            default: TdDividerProps["align"];
            validator(val: TdDividerProps["align"]): boolean;
        };
        content: {
            type: import("vue").PropType<TdDividerProps["content"]>;
        };
        dashed: BooleanConstructor;
        default: {
            type: import("vue").PropType<TdDividerProps["default"]>;
        };
        layout: {
            type: import("vue").PropType<TdDividerProps["layout"]>;
            default: TdDividerProps["layout"];
            validator(val: TdDividerProps["layout"]): boolean;
        };
        theme: {
            type: import("vue").PropType<TdDividerProps["theme"]>;
            validator(val: TdDividerProps["theme"]): boolean;
        };
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        align: {
            type: import("vue").PropType<TdDividerProps["align"]>;
            default: TdDividerProps["align"];
            validator(val: TdDividerProps["align"]): boolean;
        };
        content: {
            type: import("vue").PropType<TdDividerProps["content"]>;
        };
        dashed: BooleanConstructor;
        default: {
            type: import("vue").PropType<TdDividerProps["default"]>;
        };
        layout: {
            type: import("vue").PropType<TdDividerProps["layout"]>;
            default: TdDividerProps["layout"];
            validator(val: TdDividerProps["layout"]): boolean;
        };
        theme: {
            type: import("vue").PropType<TdDividerProps["theme"]>;
            validator(val: TdDividerProps["theme"]): boolean;
        };
    }>>, {
        align: "left" | "center" | "right";
        dashed: boolean;
        layout: "vertical" | "horizontal";
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        align: {
            type: import("vue").PropType<TdDividerProps["align"]>;
            default: TdDividerProps["align"];
            validator(val: TdDividerProps["align"]): boolean;
        };
        content: {
            type: import("vue").PropType<TdDividerProps["content"]>;
        };
        dashed: BooleanConstructor;
        default: {
            type: import("vue").PropType<TdDividerProps["default"]>;
        };
        layout: {
            type: import("vue").PropType<TdDividerProps["layout"]>;
            default: TdDividerProps["layout"];
            validator(val: TdDividerProps["layout"]): boolean;
        };
        theme: {
            type: import("vue").PropType<TdDividerProps["theme"]>;
            validator(val: TdDividerProps["theme"]): boolean;
        };
    }>>, () => JSX.Element, {}, {}, {}, {
        align: "left" | "center" | "right";
        dashed: boolean;
        layout: "vertical" | "horizontal";
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    align: {
        type: import("vue").PropType<TdDividerProps["align"]>;
        default: TdDividerProps["align"];
        validator(val: TdDividerProps["align"]): boolean;
    };
    content: {
        type: import("vue").PropType<TdDividerProps["content"]>;
    };
    dashed: BooleanConstructor;
    default: {
        type: import("vue").PropType<TdDividerProps["default"]>;
    };
    layout: {
        type: import("vue").PropType<TdDividerProps["layout"]>;
        default: TdDividerProps["layout"];
        validator(val: TdDividerProps["layout"]): boolean;
    };
    theme: {
        type: import("vue").PropType<TdDividerProps["theme"]>;
        validator(val: TdDividerProps["theme"]): boolean;
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    align: "left" | "center" | "right";
    dashed: boolean;
    layout: "vertical" | "horizontal";
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export default Divider;
