import { InfinityScroll } from '../common';
import { BaseTableInstanceFunctions, EnhancedTableInstanceFunctions, PrimaryTableInstanceFunctions } from './type';
import './style';
export * from './type';
export * from './interface';
export type AllTableInstanceFunctions = EnhancedTableInstanceFunctions & PrimaryTableInstanceFunctions & BaseTableInstanceFunctions;
export type TableScroll = InfinityScroll;
export declare const BaseTable: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        renderExpandedRow: import("vue").PropType<import("./interface").BaseTableProps["renderExpandedRow"]>;
        onLeafColumnsChange: import("vue").PropType<import("./interface").BaseTableProps["onLeafColumnsChange"]>;
        thDraggable: BooleanConstructor;
        activeRowKeys: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowKeys"]>;
            default: import("./type").TdBaseTableProps["activeRowKeys"];
        };
        defaultActiveRowKeys: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["defaultActiveRowKeys"]>;
            default: () => import("./type").TdBaseTableProps["defaultActiveRowKeys"];
        };
        activeRowType: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowType"]>;
            default: import("./type").TdBaseTableProps["activeRowType"];
        };
        allowResizeColumnWidth: {
            type: BooleanConstructor;
            default: any;
        };
        attach: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["attach"]>;
        };
        bordered: BooleanConstructor;
        bottomContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["bottomContent"]>;
        };
        cellEmptyContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["cellEmptyContent"]>;
        };
        columns: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["columns"]>;
            default: () => import("./type").TdBaseTableProps["columns"];
        };
        data: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["data"]>;
            default: () => import("./type").TdBaseTableProps["data"];
        };
        disableDataPage: BooleanConstructor;
        disableSpaceInactiveRow: {
            type: BooleanConstructor;
            default: any;
        };
        empty: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["empty"]>;
            default: import("./type").TdBaseTableProps["empty"];
        };
        firstFullRow: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["firstFullRow"]>;
        };
        fixedRows: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["fixedRows"]>;
        };
        footData: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footData"]>;
            default: () => import("./type").TdBaseTableProps["footData"];
        };
        footerAffixProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixProps"]>;
        };
        footerAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixedBottom"]>;
            default: import("./type").TdBaseTableProps["footerAffixedBottom"];
        };
        footerSummary: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerSummary"]>;
        };
        headerAffixProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixProps"]>;
        };
        headerAffixedTop: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixedTop"]>;
            default: import("./type").TdBaseTableProps["headerAffixedTop"];
        };
        height: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["height"]>;
        };
        horizontalScrollAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["horizontalScrollAffixedBottom"]>;
        };
        hover: BooleanConstructor;
        keyboardRowHover: {
            type: BooleanConstructor;
            default: boolean;
        };
        lastFullRow: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["lastFullRow"]>;
        };
        lazyLoad: BooleanConstructor;
        loading: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["loading"]>;
            default: import("./type").TdBaseTableProps["loading"];
        };
        loadingProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["loadingProps"]>;
        };
        locale: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["locale"]>;
        };
        maxHeight: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["maxHeight"]>;
        };
        pagination: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["pagination"]>;
        };
        paginationAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["paginationAffixedBottom"]>;
        };
        resizable: BooleanConstructor;
        rowAttributes: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowAttributes"]>;
        };
        rowClassName: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowClassName"]>;
        };
        rowKey: {
            type: StringConstructor;
            default: string;
            required: boolean;
        };
        rowspanAndColspan: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspan"]>;
        };
        rowspanAndColspanInFooter: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspanInFooter"]>;
        };
        scroll: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["scroll"]>;
        };
        showHeader: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["size"]>;
            validator(val: import("./type").TdBaseTableProps["size"]): boolean;
        };
        stripe: BooleanConstructor;
        tableContentWidth: {
            type: StringConstructor;
            default: string;
        };
        tableLayout: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["tableLayout"]>;
            default: import("./type").TdBaseTableProps["tableLayout"];
            validator(val: import("./type").TdBaseTableProps["tableLayout"]): boolean;
        };
        topContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["topContent"]>;
        };
        verticalAlign: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["verticalAlign"]>;
            default: import("./type").TdBaseTableProps["verticalAlign"];
            validator(val: import("./type").TdBaseTableProps["verticalAlign"]): boolean;
        };
        onActiveChange: import("vue").PropType<import("./type").TdBaseTableProps["onActiveChange"]>;
        onActiveRowAction: import("vue").PropType<import("./type").TdBaseTableProps["onActiveRowAction"]>;
        onCellClick: import("vue").PropType<import("./type").TdBaseTableProps["onCellClick"]>;
        onColumnResizeChange: import("vue").PropType<import("./type").TdBaseTableProps["onColumnResizeChange"]>;
        onPageChange: import("vue").PropType<import("./type").TdBaseTableProps["onPageChange"]>;
        onRowClick: import("vue").PropType<import("./type").TdBaseTableProps["onRowClick"]>;
        onRowDblclick: import("vue").PropType<import("./type").TdBaseTableProps["onRowDblclick"]>;
        onRowMousedown: import("vue").PropType<import("./type").TdBaseTableProps["onRowMousedown"]>;
        onRowMouseenter: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseenter"]>;
        onRowMouseleave: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseleave"]>;
        onRowMouseover: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseover"]>;
        onRowMouseup: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseup"]>;
        onScroll: import("vue").PropType<import("./type").TdBaseTableProps["onScroll"]>;
        onScrollX: import("vue").PropType<import("./type").TdBaseTableProps["onScrollX"]>;
        onScrollY: import("vue").PropType<import("./type").TdBaseTableProps["onScrollY"]>;
    }>>, {
        thList: import("vue").ComputedRef<import("./interface").BaseTableColumns[]>;
        classPrefix: string;
        innerPagination: import("vue").Ref<{
            current?: number;
            defaultCurrent?: number;
            modelValue?: number;
            disabled?: boolean;
            foldedMaxPageBtn?: number;
            maxPageBtn?: number;
            pageEllipsisMode?: "mid" | "both-ends";
            pageSize?: number;
            defaultPageSize?: number;
            pageSizeOptions?: (number | {
                label: string;
                value: number;
            })[];
            selectProps?: {
                autoWidth?: boolean;
                autofocus?: boolean;
                borderless?: boolean;
                clearable?: boolean;
                collapsedItems?: (h: typeof import("vue").h, props: {
                    value: import("..").SelectOption[];
                    collapsedSelectedItems: import("..").SelectOption[];
                    count: number;
                    onClose: (context: {
                        index: number;
                        e?: MouseEvent;
                    }) => void;
                }) => import("..").TNodeReturnValue;
                creatable?: boolean;
                disabled?: boolean;
                empty?: string | import("..").TNode;
                filter?: (filterWords: string, option: import("..").SelectOption) => boolean | Promise<boolean>;
                filterable?: boolean;
                inputProps?: {
                    align?: "left" | "center" | "right";
                    allowInputOverMax?: boolean;
                    autoWidth?: boolean;
                    autocomplete?: string;
                    autofocus?: boolean;
                    borderless?: boolean;
                    clearable?: boolean;
                    disabled?: boolean;
                    format?: import("..").InputFormatType;
                    inputClass?: any;
                    label?: string | import("..").TNode;
                    maxcharacter?: number;
                    maxlength?: string | number;
                    name?: string;
                    placeholder?: string;
                    prefixIcon?: import("..").TNode;
                    readonly?: boolean;
                    showClearIconOnEmpty?: boolean;
                    showLimitNumber?: boolean;
                    size?: import("..").SizeEnum;
                    spellCheck?: boolean;
                    status?: "default" | "success" | "warning" | "error";
                    suffix?: string | import("..").TNode;
                    suffixIcon?: import("..").TNode;
                    tips?: string | import("..").TNode;
                    type?: "text" | "number" | "url" | "tel" | "password" | "search" | "submit" | "hidden";
                    value?: import("..").InputValue;
                    defaultValue?: import("..").InputValue;
                    modelValue?: import("..").InputValue;
                    onBlur?: (value: import("..").InputValue, context: {
                        e: FocusEvent;
                    }) => void;
                    onChange?: (value: import("..").InputValue, context?: {
                        e?: InputEvent | MouseEvent | CompositionEvent;
                        trigger: "input" | "initial" | "clear";
                    }) => void;
                    onClear?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onClick?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onCompositionend?: (value: string, context: {
                        e: CompositionEvent;
                    }) => void;
                    onCompositionstart?: (value: string, context: {
                        e: CompositionEvent;
                    }) => void;
                    onEnter?: (value: import("..").InputValue, context: {
                        e: KeyboardEvent;
                    }) => void;
                    onFocus?: (value: import("..").InputValue, context: {
                        e: FocusEvent;
                    }) => void;
                    onKeydown?: (value: import("..").InputValue, context: {
                        e: KeyboardEvent;
                    }) => void;
                    onKeypress?: (value: import("..").InputValue, context: {
                        e: KeyboardEvent;
                    }) => void;
                    onKeyup?: (value: import("..").InputValue, context: {
                        e: KeyboardEvent;
                    }) => void;
                    onMouseenter?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onMouseleave?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onPaste?: (context: {
                        e: ClipboardEvent;
                        pasteValue: string;
                    }) => void;
                    onValidate?: (context: {
                        error?: "exceed-maximum" | "below-minimum";
                    }) => void;
                    onWheel?: (context: {
                        e: WheelEvent;
                    }) => void;
                };
                inputValue?: string;
                defaultInputValue?: string;
                keys?: {
                    value?: string;
                    label?: string;
                    disabled?: string;
                };
                label?: string | import("..").TNode;
                loading?: boolean;
                loadingText?: string | import("..").TNode;
                max?: number;
                minCollapsedNum?: number;
                multiple?: boolean;
                options?: (import("..").PlainObject | {
                    checkAll?: boolean;
                    content?: string | import("..").TNode;
                    default?: string | import("..").TNode;
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number | boolean;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | import("..").TNode;
                        default?: string | import("..").TNode;
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number | boolean;
                    }[];
                    divider?: boolean;
                    label?: string;
                })[];
                panelBottomContent?: string | import("..").TNode;
                panelTopContent?: string | import("..").TNode;
                placeholder?: string;
                popupProps?: {
                    attach?: import("..").AttachNode;
                    content?: string | import("..").TNode;
                    default?: string | import("..").TNode;
                    delay?: number | Array<number>;
                    destroyOnClose?: boolean;
                    disabled?: boolean;
                    hideEmptyPopup?: boolean;
                    overlayClassName?: any;
                    overlayInnerClassName?: any;
                    overlayInnerStyle?: import("..").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("..").Styles);
                    overlayStyle?: import("..").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("..").Styles);
                    placement?: import("..").PopupPlacement;
                    popperOptions?: object;
                    showArrow?: boolean;
                    trigger?: "hover" | "click" | "focus" | "mousedown" | "context-menu";
                    triggerElement?: string | import("..").TNode;
                    visible?: boolean;
                    defaultVisible?: boolean;
                    modelValue?: boolean;
                    zIndex?: number;
                    onOverlayClick?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onScroll?: (context: {
                        e: WheelEvent;
                    }) => void;
                    onScrollToBottom?: (context: {
                        e: WheelEvent;
                    }) => void;
                    onVisibleChange?: (visible: boolean, context: import("..").PopupVisibleChangeContext) => void;
                };
                popupVisible?: boolean;
                defaultPopupVisible?: boolean;
                prefixIcon?: import("..").TNode;
                readonly?: boolean;
                reserveKeyword?: boolean;
                scroll?: {
                    bufferSize?: number;
                    isFixedRowHeight?: boolean;
                    rowHeight?: number;
                    threshold?: number;
                    type: "lazy" | "virtual";
                };
                selectInputProps?: {
                    allowInput?: boolean;
                    autoWidth?: boolean;
                    autofocus?: boolean;
                    borderless?: boolean;
                    clearable?: boolean;
                    collapsedItems?: import("..").TNode<{
                        value: import("..").SelectInputValue;
                        collapsedSelectedItems: import("..").SelectInputValue;
                        count: number;
                        onClose: (context: {
                            index: number;
                            e?: MouseEvent;
                        }) => void;
                    }>;
                    disabled?: boolean;
                    inputProps?: {
                        align?: "left" | "center" | "right";
                        allowInputOverMax?: boolean;
                        autoWidth?: boolean;
                        autocomplete?: string;
                        autofocus?: boolean;
                        borderless?: boolean;
                        clearable?: boolean;
                        disabled?: boolean;
                        format?: import("..").InputFormatType;
                        inputClass?: any;
                        label?: string | import("..").TNode;
                        maxcharacter?: number;
                        maxlength?: string | number;
                        name?: string;
                        placeholder?: string;
                        prefixIcon?: import("..").TNode;
                        readonly?: boolean;
                        showClearIconOnEmpty?: boolean;
                        showLimitNumber?: boolean;
                        size?: import("..").SizeEnum;
                        spellCheck?: boolean;
                        status?: "default" | "success" | "warning" | "error";
                        suffix?: string | import("..").TNode;
                        suffixIcon?: import("..").TNode;
                        tips?: string | import("..").TNode;
                        type?: "text" | "number" | "url" | "tel" | "password" | "search" | "submit" | "hidden";
                        value?: import("..").InputValue;
                        defaultValue?: import("..").InputValue;
                        modelValue?: import("..").InputValue;
                        onBlur?: (value: import("..").InputValue, context: {
                            e: FocusEvent;
                        }) => void;
                        onChange?: (value: import("..").InputValue, context?: {
                            e?: InputEvent | MouseEvent | CompositionEvent;
                            trigger: "input" | "initial" | "clear";
                        }) => void;
                        onClear?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onClick?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onCompositionend?: (value: string, context: {
                            e: CompositionEvent;
                        }) => void;
                        onCompositionstart?: (value: string, context: {
                            e: CompositionEvent;
                        }) => void;
                        onEnter?: (value: import("..").InputValue, context: {
                            e: KeyboardEvent;
                        }) => void;
                        onFocus?: (value: import("..").InputValue, context: {
                            e: FocusEvent;
                        }) => void;
                        onKeydown?: (value: import("..").InputValue, context: {
                            e: KeyboardEvent;
                        }) => void;
                        onKeypress?: (value: import("..").InputValue, context: {
                            e: KeyboardEvent;
                        }) => void;
                        onKeyup?: (value: import("..").InputValue, context: {
                            e: KeyboardEvent;
                        }) => void;
                        onMouseenter?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onMouseleave?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onPaste?: (context: {
                            e: ClipboardEvent;
                            pasteValue: string;
                        }) => void;
                        onValidate?: (context: {
                            error?: "exceed-maximum" | "below-minimum";
                        }) => void;
                        onWheel?: (context: {
                            e: WheelEvent;
                        }) => void;
                    };
                    inputValue?: string;
                    defaultInputValue?: string;
                    keys?: {
                        label?: string;
                        value?: string;
                        children?: string;
                    };
                    label?: string | import("..").TNode;
                    loading?: boolean;
                    minCollapsedNum?: number;
                    multiple?: boolean;
                    panel?: string | import("..").TNode;
                    placeholder?: string;
                    popupProps?: {
                        attach?: import("..").AttachNode;
                        content?: string | import("..").TNode;
                        default?: string | import("..").TNode;
                        delay?: number | Array<number>;
                        destroyOnClose?: boolean;
                        disabled?: boolean;
                        hideEmptyPopup?: boolean;
                        overlayClassName?: any;
                        overlayInnerClassName?: any;
                        overlayInnerStyle?: import("..").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("..").Styles);
                        overlayStyle?: import("..").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("..").Styles);
                        placement?: import("..").PopupPlacement;
                        popperOptions?: object;
                        showArrow?: boolean;
                        trigger?: "hover" | "click" | "focus" | "mousedown" | "context-menu";
                        triggerElement?: string | import("..").TNode;
                        visible?: boolean;
                        defaultVisible?: boolean;
                        modelValue?: boolean;
                        zIndex?: number;
                        onOverlayClick?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onScroll?: (context: {
                            e: WheelEvent;
                        }) => void;
                        onScrollToBottom?: (context: {
                            e: WheelEvent;
                        }) => void;
                        onVisibleChange?: (visible: boolean, context: import("..").PopupVisibleChangeContext) => void;
                    };
                    popupVisible?: boolean;
                    defaultPopupVisible?: boolean;
                    prefixIcon?: import("..").TNode;
                    readonly?: boolean;
                    reserveKeyword?: boolean;
                    size?: import("..").SizeEnum;
                    status?: "default" | "success" | "warning" | "error";
                    suffix?: string | import("..").TNode;
                    suffixIcon?: import("..").TNode;
                    tag?: string | import("..").TNode<{
                        value: string | number;
                    }>;
                    tagInputProps?: {
                        autoWidth?: boolean;
                        borderless?: boolean;
                        clearable?: boolean;
                        collapsedItems?: import("..").TNode<{
                            value: import("..").TagInputValue;
                            collapsedSelectedItems: import("..").TagInputValue;
                            count: number;
                            onClose: (context: {
                                index: number;
                                e?: MouseEvent;
                            }) => void;
                        }>;
                        disabled?: boolean;
                        dragSort?: boolean;
                        excessTagsDisplayType?: "scroll" | "break-line";
                        inputProps?: {
                            align?: "left" | "center" | "right";
                            allowInputOverMax?: boolean;
                            autoWidth?: boolean;
                            autocomplete?: string;
                            autofocus?: boolean;
                            borderless?: boolean;
                            clearable?: boolean;
                            disabled?: boolean;
                            format?: import("..").InputFormatType;
                            inputClass?: any;
                            label?: string | import("..").TNode;
                            maxcharacter?: number;
                            maxlength?: string | number;
                            name?: string;
                            placeholder?: string;
                            prefixIcon?: import("..").TNode;
                            readonly?: boolean;
                            showClearIconOnEmpty?: boolean;
                            showLimitNumber?: boolean;
                            size?: import("..").SizeEnum;
                            spellCheck?: boolean;
                            status?: "default" | "success" | "warning" | "error";
                            suffix?: string | import("..").TNode;
                            suffixIcon?: import("..").TNode;
                            tips?: string | import("..").TNode;
                            type?: "text" | "number" | "url" | "tel" | "password" | "search" | "submit" | "hidden";
                            value?: import("..").InputValue;
                            defaultValue?: import("..").InputValue;
                            modelValue?: import("..").InputValue;
                            onBlur?: (value: import("..").InputValue, context: {
                                e: FocusEvent;
                            }) => void;
                            onChange?: (value: import("..").InputValue, context?: {
                                e?: InputEvent | MouseEvent | CompositionEvent;
                                trigger: "input" | "initial" | "clear";
                            }) => void;
                            onClear?: (context: {
                                e: MouseEvent;
                            }) => void;
                            onClick?: (context: {
                                e: MouseEvent;
                            }) => void;
                            onCompositionend?: (value: string, context: {
                                e: CompositionEvent;
                            }) => void;
                            onCompositionstart?: (value: string, context: {
                                e: CompositionEvent;
                            }) => void;
                            onEnter?: (value: import("..").InputValue, context: {
                                e: KeyboardEvent;
                            }) => void;
                            onFocus?: (value: import("..").InputValue, context: {
                                e: FocusEvent;
                            }) => void;
                            onKeydown?: (value: import("..").InputValue, context: {
                                e: KeyboardEvent;
                            }) => void;
                            onKeypress?: (value: import("..").InputValue, context: {
                                e: KeyboardEvent;
                            }) => void;
                            onKeyup?: (value: import("..").InputValue, context: {
                                e: KeyboardEvent;
                            }) => void;
                            onMouseenter?: (context: {
                                e: MouseEvent;
                            }) => void;
                            onMouseleave?: (context: {
                                e: MouseEvent;
                            }) => void;
                            onPaste?: (context: {
                                e: ClipboardEvent;
                                pasteValue: string;
                            }) => void;
                            onValidate?: (context: {
                                error?: "exceed-maximum" | "below-minimum";
                            }) => void;
                            onWheel?: (context: {
                                e: WheelEvent;
                            }) => void;
                        };
                        inputValue?: string;
                        defaultInputValue?: string;
                        label?: string | import("..").TNode;
                        max?: number;
                        minCollapsedNum?: number;
                        placeholder?: string;
                        prefixIcon?: import("..").TNode;
                        readonly?: boolean;
                        size?: import("..").SizeEnum;
                        status?: "default" | "success" | "warning" | "error";
                        suffix?: string | import("..").TNode;
                        suffixIcon?: import("..").TNode;
                        tag?: string | import("..").TNode<{
                            value: string | number;
                        }>;
                        tagProps?: {
                            closable?: boolean;
                            color?: string;
                            content?: string | import("..").TNode;
                            default?: string | import("..").TNode;
                            disabled?: boolean;
                            icon?: import("..").TNode;
                            maxWidth?: string | number;
                            shape?: "square" | "round" | "mark";
                            size?: import("..").SizeEnum;
                            theme?: "default" | "primary" | "warning" | "danger" | "success";
                            title?: string;
                            variant?: "dark" | "light" | "outline" | "light-outline";
                            onClick?: (context: {
                                e: MouseEvent;
                            }) => void;
                            onClose?: (context: {
                                e: MouseEvent;
                            }) => void;
                        };
                        tips?: string | import("..").TNode;
                        value?: (string | number)[];
                        defaultValue?: (string | number)[];
                        modelValue?: (string | number)[];
                        valueDisplay?: string | import("..").TNode<{
                            value: import("..").TagInputValue;
                            onClose: (index: number, item?: any) => void;
                        }>;
                        onBlur?: (value: import("..").TagInputValue, context: {
                            inputValue: string;
                            e: FocusEvent;
                        }) => void;
                        onChange?: (value: import("..").TagInputValue, context: import("..").TagInputChangeContext) => void;
                        onClear?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onClick?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onDragSort?: (context: import("..").TagInputDragSortContext) => void;
                        onEnter?: (value: import("..").TagInputValue, context: {
                            e: KeyboardEvent;
                            inputValue: string;
                        }) => void;
                        onFocus?: (value: import("..").TagInputValue, context: {
                            inputValue: string;
                            e: FocusEvent;
                        }) => void;
                        onInputChange?: (value: string, context?: import("..").InputValueChangeContext) => void;
                        onMouseenter?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onMouseleave?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onPaste?: (context: {
                            e: ClipboardEvent;
                            pasteValue: string;
                        }) => void;
                        onRemove?: (context: import("..").TagInputRemoveContext) => void;
                    };
                    tagProps?: {
                        closable?: boolean;
                        color?: string;
                        content?: string | import("..").TNode;
                        default?: string | import("..").TNode;
                        disabled?: boolean;
                        icon?: import("..").TNode;
                        maxWidth?: string | number;
                        shape?: "square" | "round" | "mark";
                        size?: import("..").SizeEnum;
                        theme?: "default" | "primary" | "warning" | "danger" | "success";
                        title?: string;
                        variant?: "dark" | "light" | "outline" | "light-outline";
                        onClick?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onClose?: (context: {
                            e: MouseEvent;
                        }) => void;
                    };
                    tips?: string | import("..").TNode;
                    value?: any;
                    valueDisplay?: string | import("..").TNode<{
                        value: import("..").TagInputValue;
                        onClose: (index: number, item?: any) => void;
                    }>;
                    onBlur?: (value: import("..").SelectInputValue, context: import("..").SelectInputBlurContext) => void;
                    onClear?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onEnter?: (value: import("..").SelectInputValue, context: {
                        e: KeyboardEvent;
                        inputValue: string;
                        tagInputValue?: import("..").TagInputValue;
                    }) => void;
                    onFocus?: (value: import("..").SelectInputValue, context: import("..").SelectInputFocusContext) => void;
                    onInputChange?: (value: string, context?: import("..").SelectInputValueChangeContext) => void;
                    onMouseenter?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onMouseleave?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onPaste?: (context: {
                        e: ClipboardEvent;
                        pasteValue: string;
                    }) => void;
                    onPopupVisibleChange?: (visible: boolean, context: import("..").PopupVisibleChangeContext) => void;
                    onTagChange?: (value: import("..").TagInputValue, context: import("..").SelectInputChangeContext) => void;
                };
                showArrow?: boolean;
                size?: import("..").SizeEnum;
                status?: "default" | "success" | "warning" | "error";
                suffix?: string | import("..").TNode;
                suffixIcon?: import("..").TNode;
                tagInputProps?: {
                    autoWidth?: boolean;
                    borderless?: boolean;
                    clearable?: boolean;
                    collapsedItems?: import("..").TNode<{
                        value: import("..").TagInputValue;
                        collapsedSelectedItems: import("..").TagInputValue;
                        count: number;
                        onClose: (context: {
                            index: number;
                            e?: MouseEvent;
                        }) => void;
                    }>;
                    disabled?: boolean;
                    dragSort?: boolean;
                    excessTagsDisplayType?: "scroll" | "break-line";
                    inputProps?: {
                        align?: "left" | "center" | "right";
                        allowInputOverMax?: boolean;
                        autoWidth?: boolean;
                        autocomplete?: string;
                        autofocus?: boolean;
                        borderless?: boolean;
                        clearable?: boolean;
                        disabled?: boolean;
                        format?: import("..").InputFormatType;
                        inputClass?: any;
                        label?: string | import("..").TNode;
                        maxcharacter?: number;
                        maxlength?: string | number;
                        name?: string;
                        placeholder?: string;
                        prefixIcon?: import("..").TNode;
                        readonly?: boolean;
                        showClearIconOnEmpty?: boolean;
                        showLimitNumber?: boolean;
                        size?: import("..").SizeEnum;
                        spellCheck?: boolean;
                        status?: "default" | "success" | "warning" | "error";
                        suffix?: string | import("..").TNode;
                        suffixIcon?: import("..").TNode;
                        tips?: string | import("..").TNode;
                        type?: "text" | "number" | "url" | "tel" | "password" | "search" | "submit" | "hidden";
                        value?: import("..").InputValue;
                        defaultValue?: import("..").InputValue;
                        modelValue?: import("..").InputValue;
                        onBlur?: (value: import("..").InputValue, context: {
                            e: FocusEvent;
                        }) => void;
                        onChange?: (value: import("..").InputValue, context?: {
                            e?: InputEvent | MouseEvent | CompositionEvent;
                            trigger: "input" | "initial" | "clear";
                        }) => void;
                        onClear?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onClick?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onCompositionend?: (value: string, context: {
                            e: CompositionEvent;
                        }) => void;
                        onCompositionstart?: (value: string, context: {
                            e: CompositionEvent;
                        }) => void;
                        onEnter?: (value: import("..").InputValue, context: {
                            e: KeyboardEvent;
                        }) => void;
                        onFocus?: (value: import("..").InputValue, context: {
                            e: FocusEvent;
                        }) => void;
                        onKeydown?: (value: import("..").InputValue, context: {
                            e: KeyboardEvent;
                        }) => void;
                        onKeypress?: (value: import("..").InputValue, context: {
                            e: KeyboardEvent;
                        }) => void;
                        onKeyup?: (value: import("..").InputValue, context: {
                            e: KeyboardEvent;
                        }) => void;
                        onMouseenter?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onMouseleave?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onPaste?: (context: {
                            e: ClipboardEvent;
                            pasteValue: string;
                        }) => void;
                        onValidate?: (context: {
                            error?: "exceed-maximum" | "below-minimum";
                        }) => void;
                        onWheel?: (context: {
                            e: WheelEvent;
                        }) => void;
                    };
                    inputValue?: string;
                    defaultInputValue?: string;
                    label?: string | import("..").TNode;
                    max?: number;
                    minCollapsedNum?: number;
                    placeholder?: string;
                    prefixIcon?: import("..").TNode;
                    readonly?: boolean;
                    size?: import("..").SizeEnum;
                    status?: "default" | "success" | "warning" | "error";
                    suffix?: string | import("..").TNode;
                    suffixIcon?: import("..").TNode;
                    tag?: string | import("..").TNode<{
                        value: string | number;
                    }>;
                    tagProps?: {
                        closable?: boolean;
                        color?: string;
                        content?: string | import("..").TNode;
                        default?: string | import("..").TNode;
                        disabled?: boolean;
                        icon?: import("..").TNode;
                        maxWidth?: string | number;
                        shape?: "square" | "round" | "mark";
                        size?: import("..").SizeEnum;
                        theme?: "default" | "primary" | "warning" | "danger" | "success";
                        title?: string;
                        variant?: "dark" | "light" | "outline" | "light-outline";
                        onClick?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onClose?: (context: {
                            e: MouseEvent;
                        }) => void;
                    };
                    tips?: string | import("..").TNode;
                    value?: (string | number)[];
                    defaultValue?: (string | number)[];
                    modelValue?: (string | number)[];
                    valueDisplay?: string | import("..").TNode<{
                        value: import("..").TagInputValue;
                        onClose: (index: number, item?: any) => void;
                    }>;
                    onBlur?: (value: import("..").TagInputValue, context: {
                        inputValue: string;
                        e: FocusEvent;
                    }) => void;
                    onChange?: (value: import("..").TagInputValue, context: import("..").TagInputChangeContext) => void;
                    onClear?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onClick?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onDragSort?: (context: import("..").TagInputDragSortContext) => void;
                    onEnter?: (value: import("..").TagInputValue, context: {
                        e: KeyboardEvent;
                        inputValue: string;
                    }) => void;
                    onFocus?: (value: import("..").TagInputValue, context: {
                        inputValue: string;
                        e: FocusEvent;
                    }) => void;
                    onInputChange?: (value: string, context?: import("..").InputValueChangeContext) => void;
                    onMouseenter?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onMouseleave?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onPaste?: (context: {
                        e: ClipboardEvent;
                        pasteValue: string;
                    }) => void;
                    onRemove?: (context: import("..").TagInputRemoveContext) => void;
                };
                tagProps?: {
                    closable?: boolean;
                    color?: string;
                    content?: string | import("..").TNode;
                    default?: string | import("..").TNode;
                    disabled?: boolean;
                    icon?: import("..").TNode;
                    maxWidth?: string | number;
                    shape?: "square" | "round" | "mark";
                    size?: import("..").SizeEnum;
                    theme?: "default" | "primary" | "warning" | "danger" | "success";
                    title?: string;
                    variant?: "dark" | "light" | "outline" | "light-outline";
                    onClick?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onClose?: (context: {
                        e: MouseEvent;
                    }) => void;
                };
                tips?: string | import("..").TNode;
                value?: any;
                defaultValue?: any;
                modelValue?: any;
                valueDisplay?: string | import("..").TNode<{
                    value: import("..").SelectValue;
                    onClose: (index: number) => void;
                    displayValue?: import("..").SelectValue;
                    label?: string;
                }>;
                valueType?: "value" | "object";
                onBlur?: (context: {
                    value: import("..").SelectValue;
                    e: FocusEvent | KeyboardEvent;
                }) => void;
                onChange?: (value: import("..").SelectValue, context: {
                    option?: import("..").SelectOption;
                    selectedOptions: import("..").SelectOption[];
                    trigger: import("..").SelectValueChangeTrigger;
                    e?: MouseEvent | KeyboardEvent;
                }) => void;
                onClear?: (context: {
                    e: MouseEvent;
                }) => void;
                onCreate?: (value: string | number | boolean) => void;
                onEnter?: (context: {
                    inputValue: string;
                    e: KeyboardEvent;
                    value: import("..").SelectValue;
                }) => void;
                onFocus?: (context: {
                    value: import("..").SelectValue;
                    e: FocusEvent | KeyboardEvent;
                }) => void;
                onInputChange?: (value: string, context?: import("..").SelectInputValueChangeContext) => void;
                onPopupVisibleChange?: (visible: boolean, context: import("..").PopupVisibleChangeContext) => void;
                onRemove?: (options: import("..").SelectRemoveContext<import("..").SelectOption>) => void;
                onSearch?: (filterWords: string, context: {
                    e: KeyboardEvent;
                }) => void;
            };
            showFirstAndLastPageBtn?: boolean;
            showJumper?: boolean;
            showPageNumber?: boolean;
            showPageSize?: boolean;
            showPreviousAndNextBtn?: boolean;
            size?: "small" | "medium";
            theme?: "default" | "simple";
            total?: number;
            totalContent?: boolean | import("..").TNode;
            onChange?: (pageInfo: import("..").PageInfo) => void;
            onCurrentChange?: (current: number, pageInfo: import("..").PageInfo) => void;
            onPageSizeChange?: (pageSize: number, pageInfo: import("..").PageInfo) => void;
        }>;
        globalConfig: import("vue").ComputedRef<{} & (import("..").TableConfig | ({
            readonly expandIcon: any;
            readonly sortIcon: any;
            readonly filterIcon: any;
            readonly treeExpandAndFoldIcon: any;
            readonly hideSortTips: false;
            readonly size: "medium";
        } & {
            readonly empty: "暂无数据";
            readonly loadingText: "正在加载中，请稍后";
            readonly loadingMoreText: "点击加载更多";
            readonly filterInputPlaceholder: "请输入内容（无默认值）";
            readonly sortAscendingOperationText: "点击升序";
            readonly sortCancelOperationText: "点击取消排序";
            readonly sortDescendingOperationText: "点击降序";
            readonly clearFilterResultButtonText: "清空筛选";
            readonly columnConfigButtonText: "列配置";
            readonly columnConfigTitleText: "表格列配置";
            readonly columnConfigDescriptionText: "请选择需要在表格中显示的数据列";
            readonly confirmText: "确认";
            readonly cancelText: "取消";
            readonly resetText: "重置";
            readonly selectAllText: "全选";
            readonly searchResultText: "搜索“{result}”，找到 {count} 条结果";
        } & import("..").TableConfig))>;
        tableFootHeight: import("vue").Ref<number>;
        virtualScrollHeaderPos: import("vue").Ref<{
            left: number;
            top: number;
        }>;
        tableSize: import("vue").ComputedRef<import("..").SizeEnum>;
        tableWidth: import("vue").Ref<number>;
        tableElmWidth: import("vue").Ref<number>;
        tableRef: import("vue").Ref<HTMLDivElement>;
        tableElmRef: import("vue").Ref<HTMLTableElement>;
        sizeClassNames: {
            small: string;
            medium: string;
            large: string;
            default: string;
            xs: string;
            xl: string;
            block: string;
        };
        tableBaseClass: {
            table: string;
            columnResizableTable: string;
            overflowVisible: string;
            body: string;
            content: string;
            topContent: string;
            bottomContent: string;
            paginationWrap: string;
            tdLastRow: string;
            tdFirstCol: string;
            thCellInner: string;
            tableRowEdit: string;
            cellEditable: string;
            cellEditWrap: string;
            bordered: string;
            striped: string;
            hover: string;
            loading: string;
            rowspanAndColspan: string;
            empty: string;
            emptyRow: string;
            headerFixed: string;
            columnFixed: string;
            widthOverflow: string;
            multipleHeader: string;
            footerAffixed: string;
            horizontalBarAffixed: string;
            affixedHeader: string;
            affixedHeaderElm: string;
            affixedFooterElm: string;
            affixedFooterWrap: string;
            scrollbarDivider: string;
            fullHeight: string;
            resizeLine: string;
            obviousScrollbar: string;
            affixedHeaderWrap: string;
        };
        spansAndLeafNodes: import("vue").ComputedRef<{
            rowspanAndColspanMap: import("./interface").ThRowspanAndColspan;
            leafColumns: import("./interface").BaseTableColumns;
        }>;
        dynamicBaseTableClasses: import("vue").ComputedRef<((string | {
            [x: string]: boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue) | Partial<import("..").TdAffixProps> | import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>;
        })[] | {
            [x: string]: boolean | "single" | "multiple";
        })[]>;
        tableContentStyles: import("vue").ComputedRef<{
            height: string | number;
            maxHeight: string | number;
        }>;
        tableElementStyles: import("vue").ComputedRef<{
            width: string | number;
        }>;
        dividerBottom: import("vue").ComputedRef<number>;
        virtualScrollClasses: {
            cursor: string;
            header: string;
        };
        tableLayoutClasses: {
            auto: string;
            fixed: string;
        };
        tableElmClasses: import("vue").ComputedRef<string[][]>;
        tableContentRef: import("vue").Ref<HTMLDivElement>;
        isFixedHeader: import("vue").Ref<boolean>;
        isWidthOverflow: import("vue").Ref<boolean>;
        isFixedColumn: import("vue").Ref<boolean>;
        rowAndColFixedPosition: import("vue").Ref<import("./interface").RowAndColFixedPosition>;
        showColumnShadow: {
            left: boolean;
            right: boolean;
        };
        thWidthList: import("vue").Ref<{
            [colKey: string]: number;
        }>;
        isPaginateData: import("vue").Ref<boolean>;
        dataSource: import("vue").Ref<{
            [x: string]: any;
            children?: any[];
        }[]>;
        affixHeaderRef: import("vue").Ref<HTMLDivElement>;
        affixFooterRef: import("vue").Ref<HTMLDivElement>;
        bottomContentRef: import("vue").Ref<HTMLDivElement>;
        paginationRef: import("vue").Ref<HTMLDivElement>;
        showAffixHeader: import("vue").Ref<boolean>;
        showAffixFooter: import("vue").Ref<boolean>;
        scrollbarWidth: import("vue").Ref<number>;
        isMultipleHeader: import("vue").ComputedRef<boolean>;
        showRightDivider: import("vue").ComputedRef<boolean>;
        resizeLineRef: import("vue").Ref<HTMLDivElement>;
        resizeLineStyle: {
            display: string;
            height: string;
            left: string;
            bottom: string;
        };
        columnResizeParams: {
            resizeLineRef: import("vue").Ref<HTMLDivElement>;
            resizeLineStyle: {
                display: string;
                height: string;
                left: string;
                bottom: string;
            };
            onColumnMouseover: (e: MouseEvent, col: import("./type").BaseTableCol<import("./type").TableRowData>) => void;
            onColumnMousedown: (e: MouseEvent, col: import("./type").BaseTableCol<import("./type").TableRowData>, index: number) => void;
            setEffectColMap: (nodes: import("./type").BaseTableCol<import("./type").TableRowData>[], parent: import("./type").BaseTableCol<import("./type").TableRowData> | null) => void;
        };
        horizontalScrollbarRef: import("vue").Ref<HTMLDivElement>;
        tableBodyRef: import("vue").Ref<import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
            activeRowKeys?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowKeys"]>;
                default: import("./type").TdBaseTableProps["activeRowKeys"];
            };
            defaultActiveRowKeys?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["defaultActiveRowKeys"]>;
                default: () => import("./type").TdBaseTableProps["defaultActiveRowKeys"];
            };
            activeRowType?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowType"]>;
                default: import("./type").TdBaseTableProps["activeRowType"];
            };
            allowResizeColumnWidth?: {
                type: BooleanConstructor;
                default: any;
            };
            attach?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["attach"]>;
            };
            bordered?: BooleanConstructor;
            bottomContent?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["bottomContent"]>;
            };
            cellEmptyContent?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["cellEmptyContent"]>;
            };
            columns: import("vue").PropType<import("./type").BaseTableCol<import("./type").TableRowData>[]> | {
                type: import("vue").PropType<import("./type").TdBaseTableProps["columns"]>;
                default: () => import("./type").TdBaseTableProps["columns"];
            };
            data: import("vue").PropType<import("./type").TableRowData[]> | {
                type: import("vue").PropType<import("./type").TdBaseTableProps["data"]>;
                default: () => import("./type").TdBaseTableProps["data"];
            };
            disableDataPage?: BooleanConstructor;
            disableSpaceInactiveRow?: {
                type: BooleanConstructor;
                default: any;
            };
            empty?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["empty"]>;
                default: import("./type").TdBaseTableProps["empty"];
            };
            firstFullRow: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue)> | {
                type: import("vue").PropType<import("./type").TdBaseTableProps["firstFullRow"]>;
            };
            fixedRows?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["fixedRows"]>;
            };
            footData?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["footData"]>;
                default: () => import("./type").TdBaseTableProps["footData"];
            };
            footerAffixProps?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixProps"]>;
            };
            footerAffixedBottom?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixedBottom"]>;
                default: import("./type").TdBaseTableProps["footerAffixedBottom"];
            };
            footerSummary?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["footerSummary"]>;
            };
            headerAffixProps?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixProps"]>;
            };
            headerAffixedTop?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixedTop"]>;
                default: import("./type").TdBaseTableProps["headerAffixedTop"];
            };
            height?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["height"]>;
            };
            horizontalScrollAffixedBottom?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["horizontalScrollAffixedBottom"]>;
            };
            hover?: BooleanConstructor;
            keyboardRowHover?: {
                type: BooleanConstructor;
                default: boolean;
            };
            lastFullRow: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue)> | {
                type: import("vue").PropType<import("./type").TdBaseTableProps["lastFullRow"]>;
            };
            lazyLoad?: BooleanConstructor;
            loading?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["loading"]>;
                default: import("./type").TdBaseTableProps["loading"];
            };
            loadingProps?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["loadingProps"]>;
            };
            locale?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["locale"]>;
            };
            maxHeight?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["maxHeight"]>;
            };
            pagination?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["pagination"]>;
            };
            paginationAffixedBottom?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["paginationAffixedBottom"]>;
            };
            resizable?: BooleanConstructor;
            rowAttributes?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["rowAttributes"]>;
            };
            rowClassName?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["rowClassName"]>;
            };
            rowKey?: {
                type: StringConstructor;
                default: string;
                required: boolean;
            };
            rowspanAndColspan?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspan"]>;
            };
            rowspanAndColspanInFooter?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspanInFooter"]>;
            };
            scroll?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["scroll"]>;
            };
            showHeader?: {
                type: BooleanConstructor;
                default: boolean;
            };
            size?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["size"]>;
                validator(val: import("./type").TdBaseTableProps["size"]): boolean;
            };
            stripe?: BooleanConstructor;
            tableContentWidth?: {
                type: StringConstructor;
                default: string;
            };
            tableLayout?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["tableLayout"]>;
                default: import("./type").TdBaseTableProps["tableLayout"];
                validator(val: import("./type").TdBaseTableProps["tableLayout"]): boolean;
            };
            topContent?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["topContent"]>;
            };
            verticalAlign?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["verticalAlign"]>;
                default: import("./type").TdBaseTableProps["verticalAlign"];
                validator(val: import("./type").TdBaseTableProps["verticalAlign"]): boolean;
            };
            onActiveChange?: import("vue").PropType<import("./type").TdBaseTableProps["onActiveChange"]>;
            onActiveRowAction?: import("vue").PropType<import("./type").TdBaseTableProps["onActiveRowAction"]>;
            onCellClick?: import("vue").PropType<import("./type").TdBaseTableProps["onCellClick"]>;
            onColumnResizeChange?: import("vue").PropType<import("./type").TdBaseTableProps["onColumnResizeChange"]>;
            onPageChange?: import("vue").PropType<import("./type").TdBaseTableProps["onPageChange"]>;
            onRowClick?: import("vue").PropType<import("./type").TdBaseTableProps["onRowClick"]>;
            onRowDblclick?: import("vue").PropType<import("./type").TdBaseTableProps["onRowDblclick"]>;
            onRowMousedown?: import("vue").PropType<import("./type").TdBaseTableProps["onRowMousedown"]>;
            onRowMouseenter?: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseenter"]>;
            onRowMouseleave?: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseleave"]>;
            onRowMouseover?: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseover"]>;
            onRowMouseup?: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseup"]>;
            onScroll?: import("vue").PropType<import("./type").TdBaseTableProps["onScroll"]>;
            onScrollX?: import("vue").PropType<import("./type").TdBaseTableProps["onScrollX"]>;
            onScrollY?: import("vue").PropType<import("./type").TdBaseTableProps["onScrollY"]>;
            classPrefix: StringConstructor;
            ellipsisOverlayClassName: StringConstructor;
            rowAndColFixedPosition: import("vue").PropType<import("./tbody").TableBodyProps["rowAndColFixedPosition"]>;
            showColumnShadow: import("vue").PropType<import("./tbody").TableBodyProps["showColumnShadow"]>;
            tableElm: {};
            tableWidth: NumberConstructor;
            isWidthOverflow: BooleanConstructor;
            virtualConfig: import("vue").PropType<import("../hooks/useVirtualScrollNew").VirtualScrollConfig>;
            tableContentElm: {};
            handleRowMounted: import("vue").PropType<import("./tbody").TableBodyProps["handleRowMounted"]>;
            renderExpandedRow: import("vue").PropType<import("./tbody").TableBodyProps["renderExpandedRow"]>;
            activeRow: import("vue").PropType<Array<string | number>>;
            hoverRow: (NumberConstructor | StringConstructor)[];
        }>>, {
            t: <T>(pattern: T, ...args: any[]) => any;
            globalConfig: import("vue").ComputedRef<{} & (import("..").TableConfig | ({
                readonly expandIcon: any;
                readonly sortIcon: any;
                readonly filterIcon: any;
                readonly treeExpandAndFoldIcon: any;
                readonly hideSortTips: false;
                readonly size: "medium";
            } & {
                readonly empty: "暂无数据";
                readonly loadingText: "正在加载中，请稍后";
                readonly loadingMoreText: "点击加载更多";
                readonly filterInputPlaceholder: "请输入内容（无默认值）";
                readonly sortAscendingOperationText: "点击升序";
                readonly sortCancelOperationText: "点击取消排序";
                readonly sortDescendingOperationText: "点击降序";
                readonly clearFilterResultButtonText: "清空筛选";
                readonly columnConfigButtonText: "列配置";
                readonly columnConfigTitleText: "表格列配置";
                readonly columnConfigDescriptionText: "请选择需要在表格中显示的数据列";
                readonly confirmText: "确认";
                readonly cancelText: "取消";
                readonly resetText: "重置";
                readonly selectAllText: "全选";
                readonly searchResultText: "搜索“{result}”，找到 {count} 条结果";
            } & import("..").TableConfig))>;
            renderTNode: (name: string, options?: import("../utils/render-tnode").OptionsType) => any;
            tableFullRowClasses: {
                base: string;
                innerFullRow: string;
                innerFullElement: string;
                firstFullRow: string;
                lastFullRow: string;
            };
            tbodyClasses: import("vue").ComputedRef<string[]>;
            tableBaseClass: {
                table: string;
                columnResizableTable: string;
                overflowVisible: string;
                body: string;
                content: string;
                topContent: string;
                bottomContent: string;
                paginationWrap: string;
                tdLastRow: string;
                tdFirstCol: string;
                thCellInner: string;
                tableRowEdit: string;
                cellEditable: string;
                cellEditWrap: string;
                bordered: string;
                striped: string;
                hover: string;
                loading: string;
                rowspanAndColspan: string;
                empty: string;
                emptyRow: string;
                headerFixed: string;
                columnFixed: string;
                widthOverflow: string;
                multipleHeader: string;
                footerAffixed: string;
                horizontalBarAffixed: string;
                affixedHeader: string;
                affixedHeaderElm: string;
                affixedFooterElm: string;
                affixedFooterWrap: string;
                scrollbarDivider: string;
                fullHeight: string;
                resizeLine: string;
                obviousScrollbar: string;
                affixedHeaderWrap: string;
            };
            skipSpansMap: import("vue").Ref<Map<string, import("./hooks/useRowspanAndColspan").SkipSpansValue>>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
            activeRowKeys?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowKeys"]>;
                default: import("./type").TdBaseTableProps["activeRowKeys"];
            };
            defaultActiveRowKeys?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["defaultActiveRowKeys"]>;
                default: () => import("./type").TdBaseTableProps["defaultActiveRowKeys"];
            };
            activeRowType?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowType"]>;
                default: import("./type").TdBaseTableProps["activeRowType"];
            };
            allowResizeColumnWidth?: {
                type: BooleanConstructor;
                default: any;
            };
            attach?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["attach"]>;
            };
            bordered?: BooleanConstructor;
            bottomContent?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["bottomContent"]>;
            };
            cellEmptyContent?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["cellEmptyContent"]>;
            };
            columns: import("vue").PropType<import("./type").BaseTableCol<import("./type").TableRowData>[]> | {
                type: import("vue").PropType<import("./type").TdBaseTableProps["columns"]>;
                default: () => import("./type").TdBaseTableProps["columns"];
            };
            data: import("vue").PropType<import("./type").TableRowData[]> | {
                type: import("vue").PropType<import("./type").TdBaseTableProps["data"]>;
                default: () => import("./type").TdBaseTableProps["data"];
            };
            disableDataPage?: BooleanConstructor;
            disableSpaceInactiveRow?: {
                type: BooleanConstructor;
                default: any;
            };
            empty?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["empty"]>;
                default: import("./type").TdBaseTableProps["empty"];
            };
            firstFullRow: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue)> | {
                type: import("vue").PropType<import("./type").TdBaseTableProps["firstFullRow"]>;
            };
            fixedRows?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["fixedRows"]>;
            };
            footData?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["footData"]>;
                default: () => import("./type").TdBaseTableProps["footData"];
            };
            footerAffixProps?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixProps"]>;
            };
            footerAffixedBottom?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixedBottom"]>;
                default: import("./type").TdBaseTableProps["footerAffixedBottom"];
            };
            footerSummary?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["footerSummary"]>;
            };
            headerAffixProps?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixProps"]>;
            };
            headerAffixedTop?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixedTop"]>;
                default: import("./type").TdBaseTableProps["headerAffixedTop"];
            };
            height?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["height"]>;
            };
            horizontalScrollAffixedBottom?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["horizontalScrollAffixedBottom"]>;
            };
            hover?: BooleanConstructor;
            keyboardRowHover?: {
                type: BooleanConstructor;
                default: boolean;
            };
            lastFullRow: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue)> | {
                type: import("vue").PropType<import("./type").TdBaseTableProps["lastFullRow"]>;
            };
            lazyLoad?: BooleanConstructor;
            loading?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["loading"]>;
                default: import("./type").TdBaseTableProps["loading"];
            };
            loadingProps?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["loadingProps"]>;
            };
            locale?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["locale"]>;
            };
            maxHeight?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["maxHeight"]>;
            };
            pagination?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["pagination"]>;
            };
            paginationAffixedBottom?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["paginationAffixedBottom"]>;
            };
            resizable?: BooleanConstructor;
            rowAttributes?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["rowAttributes"]>;
            };
            rowClassName?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["rowClassName"]>;
            };
            rowKey?: {
                type: StringConstructor;
                default: string;
                required: boolean;
            };
            rowspanAndColspan?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspan"]>;
            };
            rowspanAndColspanInFooter?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspanInFooter"]>;
            };
            scroll?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["scroll"]>;
            };
            showHeader?: {
                type: BooleanConstructor;
                default: boolean;
            };
            size?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["size"]>;
                validator(val: import("./type").TdBaseTableProps["size"]): boolean;
            };
            stripe?: BooleanConstructor;
            tableContentWidth?: {
                type: StringConstructor;
                default: string;
            };
            tableLayout?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["tableLayout"]>;
                default: import("./type").TdBaseTableProps["tableLayout"];
                validator(val: import("./type").TdBaseTableProps["tableLayout"]): boolean;
            };
            topContent?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["topContent"]>;
            };
            verticalAlign?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["verticalAlign"]>;
                default: import("./type").TdBaseTableProps["verticalAlign"];
                validator(val: import("./type").TdBaseTableProps["verticalAlign"]): boolean;
            };
            onActiveChange?: import("vue").PropType<import("./type").TdBaseTableProps["onActiveChange"]>;
            onActiveRowAction?: import("vue").PropType<import("./type").TdBaseTableProps["onActiveRowAction"]>;
            onCellClick?: import("vue").PropType<import("./type").TdBaseTableProps["onCellClick"]>;
            onColumnResizeChange?: import("vue").PropType<import("./type").TdBaseTableProps["onColumnResizeChange"]>;
            onPageChange?: import("vue").PropType<import("./type").TdBaseTableProps["onPageChange"]>;
            onRowClick?: import("vue").PropType<import("./type").TdBaseTableProps["onRowClick"]>;
            onRowDblclick?: import("vue").PropType<import("./type").TdBaseTableProps["onRowDblclick"]>;
            onRowMousedown?: import("vue").PropType<import("./type").TdBaseTableProps["onRowMousedown"]>;
            onRowMouseenter?: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseenter"]>;
            onRowMouseleave?: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseleave"]>;
            onRowMouseover?: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseover"]>;
            onRowMouseup?: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseup"]>;
            onScroll?: import("vue").PropType<import("./type").TdBaseTableProps["onScroll"]>;
            onScrollX?: import("vue").PropType<import("./type").TdBaseTableProps["onScrollX"]>;
            onScrollY?: import("vue").PropType<import("./type").TdBaseTableProps["onScrollY"]>;
            classPrefix: StringConstructor;
            ellipsisOverlayClassName: StringConstructor;
            rowAndColFixedPosition: import("vue").PropType<import("./tbody").TableBodyProps["rowAndColFixedPosition"]>;
            showColumnShadow: import("vue").PropType<import("./tbody").TableBodyProps["showColumnShadow"]>;
            tableElm: {};
            tableWidth: NumberConstructor;
            isWidthOverflow: BooleanConstructor;
            virtualConfig: import("vue").PropType<import("../hooks/useVirtualScrollNew").VirtualScrollConfig>;
            tableContentElm: {};
            handleRowMounted: import("vue").PropType<import("./tbody").TableBodyProps["handleRowMounted"]>;
            renderExpandedRow: import("vue").PropType<import("./tbody").TableBodyProps["renderExpandedRow"]>;
            activeRow: import("vue").PropType<Array<string | number>>;
            hoverRow: (NumberConstructor | StringConstructor)[];
        }>>, {
            loading?: boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
            empty?: string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
            hover?: boolean;
            tableLayout?: "auto" | "fixed";
            verticalAlign?: "top" | "middle" | "bottom";
            lazyLoad?: boolean;
            bordered?: boolean;
            stripe?: boolean;
            activeRowKeys?: (string | number)[];
            defaultActiveRowKeys?: (string | number)[];
            activeRowType?: "single" | "multiple";
            allowResizeColumnWidth?: boolean;
            disableDataPage?: boolean;
            disableSpaceInactiveRow?: boolean;
            footData?: import("./type").TableRowData[];
            footerAffixedBottom?: boolean | Partial<import("..").TdAffixProps>;
            headerAffixedTop?: boolean | Partial<import("..").TdAffixProps>;
            keyboardRowHover?: boolean;
            resizable?: boolean;
            rowKey?: string;
            showHeader?: boolean;
            tableContentWidth?: string;
            isWidthOverflow: boolean;
        }, true, {}, {}, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, Readonly<import("vue").ExtractPropTypes<{
            activeRowKeys?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowKeys"]>;
                default: import("./type").TdBaseTableProps["activeRowKeys"];
            };
            defaultActiveRowKeys?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["defaultActiveRowKeys"]>;
                default: () => import("./type").TdBaseTableProps["defaultActiveRowKeys"];
            };
            activeRowType?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowType"]>;
                default: import("./type").TdBaseTableProps["activeRowType"];
            };
            allowResizeColumnWidth?: {
                type: BooleanConstructor;
                default: any;
            };
            attach?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["attach"]>;
            };
            bordered?: BooleanConstructor;
            bottomContent?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["bottomContent"]>;
            };
            cellEmptyContent?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["cellEmptyContent"]>;
            };
            columns: import("vue").PropType<import("./type").BaseTableCol<import("./type").TableRowData>[]> | {
                type: import("vue").PropType<import("./type").TdBaseTableProps["columns"]>;
                default: () => import("./type").TdBaseTableProps["columns"];
            };
            data: import("vue").PropType<import("./type").TableRowData[]> | {
                type: import("vue").PropType<import("./type").TdBaseTableProps["data"]>;
                default: () => import("./type").TdBaseTableProps["data"];
            };
            disableDataPage?: BooleanConstructor;
            disableSpaceInactiveRow?: {
                type: BooleanConstructor;
                default: any;
            };
            empty?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["empty"]>;
                default: import("./type").TdBaseTableProps["empty"];
            };
            firstFullRow: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue)> | {
                type: import("vue").PropType<import("./type").TdBaseTableProps["firstFullRow"]>;
            };
            fixedRows?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["fixedRows"]>;
            };
            footData?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["footData"]>;
                default: () => import("./type").TdBaseTableProps["footData"];
            };
            footerAffixProps?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixProps"]>;
            };
            footerAffixedBottom?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixedBottom"]>;
                default: import("./type").TdBaseTableProps["footerAffixedBottom"];
            };
            footerSummary?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["footerSummary"]>;
            };
            headerAffixProps?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixProps"]>;
            };
            headerAffixedTop?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixedTop"]>;
                default: import("./type").TdBaseTableProps["headerAffixedTop"];
            };
            height?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["height"]>;
            };
            horizontalScrollAffixedBottom?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["horizontalScrollAffixedBottom"]>;
            };
            hover?: BooleanConstructor;
            keyboardRowHover?: {
                type: BooleanConstructor;
                default: boolean;
            };
            lastFullRow: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue)> | {
                type: import("vue").PropType<import("./type").TdBaseTableProps["lastFullRow"]>;
            };
            lazyLoad?: BooleanConstructor;
            loading?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["loading"]>;
                default: import("./type").TdBaseTableProps["loading"];
            };
            loadingProps?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["loadingProps"]>;
            };
            locale?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["locale"]>;
            };
            maxHeight?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["maxHeight"]>;
            };
            pagination?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["pagination"]>;
            };
            paginationAffixedBottom?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["paginationAffixedBottom"]>;
            };
            resizable?: BooleanConstructor;
            rowAttributes?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["rowAttributes"]>;
            };
            rowClassName?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["rowClassName"]>;
            };
            rowKey?: {
                type: StringConstructor;
                default: string;
                required: boolean;
            };
            rowspanAndColspan?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspan"]>;
            };
            rowspanAndColspanInFooter?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspanInFooter"]>;
            };
            scroll?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["scroll"]>;
            };
            showHeader?: {
                type: BooleanConstructor;
                default: boolean;
            };
            size?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["size"]>;
                validator(val: import("./type").TdBaseTableProps["size"]): boolean;
            };
            stripe?: BooleanConstructor;
            tableContentWidth?: {
                type: StringConstructor;
                default: string;
            };
            tableLayout?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["tableLayout"]>;
                default: import("./type").TdBaseTableProps["tableLayout"];
                validator(val: import("./type").TdBaseTableProps["tableLayout"]): boolean;
            };
            topContent?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["topContent"]>;
            };
            verticalAlign?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["verticalAlign"]>;
                default: import("./type").TdBaseTableProps["verticalAlign"];
                validator(val: import("./type").TdBaseTableProps["verticalAlign"]): boolean;
            };
            onActiveChange?: import("vue").PropType<import("./type").TdBaseTableProps["onActiveChange"]>;
            onActiveRowAction?: import("vue").PropType<import("./type").TdBaseTableProps["onActiveRowAction"]>;
            onCellClick?: import("vue").PropType<import("./type").TdBaseTableProps["onCellClick"]>;
            onColumnResizeChange?: import("vue").PropType<import("./type").TdBaseTableProps["onColumnResizeChange"]>;
            onPageChange?: import("vue").PropType<import("./type").TdBaseTableProps["onPageChange"]>;
            onRowClick?: import("vue").PropType<import("./type").TdBaseTableProps["onRowClick"]>;
            onRowDblclick?: import("vue").PropType<import("./type").TdBaseTableProps["onRowDblclick"]>;
            onRowMousedown?: import("vue").PropType<import("./type").TdBaseTableProps["onRowMousedown"]>;
            onRowMouseenter?: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseenter"]>;
            onRowMouseleave?: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseleave"]>;
            onRowMouseover?: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseover"]>;
            onRowMouseup?: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseup"]>;
            onScroll?: import("vue").PropType<import("./type").TdBaseTableProps["onScroll"]>;
            onScrollX?: import("vue").PropType<import("./type").TdBaseTableProps["onScrollX"]>;
            onScrollY?: import("vue").PropType<import("./type").TdBaseTableProps["onScrollY"]>;
            classPrefix: StringConstructor;
            ellipsisOverlayClassName: StringConstructor;
            rowAndColFixedPosition: import("vue").PropType<import("./tbody").TableBodyProps["rowAndColFixedPosition"]>;
            showColumnShadow: import("vue").PropType<import("./tbody").TableBodyProps["showColumnShadow"]>;
            tableElm: {};
            tableWidth: NumberConstructor;
            isWidthOverflow: BooleanConstructor;
            virtualConfig: import("vue").PropType<import("../hooks/useVirtualScrollNew").VirtualScrollConfig>;
            tableContentElm: {};
            handleRowMounted: import("vue").PropType<import("./tbody").TableBodyProps["handleRowMounted"]>;
            renderExpandedRow: import("vue").PropType<import("./tbody").TableBodyProps["renderExpandedRow"]>;
            activeRow: import("vue").PropType<Array<string | number>>;
            hoverRow: (NumberConstructor | StringConstructor)[];
        }>>, {
            t: <T>(pattern: T, ...args: any[]) => any;
            globalConfig: import("vue").ComputedRef<{} & (import("..").TableConfig | ({
                readonly expandIcon: any;
                readonly sortIcon: any;
                readonly filterIcon: any;
                readonly treeExpandAndFoldIcon: any;
                readonly hideSortTips: false;
                readonly size: "medium";
            } & {
                readonly empty: "暂无数据";
                readonly loadingText: "正在加载中，请稍后";
                readonly loadingMoreText: "点击加载更多";
                readonly filterInputPlaceholder: "请输入内容（无默认值）";
                readonly sortAscendingOperationText: "点击升序";
                readonly sortCancelOperationText: "点击取消排序";
                readonly sortDescendingOperationText: "点击降序";
                readonly clearFilterResultButtonText: "清空筛选";
                readonly columnConfigButtonText: "列配置";
                readonly columnConfigTitleText: "表格列配置";
                readonly columnConfigDescriptionText: "请选择需要在表格中显示的数据列";
                readonly confirmText: "确认";
                readonly cancelText: "取消";
                readonly resetText: "重置";
                readonly selectAllText: "全选";
                readonly searchResultText: "搜索“{result}”，找到 {count} 条结果";
            } & import("..").TableConfig))>;
            renderTNode: (name: string, options?: import("../utils/render-tnode").OptionsType) => any;
            tableFullRowClasses: {
                base: string;
                innerFullRow: string;
                innerFullElement: string;
                firstFullRow: string;
                lastFullRow: string;
            };
            tbodyClasses: import("vue").ComputedRef<string[]>;
            tableBaseClass: {
                table: string;
                columnResizableTable: string;
                overflowVisible: string;
                body: string;
                content: string;
                topContent: string;
                bottomContent: string;
                paginationWrap: string;
                tdLastRow: string;
                tdFirstCol: string;
                thCellInner: string;
                tableRowEdit: string;
                cellEditable: string;
                cellEditWrap: string;
                bordered: string;
                striped: string;
                hover: string;
                loading: string;
                rowspanAndColspan: string;
                empty: string;
                emptyRow: string;
                headerFixed: string;
                columnFixed: string;
                widthOverflow: string;
                multipleHeader: string;
                footerAffixed: string;
                horizontalBarAffixed: string;
                affixedHeader: string;
                affixedHeaderElm: string;
                affixedFooterElm: string;
                affixedFooterWrap: string;
                scrollbarDivider: string;
                fullHeight: string;
                resizeLine: string;
                obviousScrollbar: string;
                affixedHeaderWrap: string;
            };
            skipSpansMap: import("vue").Ref<Map<string, import("./hooks/useRowspanAndColspan").SkipSpansValue>>;
        }, {}, {}, {}, {
            loading?: boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
            empty?: string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
            hover?: boolean;
            tableLayout?: "auto" | "fixed";
            verticalAlign?: "top" | "middle" | "bottom";
            lazyLoad?: boolean;
            bordered?: boolean;
            stripe?: boolean;
            activeRowKeys?: (string | number)[];
            defaultActiveRowKeys?: (string | number)[];
            activeRowType?: "single" | "multiple";
            allowResizeColumnWidth?: boolean;
            disableDataPage?: boolean;
            disableSpaceInactiveRow?: boolean;
            footData?: import("./type").TableRowData[];
            footerAffixedBottom?: boolean | Partial<import("..").TdAffixProps>;
            headerAffixedTop?: boolean | Partial<import("..").TdAffixProps>;
            keyboardRowHover?: boolean;
            resizable?: boolean;
            rowKey?: string;
            showHeader?: boolean;
            tableContentWidth?: string;
            isWidthOverflow: boolean;
        }>>;
        virtualConfig: {
            visibleData: import("vue").Ref<any[]>;
            translateY: import("vue").Ref<number>;
            scrollHeight: import("vue").Ref<number>;
            isVirtualScroll: import("vue").ComputedRef<boolean>;
            handleScroll: () => void;
            handleRowMounted: (rowData: any) => void;
            scrollToElement: (p: import("../hooks/useVirtualScrollNew").ScrollToElementParams) => void;
        };
        showAffixPagination: import("vue").Ref<boolean>;
        tActiveRow: import("vue").Ref<(string | number)[]>;
        hoverRow: import("vue").Ref<string | number>;
        showElement: import("vue").Ref<boolean>;
        scrollToElement: (params: import("..").ComponentScrollToElementParams) => void;
        renderPagination: () => JSX.Element;
        renderTNode: (name: string, options?: import("../utils/render-tnode").OptionsType) => any;
        onFixedChange: () => void;
        onHorizontalScroll: (scrollElement?: HTMLElement) => void;
        updateAffixHeaderOrFooter: () => void;
        onInnerVirtualScroll: (e: WheelEvent) => void;
        refreshTable: () => void;
        scrollColumnIntoView: (colKey: string) => void;
        onTableFocus: () => void;
        onTableBlur: () => void;
        onInnerRowClick: (context: import("./type").RowEventContext<import("./type").TableRowData>) => void;
        paginationAffixRef: import("vue").Ref<any>;
        horizontalScrollAffixRef: import("vue").Ref<any>;
        headerTopAffixRef: import("vue").Ref<any>;
        footerBottomAffixRef: import("vue").Ref<any>;
        tableRefTabIndex: import("vue").Ref<number>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        renderExpandedRow: import("vue").PropType<import("./interface").BaseTableProps["renderExpandedRow"]>;
        onLeafColumnsChange: import("vue").PropType<import("./interface").BaseTableProps["onLeafColumnsChange"]>;
        thDraggable: BooleanConstructor;
        activeRowKeys: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowKeys"]>;
            default: import("./type").TdBaseTableProps["activeRowKeys"];
        };
        defaultActiveRowKeys: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["defaultActiveRowKeys"]>;
            default: () => import("./type").TdBaseTableProps["defaultActiveRowKeys"];
        };
        activeRowType: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowType"]>;
            default: import("./type").TdBaseTableProps["activeRowType"];
        };
        allowResizeColumnWidth: {
            type: BooleanConstructor;
            default: any;
        };
        attach: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["attach"]>;
        };
        bordered: BooleanConstructor;
        bottomContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["bottomContent"]>;
        };
        cellEmptyContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["cellEmptyContent"]>;
        };
        columns: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["columns"]>;
            default: () => import("./type").TdBaseTableProps["columns"];
        };
        data: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["data"]>;
            default: () => import("./type").TdBaseTableProps["data"];
        };
        disableDataPage: BooleanConstructor;
        disableSpaceInactiveRow: {
            type: BooleanConstructor;
            default: any;
        };
        empty: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["empty"]>;
            default: import("./type").TdBaseTableProps["empty"];
        };
        firstFullRow: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["firstFullRow"]>;
        };
        fixedRows: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["fixedRows"]>;
        };
        footData: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footData"]>;
            default: () => import("./type").TdBaseTableProps["footData"];
        };
        footerAffixProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixProps"]>;
        };
        footerAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixedBottom"]>;
            default: import("./type").TdBaseTableProps["footerAffixedBottom"];
        };
        footerSummary: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerSummary"]>;
        };
        headerAffixProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixProps"]>;
        };
        headerAffixedTop: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixedTop"]>;
            default: import("./type").TdBaseTableProps["headerAffixedTop"];
        };
        height: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["height"]>;
        };
        horizontalScrollAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["horizontalScrollAffixedBottom"]>;
        };
        hover: BooleanConstructor;
        keyboardRowHover: {
            type: BooleanConstructor;
            default: boolean;
        };
        lastFullRow: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["lastFullRow"]>;
        };
        lazyLoad: BooleanConstructor;
        loading: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["loading"]>;
            default: import("./type").TdBaseTableProps["loading"];
        };
        loadingProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["loadingProps"]>;
        };
        locale: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["locale"]>;
        };
        maxHeight: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["maxHeight"]>;
        };
        pagination: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["pagination"]>;
        };
        paginationAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["paginationAffixedBottom"]>;
        };
        resizable: BooleanConstructor;
        rowAttributes: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowAttributes"]>;
        };
        rowClassName: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowClassName"]>;
        };
        rowKey: {
            type: StringConstructor;
            default: string;
            required: boolean;
        };
        rowspanAndColspan: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspan"]>;
        };
        rowspanAndColspanInFooter: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspanInFooter"]>;
        };
        scroll: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["scroll"]>;
        };
        showHeader: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["size"]>;
            validator(val: import("./type").TdBaseTableProps["size"]): boolean;
        };
        stripe: BooleanConstructor;
        tableContentWidth: {
            type: StringConstructor;
            default: string;
        };
        tableLayout: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["tableLayout"]>;
            default: import("./type").TdBaseTableProps["tableLayout"];
            validator(val: import("./type").TdBaseTableProps["tableLayout"]): boolean;
        };
        topContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["topContent"]>;
        };
        verticalAlign: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["verticalAlign"]>;
            default: import("./type").TdBaseTableProps["verticalAlign"];
            validator(val: import("./type").TdBaseTableProps["verticalAlign"]): boolean;
        };
        onActiveChange: import("vue").PropType<import("./type").TdBaseTableProps["onActiveChange"]>;
        onActiveRowAction: import("vue").PropType<import("./type").TdBaseTableProps["onActiveRowAction"]>;
        onCellClick: import("vue").PropType<import("./type").TdBaseTableProps["onCellClick"]>;
        onColumnResizeChange: import("vue").PropType<import("./type").TdBaseTableProps["onColumnResizeChange"]>;
        onPageChange: import("vue").PropType<import("./type").TdBaseTableProps["onPageChange"]>;
        onRowClick: import("vue").PropType<import("./type").TdBaseTableProps["onRowClick"]>;
        onRowDblclick: import("vue").PropType<import("./type").TdBaseTableProps["onRowDblclick"]>;
        onRowMousedown: import("vue").PropType<import("./type").TdBaseTableProps["onRowMousedown"]>;
        onRowMouseenter: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseenter"]>;
        onRowMouseleave: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseleave"]>;
        onRowMouseover: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseover"]>;
        onRowMouseup: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseup"]>;
        onScroll: import("vue").PropType<import("./type").TdBaseTableProps["onScroll"]>;
        onScrollX: import("vue").PropType<import("./type").TdBaseTableProps["onScrollX"]>;
        onScrollY: import("vue").PropType<import("./type").TdBaseTableProps["onScrollY"]>;
    }>>, {
        loading: boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        data: import("./type").TableRowData[];
        empty: string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        hover: boolean;
        tableLayout: "auto" | "fixed";
        verticalAlign: "top" | "middle" | "bottom";
        columns: import("./type").BaseTableCol<import("./type").TableRowData>[];
        lazyLoad: boolean;
        bordered: boolean;
        stripe: boolean;
        activeRowKeys: (string | number)[];
        defaultActiveRowKeys: (string | number)[];
        activeRowType: "single" | "multiple";
        allowResizeColumnWidth: boolean;
        disableDataPage: boolean;
        disableSpaceInactiveRow: boolean;
        footData: import("./type").TableRowData[];
        footerAffixedBottom: boolean | Partial<import("..").TdAffixProps>;
        headerAffixedTop: boolean | Partial<import("..").TdAffixProps>;
        keyboardRowHover: boolean;
        resizable: boolean;
        rowKey: string;
        showHeader: boolean;
        tableContentWidth: string;
        thDraggable: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        renderExpandedRow: import("vue").PropType<import("./interface").BaseTableProps["renderExpandedRow"]>;
        onLeafColumnsChange: import("vue").PropType<import("./interface").BaseTableProps["onLeafColumnsChange"]>;
        thDraggable: BooleanConstructor;
        activeRowKeys: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowKeys"]>;
            default: import("./type").TdBaseTableProps["activeRowKeys"];
        };
        defaultActiveRowKeys: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["defaultActiveRowKeys"]>;
            default: () => import("./type").TdBaseTableProps["defaultActiveRowKeys"];
        };
        activeRowType: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowType"]>;
            default: import("./type").TdBaseTableProps["activeRowType"];
        };
        allowResizeColumnWidth: {
            type: BooleanConstructor;
            default: any;
        };
        attach: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["attach"]>;
        };
        bordered: BooleanConstructor;
        bottomContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["bottomContent"]>;
        };
        cellEmptyContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["cellEmptyContent"]>;
        };
        columns: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["columns"]>;
            default: () => import("./type").TdBaseTableProps["columns"];
        };
        data: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["data"]>;
            default: () => import("./type").TdBaseTableProps["data"];
        };
        disableDataPage: BooleanConstructor;
        disableSpaceInactiveRow: {
            type: BooleanConstructor;
            default: any;
        };
        empty: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["empty"]>;
            default: import("./type").TdBaseTableProps["empty"];
        };
        firstFullRow: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["firstFullRow"]>;
        };
        fixedRows: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["fixedRows"]>;
        };
        footData: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footData"]>;
            default: () => import("./type").TdBaseTableProps["footData"];
        };
        footerAffixProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixProps"]>;
        };
        footerAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixedBottom"]>;
            default: import("./type").TdBaseTableProps["footerAffixedBottom"];
        };
        footerSummary: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerSummary"]>;
        };
        headerAffixProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixProps"]>;
        };
        headerAffixedTop: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixedTop"]>;
            default: import("./type").TdBaseTableProps["headerAffixedTop"];
        };
        height: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["height"]>;
        };
        horizontalScrollAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["horizontalScrollAffixedBottom"]>;
        };
        hover: BooleanConstructor;
        keyboardRowHover: {
            type: BooleanConstructor;
            default: boolean;
        };
        lastFullRow: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["lastFullRow"]>;
        };
        lazyLoad: BooleanConstructor;
        loading: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["loading"]>;
            default: import("./type").TdBaseTableProps["loading"];
        };
        loadingProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["loadingProps"]>;
        };
        locale: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["locale"]>;
        };
        maxHeight: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["maxHeight"]>;
        };
        pagination: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["pagination"]>;
        };
        paginationAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["paginationAffixedBottom"]>;
        };
        resizable: BooleanConstructor;
        rowAttributes: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowAttributes"]>;
        };
        rowClassName: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowClassName"]>;
        };
        rowKey: {
            type: StringConstructor;
            default: string;
            required: boolean;
        };
        rowspanAndColspan: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspan"]>;
        };
        rowspanAndColspanInFooter: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspanInFooter"]>;
        };
        scroll: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["scroll"]>;
        };
        showHeader: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["size"]>;
            validator(val: import("./type").TdBaseTableProps["size"]): boolean;
        };
        stripe: BooleanConstructor;
        tableContentWidth: {
            type: StringConstructor;
            default: string;
        };
        tableLayout: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["tableLayout"]>;
            default: import("./type").TdBaseTableProps["tableLayout"];
            validator(val: import("./type").TdBaseTableProps["tableLayout"]): boolean;
        };
        topContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["topContent"]>;
        };
        verticalAlign: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["verticalAlign"]>;
            default: import("./type").TdBaseTableProps["verticalAlign"];
            validator(val: import("./type").TdBaseTableProps["verticalAlign"]): boolean;
        };
        onActiveChange: import("vue").PropType<import("./type").TdBaseTableProps["onActiveChange"]>;
        onActiveRowAction: import("vue").PropType<import("./type").TdBaseTableProps["onActiveRowAction"]>;
        onCellClick: import("vue").PropType<import("./type").TdBaseTableProps["onCellClick"]>;
        onColumnResizeChange: import("vue").PropType<import("./type").TdBaseTableProps["onColumnResizeChange"]>;
        onPageChange: import("vue").PropType<import("./type").TdBaseTableProps["onPageChange"]>;
        onRowClick: import("vue").PropType<import("./type").TdBaseTableProps["onRowClick"]>;
        onRowDblclick: import("vue").PropType<import("./type").TdBaseTableProps["onRowDblclick"]>;
        onRowMousedown: import("vue").PropType<import("./type").TdBaseTableProps["onRowMousedown"]>;
        onRowMouseenter: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseenter"]>;
        onRowMouseleave: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseleave"]>;
        onRowMouseover: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseover"]>;
        onRowMouseup: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseup"]>;
        onScroll: import("vue").PropType<import("./type").TdBaseTableProps["onScroll"]>;
        onScrollX: import("vue").PropType<import("./type").TdBaseTableProps["onScrollX"]>;
        onScrollY: import("vue").PropType<import("./type").TdBaseTableProps["onScrollY"]>;
    }>>, {
        thList: import("vue").ComputedRef<import("./interface").BaseTableColumns[]>;
        classPrefix: string;
        innerPagination: import("vue").Ref<{
            current?: number;
            defaultCurrent?: number;
            modelValue?: number;
            disabled?: boolean;
            foldedMaxPageBtn?: number;
            maxPageBtn?: number;
            pageEllipsisMode?: "mid" | "both-ends";
            pageSize?: number;
            defaultPageSize?: number;
            pageSizeOptions?: (number | {
                label: string;
                value: number;
            })[];
            selectProps?: {
                autoWidth?: boolean;
                autofocus?: boolean;
                borderless?: boolean;
                clearable?: boolean;
                collapsedItems?: (h: typeof import("vue").h, props: {
                    value: import("..").SelectOption[];
                    collapsedSelectedItems: import("..").SelectOption[];
                    count: number;
                    onClose: (context: {
                        index: number;
                        e?: MouseEvent;
                    }) => void;
                }) => import("..").TNodeReturnValue;
                creatable?: boolean;
                disabled?: boolean;
                empty?: string | import("..").TNode;
                filter?: (filterWords: string, option: import("..").SelectOption) => boolean | Promise<boolean>;
                filterable?: boolean;
                inputProps?: {
                    align?: "left" | "center" | "right";
                    allowInputOverMax?: boolean;
                    autoWidth?: boolean;
                    autocomplete?: string;
                    autofocus?: boolean;
                    borderless?: boolean;
                    clearable?: boolean;
                    disabled?: boolean;
                    format?: import("..").InputFormatType;
                    inputClass?: any;
                    label?: string | import("..").TNode;
                    maxcharacter?: number;
                    maxlength?: string | number;
                    name?: string;
                    placeholder?: string;
                    prefixIcon?: import("..").TNode;
                    readonly?: boolean;
                    showClearIconOnEmpty?: boolean;
                    showLimitNumber?: boolean;
                    size?: import("..").SizeEnum;
                    spellCheck?: boolean;
                    status?: "default" | "success" | "warning" | "error";
                    suffix?: string | import("..").TNode;
                    suffixIcon?: import("..").TNode;
                    tips?: string | import("..").TNode;
                    type?: "text" | "number" | "url" | "tel" | "password" | "search" | "submit" | "hidden";
                    value?: import("..").InputValue;
                    defaultValue?: import("..").InputValue;
                    modelValue?: import("..").InputValue;
                    onBlur?: (value: import("..").InputValue, context: {
                        e: FocusEvent;
                    }) => void;
                    onChange?: (value: import("..").InputValue, context?: {
                        e?: InputEvent | MouseEvent | CompositionEvent;
                        trigger: "input" | "initial" | "clear";
                    }) => void;
                    onClear?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onClick?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onCompositionend?: (value: string, context: {
                        e: CompositionEvent;
                    }) => void;
                    onCompositionstart?: (value: string, context: {
                        e: CompositionEvent;
                    }) => void;
                    onEnter?: (value: import("..").InputValue, context: {
                        e: KeyboardEvent;
                    }) => void;
                    onFocus?: (value: import("..").InputValue, context: {
                        e: FocusEvent;
                    }) => void;
                    onKeydown?: (value: import("..").InputValue, context: {
                        e: KeyboardEvent;
                    }) => void;
                    onKeypress?: (value: import("..").InputValue, context: {
                        e: KeyboardEvent;
                    }) => void;
                    onKeyup?: (value: import("..").InputValue, context: {
                        e: KeyboardEvent;
                    }) => void;
                    onMouseenter?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onMouseleave?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onPaste?: (context: {
                        e: ClipboardEvent;
                        pasteValue: string;
                    }) => void;
                    onValidate?: (context: {
                        error?: "exceed-maximum" | "below-minimum";
                    }) => void;
                    onWheel?: (context: {
                        e: WheelEvent;
                    }) => void;
                };
                inputValue?: string;
                defaultInputValue?: string;
                keys?: {
                    value?: string;
                    label?: string;
                    disabled?: string;
                };
                label?: string | import("..").TNode;
                loading?: boolean;
                loadingText?: string | import("..").TNode;
                max?: number;
                minCollapsedNum?: number;
                multiple?: boolean;
                options?: (import("..").PlainObject | {
                    checkAll?: boolean;
                    content?: string | import("..").TNode;
                    default?: string | import("..").TNode;
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number | boolean;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | import("..").TNode;
                        default?: string | import("..").TNode;
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number | boolean;
                    }[];
                    divider?: boolean;
                    label?: string;
                })[];
                panelBottomContent?: string | import("..").TNode;
                panelTopContent?: string | import("..").TNode;
                placeholder?: string;
                popupProps?: {
                    attach?: import("..").AttachNode;
                    content?: string | import("..").TNode;
                    default?: string | import("..").TNode;
                    delay?: number | Array<number>;
                    destroyOnClose?: boolean;
                    disabled?: boolean;
                    hideEmptyPopup?: boolean;
                    overlayClassName?: any;
                    overlayInnerClassName?: any;
                    overlayInnerStyle?: import("..").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("..").Styles);
                    overlayStyle?: import("..").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("..").Styles);
                    placement?: import("..").PopupPlacement;
                    popperOptions?: object;
                    showArrow?: boolean;
                    trigger?: "hover" | "click" | "focus" | "mousedown" | "context-menu";
                    triggerElement?: string | import("..").TNode;
                    visible?: boolean;
                    defaultVisible?: boolean;
                    modelValue?: boolean;
                    zIndex?: number;
                    onOverlayClick?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onScroll?: (context: {
                        e: WheelEvent;
                    }) => void;
                    onScrollToBottom?: (context: {
                        e: WheelEvent;
                    }) => void;
                    onVisibleChange?: (visible: boolean, context: import("..").PopupVisibleChangeContext) => void;
                };
                popupVisible?: boolean;
                defaultPopupVisible?: boolean;
                prefixIcon?: import("..").TNode;
                readonly?: boolean;
                reserveKeyword?: boolean;
                scroll?: {
                    bufferSize?: number;
                    isFixedRowHeight?: boolean;
                    rowHeight?: number;
                    threshold?: number;
                    type: "lazy" | "virtual";
                };
                selectInputProps?: {
                    allowInput?: boolean;
                    autoWidth?: boolean;
                    autofocus?: boolean;
                    borderless?: boolean;
                    clearable?: boolean;
                    collapsedItems?: import("..").TNode<{
                        value: import("..").SelectInputValue;
                        collapsedSelectedItems: import("..").SelectInputValue;
                        count: number;
                        onClose: (context: {
                            index: number;
                            e?: MouseEvent;
                        }) => void;
                    }>;
                    disabled?: boolean;
                    inputProps?: {
                        align?: "left" | "center" | "right";
                        allowInputOverMax?: boolean;
                        autoWidth?: boolean;
                        autocomplete?: string;
                        autofocus?: boolean;
                        borderless?: boolean;
                        clearable?: boolean;
                        disabled?: boolean;
                        format?: import("..").InputFormatType;
                        inputClass?: any;
                        label?: string | import("..").TNode;
                        maxcharacter?: number;
                        maxlength?: string | number;
                        name?: string;
                        placeholder?: string;
                        prefixIcon?: import("..").TNode;
                        readonly?: boolean;
                        showClearIconOnEmpty?: boolean;
                        showLimitNumber?: boolean;
                        size?: import("..").SizeEnum;
                        spellCheck?: boolean;
                        status?: "default" | "success" | "warning" | "error";
                        suffix?: string | import("..").TNode;
                        suffixIcon?: import("..").TNode;
                        tips?: string | import("..").TNode;
                        type?: "text" | "number" | "url" | "tel" | "password" | "search" | "submit" | "hidden";
                        value?: import("..").InputValue;
                        defaultValue?: import("..").InputValue;
                        modelValue?: import("..").InputValue;
                        onBlur?: (value: import("..").InputValue, context: {
                            e: FocusEvent;
                        }) => void;
                        onChange?: (value: import("..").InputValue, context?: {
                            e?: InputEvent | MouseEvent | CompositionEvent;
                            trigger: "input" | "initial" | "clear";
                        }) => void;
                        onClear?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onClick?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onCompositionend?: (value: string, context: {
                            e: CompositionEvent;
                        }) => void;
                        onCompositionstart?: (value: string, context: {
                            e: CompositionEvent;
                        }) => void;
                        onEnter?: (value: import("..").InputValue, context: {
                            e: KeyboardEvent;
                        }) => void;
                        onFocus?: (value: import("..").InputValue, context: {
                            e: FocusEvent;
                        }) => void;
                        onKeydown?: (value: import("..").InputValue, context: {
                            e: KeyboardEvent;
                        }) => void;
                        onKeypress?: (value: import("..").InputValue, context: {
                            e: KeyboardEvent;
                        }) => void;
                        onKeyup?: (value: import("..").InputValue, context: {
                            e: KeyboardEvent;
                        }) => void;
                        onMouseenter?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onMouseleave?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onPaste?: (context: {
                            e: ClipboardEvent;
                            pasteValue: string;
                        }) => void;
                        onValidate?: (context: {
                            error?: "exceed-maximum" | "below-minimum";
                        }) => void;
                        onWheel?: (context: {
                            e: WheelEvent;
                        }) => void;
                    };
                    inputValue?: string;
                    defaultInputValue?: string;
                    keys?: {
                        label?: string;
                        value?: string;
                        children?: string;
                    };
                    label?: string | import("..").TNode;
                    loading?: boolean;
                    minCollapsedNum?: number;
                    multiple?: boolean;
                    panel?: string | import("..").TNode;
                    placeholder?: string;
                    popupProps?: {
                        attach?: import("..").AttachNode;
                        content?: string | import("..").TNode;
                        default?: string | import("..").TNode;
                        delay?: number | Array<number>;
                        destroyOnClose?: boolean;
                        disabled?: boolean;
                        hideEmptyPopup?: boolean;
                        overlayClassName?: any;
                        overlayInnerClassName?: any;
                        overlayInnerStyle?: import("..").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("..").Styles);
                        overlayStyle?: import("..").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("..").Styles);
                        placement?: import("..").PopupPlacement;
                        popperOptions?: object;
                        showArrow?: boolean;
                        trigger?: "hover" | "click" | "focus" | "mousedown" | "context-menu";
                        triggerElement?: string | import("..").TNode;
                        visible?: boolean;
                        defaultVisible?: boolean;
                        modelValue?: boolean;
                        zIndex?: number;
                        onOverlayClick?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onScroll?: (context: {
                            e: WheelEvent;
                        }) => void;
                        onScrollToBottom?: (context: {
                            e: WheelEvent;
                        }) => void;
                        onVisibleChange?: (visible: boolean, context: import("..").PopupVisibleChangeContext) => void;
                    };
                    popupVisible?: boolean;
                    defaultPopupVisible?: boolean;
                    prefixIcon?: import("..").TNode;
                    readonly?: boolean;
                    reserveKeyword?: boolean;
                    size?: import("..").SizeEnum;
                    status?: "default" | "success" | "warning" | "error";
                    suffix?: string | import("..").TNode;
                    suffixIcon?: import("..").TNode;
                    tag?: string | import("..").TNode<{
                        value: string | number;
                    }>;
                    tagInputProps?: {
                        autoWidth?: boolean;
                        borderless?: boolean;
                        clearable?: boolean;
                        collapsedItems?: import("..").TNode<{
                            value: import("..").TagInputValue;
                            collapsedSelectedItems: import("..").TagInputValue;
                            count: number;
                            onClose: (context: {
                                index: number;
                                e?: MouseEvent;
                            }) => void;
                        }>;
                        disabled?: boolean;
                        dragSort?: boolean;
                        excessTagsDisplayType?: "scroll" | "break-line";
                        inputProps?: {
                            align?: "left" | "center" | "right";
                            allowInputOverMax?: boolean;
                            autoWidth?: boolean;
                            autocomplete?: string;
                            autofocus?: boolean;
                            borderless?: boolean;
                            clearable?: boolean;
                            disabled?: boolean;
                            format?: import("..").InputFormatType;
                            inputClass?: any;
                            label?: string | import("..").TNode;
                            maxcharacter?: number;
                            maxlength?: string | number;
                            name?: string;
                            placeholder?: string;
                            prefixIcon?: import("..").TNode;
                            readonly?: boolean;
                            showClearIconOnEmpty?: boolean;
                            showLimitNumber?: boolean;
                            size?: import("..").SizeEnum;
                            spellCheck?: boolean;
                            status?: "default" | "success" | "warning" | "error";
                            suffix?: string | import("..").TNode;
                            suffixIcon?: import("..").TNode;
                            tips?: string | import("..").TNode;
                            type?: "text" | "number" | "url" | "tel" | "password" | "search" | "submit" | "hidden";
                            value?: import("..").InputValue;
                            defaultValue?: import("..").InputValue;
                            modelValue?: import("..").InputValue;
                            onBlur?: (value: import("..").InputValue, context: {
                                e: FocusEvent;
                            }) => void;
                            onChange?: (value: import("..").InputValue, context?: {
                                e?: InputEvent | MouseEvent | CompositionEvent;
                                trigger: "input" | "initial" | "clear";
                            }) => void;
                            onClear?: (context: {
                                e: MouseEvent;
                            }) => void;
                            onClick?: (context: {
                                e: MouseEvent;
                            }) => void;
                            onCompositionend?: (value: string, context: {
                                e: CompositionEvent;
                            }) => void;
                            onCompositionstart?: (value: string, context: {
                                e: CompositionEvent;
                            }) => void;
                            onEnter?: (value: import("..").InputValue, context: {
                                e: KeyboardEvent;
                            }) => void;
                            onFocus?: (value: import("..").InputValue, context: {
                                e: FocusEvent;
                            }) => void;
                            onKeydown?: (value: import("..").InputValue, context: {
                                e: KeyboardEvent;
                            }) => void;
                            onKeypress?: (value: import("..").InputValue, context: {
                                e: KeyboardEvent;
                            }) => void;
                            onKeyup?: (value: import("..").InputValue, context: {
                                e: KeyboardEvent;
                            }) => void;
                            onMouseenter?: (context: {
                                e: MouseEvent;
                            }) => void;
                            onMouseleave?: (context: {
                                e: MouseEvent;
                            }) => void;
                            onPaste?: (context: {
                                e: ClipboardEvent;
                                pasteValue: string;
                            }) => void;
                            onValidate?: (context: {
                                error?: "exceed-maximum" | "below-minimum";
                            }) => void;
                            onWheel?: (context: {
                                e: WheelEvent;
                            }) => void;
                        };
                        inputValue?: string;
                        defaultInputValue?: string;
                        label?: string | import("..").TNode;
                        max?: number;
                        minCollapsedNum?: number;
                        placeholder?: string;
                        prefixIcon?: import("..").TNode;
                        readonly?: boolean;
                        size?: import("..").SizeEnum;
                        status?: "default" | "success" | "warning" | "error";
                        suffix?: string | import("..").TNode;
                        suffixIcon?: import("..").TNode;
                        tag?: string | import("..").TNode<{
                            value: string | number;
                        }>;
                        tagProps?: {
                            closable?: boolean;
                            color?: string;
                            content?: string | import("..").TNode;
                            default?: string | import("..").TNode;
                            disabled?: boolean;
                            icon?: import("..").TNode;
                            maxWidth?: string | number;
                            shape?: "square" | "round" | "mark";
                            size?: import("..").SizeEnum;
                            theme?: "default" | "primary" | "warning" | "danger" | "success";
                            title?: string;
                            variant?: "dark" | "light" | "outline" | "light-outline";
                            onClick?: (context: {
                                e: MouseEvent;
                            }) => void;
                            onClose?: (context: {
                                e: MouseEvent;
                            }) => void;
                        };
                        tips?: string | import("..").TNode;
                        value?: (string | number)[];
                        defaultValue?: (string | number)[];
                        modelValue?: (string | number)[];
                        valueDisplay?: string | import("..").TNode<{
                            value: import("..").TagInputValue;
                            onClose: (index: number, item?: any) => void;
                        }>;
                        onBlur?: (value: import("..").TagInputValue, context: {
                            inputValue: string;
                            e: FocusEvent;
                        }) => void;
                        onChange?: (value: import("..").TagInputValue, context: import("..").TagInputChangeContext) => void;
                        onClear?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onClick?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onDragSort?: (context: import("..").TagInputDragSortContext) => void;
                        onEnter?: (value: import("..").TagInputValue, context: {
                            e: KeyboardEvent;
                            inputValue: string;
                        }) => void;
                        onFocus?: (value: import("..").TagInputValue, context: {
                            inputValue: string;
                            e: FocusEvent;
                        }) => void;
                        onInputChange?: (value: string, context?: import("..").InputValueChangeContext) => void;
                        onMouseenter?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onMouseleave?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onPaste?: (context: {
                            e: ClipboardEvent;
                            pasteValue: string;
                        }) => void;
                        onRemove?: (context: import("..").TagInputRemoveContext) => void;
                    };
                    tagProps?: {
                        closable?: boolean;
                        color?: string;
                        content?: string | import("..").TNode;
                        default?: string | import("..").TNode;
                        disabled?: boolean;
                        icon?: import("..").TNode;
                        maxWidth?: string | number;
                        shape?: "square" | "round" | "mark";
                        size?: import("..").SizeEnum;
                        theme?: "default" | "primary" | "warning" | "danger" | "success";
                        title?: string;
                        variant?: "dark" | "light" | "outline" | "light-outline";
                        onClick?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onClose?: (context: {
                            e: MouseEvent;
                        }) => void;
                    };
                    tips?: string | import("..").TNode;
                    value?: any;
                    valueDisplay?: string | import("..").TNode<{
                        value: import("..").TagInputValue;
                        onClose: (index: number, item?: any) => void;
                    }>;
                    onBlur?: (value: import("..").SelectInputValue, context: import("..").SelectInputBlurContext) => void;
                    onClear?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onEnter?: (value: import("..").SelectInputValue, context: {
                        e: KeyboardEvent;
                        inputValue: string;
                        tagInputValue?: import("..").TagInputValue;
                    }) => void;
                    onFocus?: (value: import("..").SelectInputValue, context: import("..").SelectInputFocusContext) => void;
                    onInputChange?: (value: string, context?: import("..").SelectInputValueChangeContext) => void;
                    onMouseenter?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onMouseleave?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onPaste?: (context: {
                        e: ClipboardEvent;
                        pasteValue: string;
                    }) => void;
                    onPopupVisibleChange?: (visible: boolean, context: import("..").PopupVisibleChangeContext) => void;
                    onTagChange?: (value: import("..").TagInputValue, context: import("..").SelectInputChangeContext) => void;
                };
                showArrow?: boolean;
                size?: import("..").SizeEnum;
                status?: "default" | "success" | "warning" | "error";
                suffix?: string | import("..").TNode;
                suffixIcon?: import("..").TNode;
                tagInputProps?: {
                    autoWidth?: boolean;
                    borderless?: boolean;
                    clearable?: boolean;
                    collapsedItems?: import("..").TNode<{
                        value: import("..").TagInputValue;
                        collapsedSelectedItems: import("..").TagInputValue;
                        count: number;
                        onClose: (context: {
                            index: number;
                            e?: MouseEvent;
                        }) => void;
                    }>;
                    disabled?: boolean;
                    dragSort?: boolean;
                    excessTagsDisplayType?: "scroll" | "break-line";
                    inputProps?: {
                        align?: "left" | "center" | "right";
                        allowInputOverMax?: boolean;
                        autoWidth?: boolean;
                        autocomplete?: string;
                        autofocus?: boolean;
                        borderless?: boolean;
                        clearable?: boolean;
                        disabled?: boolean;
                        format?: import("..").InputFormatType;
                        inputClass?: any;
                        label?: string | import("..").TNode;
                        maxcharacter?: number;
                        maxlength?: string | number;
                        name?: string;
                        placeholder?: string;
                        prefixIcon?: import("..").TNode;
                        readonly?: boolean;
                        showClearIconOnEmpty?: boolean;
                        showLimitNumber?: boolean;
                        size?: import("..").SizeEnum;
                        spellCheck?: boolean;
                        status?: "default" | "success" | "warning" | "error";
                        suffix?: string | import("..").TNode;
                        suffixIcon?: import("..").TNode;
                        tips?: string | import("..").TNode;
                        type?: "text" | "number" | "url" | "tel" | "password" | "search" | "submit" | "hidden";
                        value?: import("..").InputValue;
                        defaultValue?: import("..").InputValue;
                        modelValue?: import("..").InputValue;
                        onBlur?: (value: import("..").InputValue, context: {
                            e: FocusEvent;
                        }) => void;
                        onChange?: (value: import("..").InputValue, context?: {
                            e?: InputEvent | MouseEvent | CompositionEvent;
                            trigger: "input" | "initial" | "clear";
                        }) => void;
                        onClear?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onClick?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onCompositionend?: (value: string, context: {
                            e: CompositionEvent;
                        }) => void;
                        onCompositionstart?: (value: string, context: {
                            e: CompositionEvent;
                        }) => void;
                        onEnter?: (value: import("..").InputValue, context: {
                            e: KeyboardEvent;
                        }) => void;
                        onFocus?: (value: import("..").InputValue, context: {
                            e: FocusEvent;
                        }) => void;
                        onKeydown?: (value: import("..").InputValue, context: {
                            e: KeyboardEvent;
                        }) => void;
                        onKeypress?: (value: import("..").InputValue, context: {
                            e: KeyboardEvent;
                        }) => void;
                        onKeyup?: (value: import("..").InputValue, context: {
                            e: KeyboardEvent;
                        }) => void;
                        onMouseenter?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onMouseleave?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onPaste?: (context: {
                            e: ClipboardEvent;
                            pasteValue: string;
                        }) => void;
                        onValidate?: (context: {
                            error?: "exceed-maximum" | "below-minimum";
                        }) => void;
                        onWheel?: (context: {
                            e: WheelEvent;
                        }) => void;
                    };
                    inputValue?: string;
                    defaultInputValue?: string;
                    label?: string | import("..").TNode;
                    max?: number;
                    minCollapsedNum?: number;
                    placeholder?: string;
                    prefixIcon?: import("..").TNode;
                    readonly?: boolean;
                    size?: import("..").SizeEnum;
                    status?: "default" | "success" | "warning" | "error";
                    suffix?: string | import("..").TNode;
                    suffixIcon?: import("..").TNode;
                    tag?: string | import("..").TNode<{
                        value: string | number;
                    }>;
                    tagProps?: {
                        closable?: boolean;
                        color?: string;
                        content?: string | import("..").TNode;
                        default?: string | import("..").TNode;
                        disabled?: boolean;
                        icon?: import("..").TNode;
                        maxWidth?: string | number;
                        shape?: "square" | "round" | "mark";
                        size?: import("..").SizeEnum;
                        theme?: "default" | "primary" | "warning" | "danger" | "success";
                        title?: string;
                        variant?: "dark" | "light" | "outline" | "light-outline";
                        onClick?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onClose?: (context: {
                            e: MouseEvent;
                        }) => void;
                    };
                    tips?: string | import("..").TNode;
                    value?: (string | number)[];
                    defaultValue?: (string | number)[];
                    modelValue?: (string | number)[];
                    valueDisplay?: string | import("..").TNode<{
                        value: import("..").TagInputValue;
                        onClose: (index: number, item?: any) => void;
                    }>;
                    onBlur?: (value: import("..").TagInputValue, context: {
                        inputValue: string;
                        e: FocusEvent;
                    }) => void;
                    onChange?: (value: import("..").TagInputValue, context: import("..").TagInputChangeContext) => void;
                    onClear?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onClick?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onDragSort?: (context: import("..").TagInputDragSortContext) => void;
                    onEnter?: (value: import("..").TagInputValue, context: {
                        e: KeyboardEvent;
                        inputValue: string;
                    }) => void;
                    onFocus?: (value: import("..").TagInputValue, context: {
                        inputValue: string;
                        e: FocusEvent;
                    }) => void;
                    onInputChange?: (value: string, context?: import("..").InputValueChangeContext) => void;
                    onMouseenter?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onMouseleave?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onPaste?: (context: {
                        e: ClipboardEvent;
                        pasteValue: string;
                    }) => void;
                    onRemove?: (context: import("..").TagInputRemoveContext) => void;
                };
                tagProps?: {
                    closable?: boolean;
                    color?: string;
                    content?: string | import("..").TNode;
                    default?: string | import("..").TNode;
                    disabled?: boolean;
                    icon?: import("..").TNode;
                    maxWidth?: string | number;
                    shape?: "square" | "round" | "mark";
                    size?: import("..").SizeEnum;
                    theme?: "default" | "primary" | "warning" | "danger" | "success";
                    title?: string;
                    variant?: "dark" | "light" | "outline" | "light-outline";
                    onClick?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onClose?: (context: {
                        e: MouseEvent;
                    }) => void;
                };
                tips?: string | import("..").TNode;
                value?: any;
                defaultValue?: any;
                modelValue?: any;
                valueDisplay?: string | import("..").TNode<{
                    value: import("..").SelectValue;
                    onClose: (index: number) => void;
                    displayValue?: import("..").SelectValue;
                    label?: string;
                }>;
                valueType?: "value" | "object";
                onBlur?: (context: {
                    value: import("..").SelectValue;
                    e: FocusEvent | KeyboardEvent;
                }) => void;
                onChange?: (value: import("..").SelectValue, context: {
                    option?: import("..").SelectOption;
                    selectedOptions: import("..").SelectOption[];
                    trigger: import("..").SelectValueChangeTrigger;
                    e?: MouseEvent | KeyboardEvent;
                }) => void;
                onClear?: (context: {
                    e: MouseEvent;
                }) => void;
                onCreate?: (value: string | number | boolean) => void;
                onEnter?: (context: {
                    inputValue: string;
                    e: KeyboardEvent;
                    value: import("..").SelectValue;
                }) => void;
                onFocus?: (context: {
                    value: import("..").SelectValue;
                    e: FocusEvent | KeyboardEvent;
                }) => void;
                onInputChange?: (value: string, context?: import("..").SelectInputValueChangeContext) => void;
                onPopupVisibleChange?: (visible: boolean, context: import("..").PopupVisibleChangeContext) => void;
                onRemove?: (options: import("..").SelectRemoveContext<import("..").SelectOption>) => void;
                onSearch?: (filterWords: string, context: {
                    e: KeyboardEvent;
                }) => void;
            };
            showFirstAndLastPageBtn?: boolean;
            showJumper?: boolean;
            showPageNumber?: boolean;
            showPageSize?: boolean;
            showPreviousAndNextBtn?: boolean;
            size?: "small" | "medium";
            theme?: "default" | "simple";
            total?: number;
            totalContent?: boolean | import("..").TNode;
            onChange?: (pageInfo: import("..").PageInfo) => void;
            onCurrentChange?: (current: number, pageInfo: import("..").PageInfo) => void;
            onPageSizeChange?: (pageSize: number, pageInfo: import("..").PageInfo) => void;
        }>;
        globalConfig: import("vue").ComputedRef<{} & (import("..").TableConfig | ({
            readonly expandIcon: any;
            readonly sortIcon: any;
            readonly filterIcon: any;
            readonly treeExpandAndFoldIcon: any;
            readonly hideSortTips: false;
            readonly size: "medium";
        } & {
            readonly empty: "暂无数据";
            readonly loadingText: "正在加载中，请稍后";
            readonly loadingMoreText: "点击加载更多";
            readonly filterInputPlaceholder: "请输入内容（无默认值）";
            readonly sortAscendingOperationText: "点击升序";
            readonly sortCancelOperationText: "点击取消排序";
            readonly sortDescendingOperationText: "点击降序";
            readonly clearFilterResultButtonText: "清空筛选";
            readonly columnConfigButtonText: "列配置";
            readonly columnConfigTitleText: "表格列配置";
            readonly columnConfigDescriptionText: "请选择需要在表格中显示的数据列";
            readonly confirmText: "确认";
            readonly cancelText: "取消";
            readonly resetText: "重置";
            readonly selectAllText: "全选";
            readonly searchResultText: "搜索“{result}”，找到 {count} 条结果";
        } & import("..").TableConfig))>;
        tableFootHeight: import("vue").Ref<number>;
        virtualScrollHeaderPos: import("vue").Ref<{
            left: number;
            top: number;
        }>;
        tableSize: import("vue").ComputedRef<import("..").SizeEnum>;
        tableWidth: import("vue").Ref<number>;
        tableElmWidth: import("vue").Ref<number>;
        tableRef: import("vue").Ref<HTMLDivElement>;
        tableElmRef: import("vue").Ref<HTMLTableElement>;
        sizeClassNames: {
            small: string;
            medium: string;
            large: string;
            default: string;
            xs: string;
            xl: string;
            block: string;
        };
        tableBaseClass: {
            table: string;
            columnResizableTable: string;
            overflowVisible: string;
            body: string;
            content: string;
            topContent: string;
            bottomContent: string;
            paginationWrap: string;
            tdLastRow: string;
            tdFirstCol: string;
            thCellInner: string;
            tableRowEdit: string;
            cellEditable: string;
            cellEditWrap: string;
            bordered: string;
            striped: string;
            hover: string;
            loading: string;
            rowspanAndColspan: string;
            empty: string;
            emptyRow: string;
            headerFixed: string;
            columnFixed: string;
            widthOverflow: string;
            multipleHeader: string;
            footerAffixed: string;
            horizontalBarAffixed: string;
            affixedHeader: string;
            affixedHeaderElm: string;
            affixedFooterElm: string;
            affixedFooterWrap: string;
            scrollbarDivider: string;
            fullHeight: string;
            resizeLine: string;
            obviousScrollbar: string;
            affixedHeaderWrap: string;
        };
        spansAndLeafNodes: import("vue").ComputedRef<{
            rowspanAndColspanMap: import("./interface").ThRowspanAndColspan;
            leafColumns: import("./interface").BaseTableColumns;
        }>;
        dynamicBaseTableClasses: import("vue").ComputedRef<((string | {
            [x: string]: boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue) | Partial<import("..").TdAffixProps> | import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>;
        })[] | {
            [x: string]: boolean | "single" | "multiple";
        })[]>;
        tableContentStyles: import("vue").ComputedRef<{
            height: string | number;
            maxHeight: string | number;
        }>;
        tableElementStyles: import("vue").ComputedRef<{
            width: string | number;
        }>;
        dividerBottom: import("vue").ComputedRef<number>;
        virtualScrollClasses: {
            cursor: string;
            header: string;
        };
        tableLayoutClasses: {
            auto: string;
            fixed: string;
        };
        tableElmClasses: import("vue").ComputedRef<string[][]>;
        tableContentRef: import("vue").Ref<HTMLDivElement>;
        isFixedHeader: import("vue").Ref<boolean>;
        isWidthOverflow: import("vue").Ref<boolean>;
        isFixedColumn: import("vue").Ref<boolean>;
        rowAndColFixedPosition: import("vue").Ref<import("./interface").RowAndColFixedPosition>;
        showColumnShadow: {
            left: boolean;
            right: boolean;
        };
        thWidthList: import("vue").Ref<{
            [colKey: string]: number;
        }>;
        isPaginateData: import("vue").Ref<boolean>;
        dataSource: import("vue").Ref<{
            [x: string]: any;
            children?: any[];
        }[]>;
        affixHeaderRef: import("vue").Ref<HTMLDivElement>;
        affixFooterRef: import("vue").Ref<HTMLDivElement>;
        bottomContentRef: import("vue").Ref<HTMLDivElement>;
        paginationRef: import("vue").Ref<HTMLDivElement>;
        showAffixHeader: import("vue").Ref<boolean>;
        showAffixFooter: import("vue").Ref<boolean>;
        scrollbarWidth: import("vue").Ref<number>;
        isMultipleHeader: import("vue").ComputedRef<boolean>;
        showRightDivider: import("vue").ComputedRef<boolean>;
        resizeLineRef: import("vue").Ref<HTMLDivElement>;
        resizeLineStyle: {
            display: string;
            height: string;
            left: string;
            bottom: string;
        };
        columnResizeParams: {
            resizeLineRef: import("vue").Ref<HTMLDivElement>;
            resizeLineStyle: {
                display: string;
                height: string;
                left: string;
                bottom: string;
            };
            onColumnMouseover: (e: MouseEvent, col: import("./type").BaseTableCol<import("./type").TableRowData>) => void;
            onColumnMousedown: (e: MouseEvent, col: import("./type").BaseTableCol<import("./type").TableRowData>, index: number) => void;
            setEffectColMap: (nodes: import("./type").BaseTableCol<import("./type").TableRowData>[], parent: import("./type").BaseTableCol<import("./type").TableRowData> | null) => void;
        };
        horizontalScrollbarRef: import("vue").Ref<HTMLDivElement>;
        tableBodyRef: import("vue").Ref<import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
            activeRowKeys?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowKeys"]>;
                default: import("./type").TdBaseTableProps["activeRowKeys"];
            };
            defaultActiveRowKeys?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["defaultActiveRowKeys"]>;
                default: () => import("./type").TdBaseTableProps["defaultActiveRowKeys"];
            };
            activeRowType?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowType"]>;
                default: import("./type").TdBaseTableProps["activeRowType"];
            };
            allowResizeColumnWidth?: {
                type: BooleanConstructor;
                default: any;
            };
            attach?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["attach"]>;
            };
            bordered?: BooleanConstructor;
            bottomContent?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["bottomContent"]>;
            };
            cellEmptyContent?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["cellEmptyContent"]>;
            };
            columns: import("vue").PropType<import("./type").BaseTableCol<import("./type").TableRowData>[]> | {
                type: import("vue").PropType<import("./type").TdBaseTableProps["columns"]>;
                default: () => import("./type").TdBaseTableProps["columns"];
            };
            data: import("vue").PropType<import("./type").TableRowData[]> | {
                type: import("vue").PropType<import("./type").TdBaseTableProps["data"]>;
                default: () => import("./type").TdBaseTableProps["data"];
            };
            disableDataPage?: BooleanConstructor;
            disableSpaceInactiveRow?: {
                type: BooleanConstructor;
                default: any;
            };
            empty?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["empty"]>;
                default: import("./type").TdBaseTableProps["empty"];
            };
            firstFullRow: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue)> | {
                type: import("vue").PropType<import("./type").TdBaseTableProps["firstFullRow"]>;
            };
            fixedRows?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["fixedRows"]>;
            };
            footData?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["footData"]>;
                default: () => import("./type").TdBaseTableProps["footData"];
            };
            footerAffixProps?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixProps"]>;
            };
            footerAffixedBottom?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixedBottom"]>;
                default: import("./type").TdBaseTableProps["footerAffixedBottom"];
            };
            footerSummary?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["footerSummary"]>;
            };
            headerAffixProps?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixProps"]>;
            };
            headerAffixedTop?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixedTop"]>;
                default: import("./type").TdBaseTableProps["headerAffixedTop"];
            };
            height?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["height"]>;
            };
            horizontalScrollAffixedBottom?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["horizontalScrollAffixedBottom"]>;
            };
            hover?: BooleanConstructor;
            keyboardRowHover?: {
                type: BooleanConstructor;
                default: boolean;
            };
            lastFullRow: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue)> | {
                type: import("vue").PropType<import("./type").TdBaseTableProps["lastFullRow"]>;
            };
            lazyLoad?: BooleanConstructor;
            loading?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["loading"]>;
                default: import("./type").TdBaseTableProps["loading"];
            };
            loadingProps?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["loadingProps"]>;
            };
            locale?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["locale"]>;
            };
            maxHeight?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["maxHeight"]>;
            };
            pagination?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["pagination"]>;
            };
            paginationAffixedBottom?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["paginationAffixedBottom"]>;
            };
            resizable?: BooleanConstructor;
            rowAttributes?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["rowAttributes"]>;
            };
            rowClassName?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["rowClassName"]>;
            };
            rowKey?: {
                type: StringConstructor;
                default: string;
                required: boolean;
            };
            rowspanAndColspan?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspan"]>;
            };
            rowspanAndColspanInFooter?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspanInFooter"]>;
            };
            scroll?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["scroll"]>;
            };
            showHeader?: {
                type: BooleanConstructor;
                default: boolean;
            };
            size?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["size"]>;
                validator(val: import("./type").TdBaseTableProps["size"]): boolean;
            };
            stripe?: BooleanConstructor;
            tableContentWidth?: {
                type: StringConstructor;
                default: string;
            };
            tableLayout?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["tableLayout"]>;
                default: import("./type").TdBaseTableProps["tableLayout"];
                validator(val: import("./type").TdBaseTableProps["tableLayout"]): boolean;
            };
            topContent?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["topContent"]>;
            };
            verticalAlign?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["verticalAlign"]>;
                default: import("./type").TdBaseTableProps["verticalAlign"];
                validator(val: import("./type").TdBaseTableProps["verticalAlign"]): boolean;
            };
            onActiveChange?: import("vue").PropType<import("./type").TdBaseTableProps["onActiveChange"]>;
            onActiveRowAction?: import("vue").PropType<import("./type").TdBaseTableProps["onActiveRowAction"]>;
            onCellClick?: import("vue").PropType<import("./type").TdBaseTableProps["onCellClick"]>;
            onColumnResizeChange?: import("vue").PropType<import("./type").TdBaseTableProps["onColumnResizeChange"]>;
            onPageChange?: import("vue").PropType<import("./type").TdBaseTableProps["onPageChange"]>;
            onRowClick?: import("vue").PropType<import("./type").TdBaseTableProps["onRowClick"]>;
            onRowDblclick?: import("vue").PropType<import("./type").TdBaseTableProps["onRowDblclick"]>;
            onRowMousedown?: import("vue").PropType<import("./type").TdBaseTableProps["onRowMousedown"]>;
            onRowMouseenter?: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseenter"]>;
            onRowMouseleave?: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseleave"]>;
            onRowMouseover?: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseover"]>;
            onRowMouseup?: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseup"]>;
            onScroll?: import("vue").PropType<import("./type").TdBaseTableProps["onScroll"]>;
            onScrollX?: import("vue").PropType<import("./type").TdBaseTableProps["onScrollX"]>;
            onScrollY?: import("vue").PropType<import("./type").TdBaseTableProps["onScrollY"]>;
            classPrefix: StringConstructor;
            ellipsisOverlayClassName: StringConstructor;
            rowAndColFixedPosition: import("vue").PropType<import("./tbody").TableBodyProps["rowAndColFixedPosition"]>;
            showColumnShadow: import("vue").PropType<import("./tbody").TableBodyProps["showColumnShadow"]>;
            tableElm: {};
            tableWidth: NumberConstructor;
            isWidthOverflow: BooleanConstructor;
            virtualConfig: import("vue").PropType<import("../hooks/useVirtualScrollNew").VirtualScrollConfig>;
            tableContentElm: {};
            handleRowMounted: import("vue").PropType<import("./tbody").TableBodyProps["handleRowMounted"]>;
            renderExpandedRow: import("vue").PropType<import("./tbody").TableBodyProps["renderExpandedRow"]>;
            activeRow: import("vue").PropType<Array<string | number>>;
            hoverRow: (NumberConstructor | StringConstructor)[];
        }>>, {
            t: <T>(pattern: T, ...args: any[]) => any;
            globalConfig: import("vue").ComputedRef<{} & (import("..").TableConfig | ({
                readonly expandIcon: any;
                readonly sortIcon: any;
                readonly filterIcon: any;
                readonly treeExpandAndFoldIcon: any;
                readonly hideSortTips: false;
                readonly size: "medium";
            } & {
                readonly empty: "暂无数据";
                readonly loadingText: "正在加载中，请稍后";
                readonly loadingMoreText: "点击加载更多";
                readonly filterInputPlaceholder: "请输入内容（无默认值）";
                readonly sortAscendingOperationText: "点击升序";
                readonly sortCancelOperationText: "点击取消排序";
                readonly sortDescendingOperationText: "点击降序";
                readonly clearFilterResultButtonText: "清空筛选";
                readonly columnConfigButtonText: "列配置";
                readonly columnConfigTitleText: "表格列配置";
                readonly columnConfigDescriptionText: "请选择需要在表格中显示的数据列";
                readonly confirmText: "确认";
                readonly cancelText: "取消";
                readonly resetText: "重置";
                readonly selectAllText: "全选";
                readonly searchResultText: "搜索“{result}”，找到 {count} 条结果";
            } & import("..").TableConfig))>;
            renderTNode: (name: string, options?: import("../utils/render-tnode").OptionsType) => any;
            tableFullRowClasses: {
                base: string;
                innerFullRow: string;
                innerFullElement: string;
                firstFullRow: string;
                lastFullRow: string;
            };
            tbodyClasses: import("vue").ComputedRef<string[]>;
            tableBaseClass: {
                table: string;
                columnResizableTable: string;
                overflowVisible: string;
                body: string;
                content: string;
                topContent: string;
                bottomContent: string;
                paginationWrap: string;
                tdLastRow: string;
                tdFirstCol: string;
                thCellInner: string;
                tableRowEdit: string;
                cellEditable: string;
                cellEditWrap: string;
                bordered: string;
                striped: string;
                hover: string;
                loading: string;
                rowspanAndColspan: string;
                empty: string;
                emptyRow: string;
                headerFixed: string;
                columnFixed: string;
                widthOverflow: string;
                multipleHeader: string;
                footerAffixed: string;
                horizontalBarAffixed: string;
                affixedHeader: string;
                affixedHeaderElm: string;
                affixedFooterElm: string;
                affixedFooterWrap: string;
                scrollbarDivider: string;
                fullHeight: string;
                resizeLine: string;
                obviousScrollbar: string;
                affixedHeaderWrap: string;
            };
            skipSpansMap: import("vue").Ref<Map<string, import("./hooks/useRowspanAndColspan").SkipSpansValue>>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
            activeRowKeys?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowKeys"]>;
                default: import("./type").TdBaseTableProps["activeRowKeys"];
            };
            defaultActiveRowKeys?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["defaultActiveRowKeys"]>;
                default: () => import("./type").TdBaseTableProps["defaultActiveRowKeys"];
            };
            activeRowType?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowType"]>;
                default: import("./type").TdBaseTableProps["activeRowType"];
            };
            allowResizeColumnWidth?: {
                type: BooleanConstructor;
                default: any;
            };
            attach?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["attach"]>;
            };
            bordered?: BooleanConstructor;
            bottomContent?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["bottomContent"]>;
            };
            cellEmptyContent?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["cellEmptyContent"]>;
            };
            columns: import("vue").PropType<import("./type").BaseTableCol<import("./type").TableRowData>[]> | {
                type: import("vue").PropType<import("./type").TdBaseTableProps["columns"]>;
                default: () => import("./type").TdBaseTableProps["columns"];
            };
            data: import("vue").PropType<import("./type").TableRowData[]> | {
                type: import("vue").PropType<import("./type").TdBaseTableProps["data"]>;
                default: () => import("./type").TdBaseTableProps["data"];
            };
            disableDataPage?: BooleanConstructor;
            disableSpaceInactiveRow?: {
                type: BooleanConstructor;
                default: any;
            };
            empty?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["empty"]>;
                default: import("./type").TdBaseTableProps["empty"];
            };
            firstFullRow: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue)> | {
                type: import("vue").PropType<import("./type").TdBaseTableProps["firstFullRow"]>;
            };
            fixedRows?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["fixedRows"]>;
            };
            footData?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["footData"]>;
                default: () => import("./type").TdBaseTableProps["footData"];
            };
            footerAffixProps?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixProps"]>;
            };
            footerAffixedBottom?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixedBottom"]>;
                default: import("./type").TdBaseTableProps["footerAffixedBottom"];
            };
            footerSummary?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["footerSummary"]>;
            };
            headerAffixProps?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixProps"]>;
            };
            headerAffixedTop?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixedTop"]>;
                default: import("./type").TdBaseTableProps["headerAffixedTop"];
            };
            height?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["height"]>;
            };
            horizontalScrollAffixedBottom?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["horizontalScrollAffixedBottom"]>;
            };
            hover?: BooleanConstructor;
            keyboardRowHover?: {
                type: BooleanConstructor;
                default: boolean;
            };
            lastFullRow: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue)> | {
                type: import("vue").PropType<import("./type").TdBaseTableProps["lastFullRow"]>;
            };
            lazyLoad?: BooleanConstructor;
            loading?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["loading"]>;
                default: import("./type").TdBaseTableProps["loading"];
            };
            loadingProps?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["loadingProps"]>;
            };
            locale?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["locale"]>;
            };
            maxHeight?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["maxHeight"]>;
            };
            pagination?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["pagination"]>;
            };
            paginationAffixedBottom?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["paginationAffixedBottom"]>;
            };
            resizable?: BooleanConstructor;
            rowAttributes?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["rowAttributes"]>;
            };
            rowClassName?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["rowClassName"]>;
            };
            rowKey?: {
                type: StringConstructor;
                default: string;
                required: boolean;
            };
            rowspanAndColspan?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspan"]>;
            };
            rowspanAndColspanInFooter?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspanInFooter"]>;
            };
            scroll?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["scroll"]>;
            };
            showHeader?: {
                type: BooleanConstructor;
                default: boolean;
            };
            size?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["size"]>;
                validator(val: import("./type").TdBaseTableProps["size"]): boolean;
            };
            stripe?: BooleanConstructor;
            tableContentWidth?: {
                type: StringConstructor;
                default: string;
            };
            tableLayout?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["tableLayout"]>;
                default: import("./type").TdBaseTableProps["tableLayout"];
                validator(val: import("./type").TdBaseTableProps["tableLayout"]): boolean;
            };
            topContent?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["topContent"]>;
            };
            verticalAlign?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["verticalAlign"]>;
                default: import("./type").TdBaseTableProps["verticalAlign"];
                validator(val: import("./type").TdBaseTableProps["verticalAlign"]): boolean;
            };
            onActiveChange?: import("vue").PropType<import("./type").TdBaseTableProps["onActiveChange"]>;
            onActiveRowAction?: import("vue").PropType<import("./type").TdBaseTableProps["onActiveRowAction"]>;
            onCellClick?: import("vue").PropType<import("./type").TdBaseTableProps["onCellClick"]>;
            onColumnResizeChange?: import("vue").PropType<import("./type").TdBaseTableProps["onColumnResizeChange"]>;
            onPageChange?: import("vue").PropType<import("./type").TdBaseTableProps["onPageChange"]>;
            onRowClick?: import("vue").PropType<import("./type").TdBaseTableProps["onRowClick"]>;
            onRowDblclick?: import("vue").PropType<import("./type").TdBaseTableProps["onRowDblclick"]>;
            onRowMousedown?: import("vue").PropType<import("./type").TdBaseTableProps["onRowMousedown"]>;
            onRowMouseenter?: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseenter"]>;
            onRowMouseleave?: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseleave"]>;
            onRowMouseover?: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseover"]>;
            onRowMouseup?: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseup"]>;
            onScroll?: import("vue").PropType<import("./type").TdBaseTableProps["onScroll"]>;
            onScrollX?: import("vue").PropType<import("./type").TdBaseTableProps["onScrollX"]>;
            onScrollY?: import("vue").PropType<import("./type").TdBaseTableProps["onScrollY"]>;
            classPrefix: StringConstructor;
            ellipsisOverlayClassName: StringConstructor;
            rowAndColFixedPosition: import("vue").PropType<import("./tbody").TableBodyProps["rowAndColFixedPosition"]>;
            showColumnShadow: import("vue").PropType<import("./tbody").TableBodyProps["showColumnShadow"]>;
            tableElm: {};
            tableWidth: NumberConstructor;
            isWidthOverflow: BooleanConstructor;
            virtualConfig: import("vue").PropType<import("../hooks/useVirtualScrollNew").VirtualScrollConfig>;
            tableContentElm: {};
            handleRowMounted: import("vue").PropType<import("./tbody").TableBodyProps["handleRowMounted"]>;
            renderExpandedRow: import("vue").PropType<import("./tbody").TableBodyProps["renderExpandedRow"]>;
            activeRow: import("vue").PropType<Array<string | number>>;
            hoverRow: (NumberConstructor | StringConstructor)[];
        }>>, {
            loading?: boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
            empty?: string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
            hover?: boolean;
            tableLayout?: "auto" | "fixed";
            verticalAlign?: "top" | "middle" | "bottom";
            lazyLoad?: boolean;
            bordered?: boolean;
            stripe?: boolean;
            activeRowKeys?: (string | number)[];
            defaultActiveRowKeys?: (string | number)[];
            activeRowType?: "single" | "multiple";
            allowResizeColumnWidth?: boolean;
            disableDataPage?: boolean;
            disableSpaceInactiveRow?: boolean;
            footData?: import("./type").TableRowData[];
            footerAffixedBottom?: boolean | Partial<import("..").TdAffixProps>;
            headerAffixedTop?: boolean | Partial<import("..").TdAffixProps>;
            keyboardRowHover?: boolean;
            resizable?: boolean;
            rowKey?: string;
            showHeader?: boolean;
            tableContentWidth?: string;
            isWidthOverflow: boolean;
        }, true, {}, {}, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, Readonly<import("vue").ExtractPropTypes<{
            activeRowKeys?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowKeys"]>;
                default: import("./type").TdBaseTableProps["activeRowKeys"];
            };
            defaultActiveRowKeys?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["defaultActiveRowKeys"]>;
                default: () => import("./type").TdBaseTableProps["defaultActiveRowKeys"];
            };
            activeRowType?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowType"]>;
                default: import("./type").TdBaseTableProps["activeRowType"];
            };
            allowResizeColumnWidth?: {
                type: BooleanConstructor;
                default: any;
            };
            attach?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["attach"]>;
            };
            bordered?: BooleanConstructor;
            bottomContent?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["bottomContent"]>;
            };
            cellEmptyContent?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["cellEmptyContent"]>;
            };
            columns: import("vue").PropType<import("./type").BaseTableCol<import("./type").TableRowData>[]> | {
                type: import("vue").PropType<import("./type").TdBaseTableProps["columns"]>;
                default: () => import("./type").TdBaseTableProps["columns"];
            };
            data: import("vue").PropType<import("./type").TableRowData[]> | {
                type: import("vue").PropType<import("./type").TdBaseTableProps["data"]>;
                default: () => import("./type").TdBaseTableProps["data"];
            };
            disableDataPage?: BooleanConstructor;
            disableSpaceInactiveRow?: {
                type: BooleanConstructor;
                default: any;
            };
            empty?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["empty"]>;
                default: import("./type").TdBaseTableProps["empty"];
            };
            firstFullRow: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue)> | {
                type: import("vue").PropType<import("./type").TdBaseTableProps["firstFullRow"]>;
            };
            fixedRows?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["fixedRows"]>;
            };
            footData?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["footData"]>;
                default: () => import("./type").TdBaseTableProps["footData"];
            };
            footerAffixProps?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixProps"]>;
            };
            footerAffixedBottom?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixedBottom"]>;
                default: import("./type").TdBaseTableProps["footerAffixedBottom"];
            };
            footerSummary?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["footerSummary"]>;
            };
            headerAffixProps?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixProps"]>;
            };
            headerAffixedTop?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixedTop"]>;
                default: import("./type").TdBaseTableProps["headerAffixedTop"];
            };
            height?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["height"]>;
            };
            horizontalScrollAffixedBottom?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["horizontalScrollAffixedBottom"]>;
            };
            hover?: BooleanConstructor;
            keyboardRowHover?: {
                type: BooleanConstructor;
                default: boolean;
            };
            lastFullRow: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue)> | {
                type: import("vue").PropType<import("./type").TdBaseTableProps["lastFullRow"]>;
            };
            lazyLoad?: BooleanConstructor;
            loading?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["loading"]>;
                default: import("./type").TdBaseTableProps["loading"];
            };
            loadingProps?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["loadingProps"]>;
            };
            locale?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["locale"]>;
            };
            maxHeight?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["maxHeight"]>;
            };
            pagination?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["pagination"]>;
            };
            paginationAffixedBottom?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["paginationAffixedBottom"]>;
            };
            resizable?: BooleanConstructor;
            rowAttributes?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["rowAttributes"]>;
            };
            rowClassName?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["rowClassName"]>;
            };
            rowKey?: {
                type: StringConstructor;
                default: string;
                required: boolean;
            };
            rowspanAndColspan?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspan"]>;
            };
            rowspanAndColspanInFooter?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspanInFooter"]>;
            };
            scroll?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["scroll"]>;
            };
            showHeader?: {
                type: BooleanConstructor;
                default: boolean;
            };
            size?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["size"]>;
                validator(val: import("./type").TdBaseTableProps["size"]): boolean;
            };
            stripe?: BooleanConstructor;
            tableContentWidth?: {
                type: StringConstructor;
                default: string;
            };
            tableLayout?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["tableLayout"]>;
                default: import("./type").TdBaseTableProps["tableLayout"];
                validator(val: import("./type").TdBaseTableProps["tableLayout"]): boolean;
            };
            topContent?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["topContent"]>;
            };
            verticalAlign?: {
                type: import("vue").PropType<import("./type").TdBaseTableProps["verticalAlign"]>;
                default: import("./type").TdBaseTableProps["verticalAlign"];
                validator(val: import("./type").TdBaseTableProps["verticalAlign"]): boolean;
            };
            onActiveChange?: import("vue").PropType<import("./type").TdBaseTableProps["onActiveChange"]>;
            onActiveRowAction?: import("vue").PropType<import("./type").TdBaseTableProps["onActiveRowAction"]>;
            onCellClick?: import("vue").PropType<import("./type").TdBaseTableProps["onCellClick"]>;
            onColumnResizeChange?: import("vue").PropType<import("./type").TdBaseTableProps["onColumnResizeChange"]>;
            onPageChange?: import("vue").PropType<import("./type").TdBaseTableProps["onPageChange"]>;
            onRowClick?: import("vue").PropType<import("./type").TdBaseTableProps["onRowClick"]>;
            onRowDblclick?: import("vue").PropType<import("./type").TdBaseTableProps["onRowDblclick"]>;
            onRowMousedown?: import("vue").PropType<import("./type").TdBaseTableProps["onRowMousedown"]>;
            onRowMouseenter?: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseenter"]>;
            onRowMouseleave?: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseleave"]>;
            onRowMouseover?: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseover"]>;
            onRowMouseup?: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseup"]>;
            onScroll?: import("vue").PropType<import("./type").TdBaseTableProps["onScroll"]>;
            onScrollX?: import("vue").PropType<import("./type").TdBaseTableProps["onScrollX"]>;
            onScrollY?: import("vue").PropType<import("./type").TdBaseTableProps["onScrollY"]>;
            classPrefix: StringConstructor;
            ellipsisOverlayClassName: StringConstructor;
            rowAndColFixedPosition: import("vue").PropType<import("./tbody").TableBodyProps["rowAndColFixedPosition"]>;
            showColumnShadow: import("vue").PropType<import("./tbody").TableBodyProps["showColumnShadow"]>;
            tableElm: {};
            tableWidth: NumberConstructor;
            isWidthOverflow: BooleanConstructor;
            virtualConfig: import("vue").PropType<import("../hooks/useVirtualScrollNew").VirtualScrollConfig>;
            tableContentElm: {};
            handleRowMounted: import("vue").PropType<import("./tbody").TableBodyProps["handleRowMounted"]>;
            renderExpandedRow: import("vue").PropType<import("./tbody").TableBodyProps["renderExpandedRow"]>;
            activeRow: import("vue").PropType<Array<string | number>>;
            hoverRow: (NumberConstructor | StringConstructor)[];
        }>>, {
            t: <T>(pattern: T, ...args: any[]) => any;
            globalConfig: import("vue").ComputedRef<{} & (import("..").TableConfig | ({
                readonly expandIcon: any;
                readonly sortIcon: any;
                readonly filterIcon: any;
                readonly treeExpandAndFoldIcon: any;
                readonly hideSortTips: false;
                readonly size: "medium";
            } & {
                readonly empty: "暂无数据";
                readonly loadingText: "正在加载中，请稍后";
                readonly loadingMoreText: "点击加载更多";
                readonly filterInputPlaceholder: "请输入内容（无默认值）";
                readonly sortAscendingOperationText: "点击升序";
                readonly sortCancelOperationText: "点击取消排序";
                readonly sortDescendingOperationText: "点击降序";
                readonly clearFilterResultButtonText: "清空筛选";
                readonly columnConfigButtonText: "列配置";
                readonly columnConfigTitleText: "表格列配置";
                readonly columnConfigDescriptionText: "请选择需要在表格中显示的数据列";
                readonly confirmText: "确认";
                readonly cancelText: "取消";
                readonly resetText: "重置";
                readonly selectAllText: "全选";
                readonly searchResultText: "搜索“{result}”，找到 {count} 条结果";
            } & import("..").TableConfig))>;
            renderTNode: (name: string, options?: import("../utils/render-tnode").OptionsType) => any;
            tableFullRowClasses: {
                base: string;
                innerFullRow: string;
                innerFullElement: string;
                firstFullRow: string;
                lastFullRow: string;
            };
            tbodyClasses: import("vue").ComputedRef<string[]>;
            tableBaseClass: {
                table: string;
                columnResizableTable: string;
                overflowVisible: string;
                body: string;
                content: string;
                topContent: string;
                bottomContent: string;
                paginationWrap: string;
                tdLastRow: string;
                tdFirstCol: string;
                thCellInner: string;
                tableRowEdit: string;
                cellEditable: string;
                cellEditWrap: string;
                bordered: string;
                striped: string;
                hover: string;
                loading: string;
                rowspanAndColspan: string;
                empty: string;
                emptyRow: string;
                headerFixed: string;
                columnFixed: string;
                widthOverflow: string;
                multipleHeader: string;
                footerAffixed: string;
                horizontalBarAffixed: string;
                affixedHeader: string;
                affixedHeaderElm: string;
                affixedFooterElm: string;
                affixedFooterWrap: string;
                scrollbarDivider: string;
                fullHeight: string;
                resizeLine: string;
                obviousScrollbar: string;
                affixedHeaderWrap: string;
            };
            skipSpansMap: import("vue").Ref<Map<string, import("./hooks/useRowspanAndColspan").SkipSpansValue>>;
        }, {}, {}, {}, {
            loading?: boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
            empty?: string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
            hover?: boolean;
            tableLayout?: "auto" | "fixed";
            verticalAlign?: "top" | "middle" | "bottom";
            lazyLoad?: boolean;
            bordered?: boolean;
            stripe?: boolean;
            activeRowKeys?: (string | number)[];
            defaultActiveRowKeys?: (string | number)[];
            activeRowType?: "single" | "multiple";
            allowResizeColumnWidth?: boolean;
            disableDataPage?: boolean;
            disableSpaceInactiveRow?: boolean;
            footData?: import("./type").TableRowData[];
            footerAffixedBottom?: boolean | Partial<import("..").TdAffixProps>;
            headerAffixedTop?: boolean | Partial<import("..").TdAffixProps>;
            keyboardRowHover?: boolean;
            resizable?: boolean;
            rowKey?: string;
            showHeader?: boolean;
            tableContentWidth?: string;
            isWidthOverflow: boolean;
        }>>;
        virtualConfig: {
            visibleData: import("vue").Ref<any[]>;
            translateY: import("vue").Ref<number>;
            scrollHeight: import("vue").Ref<number>;
            isVirtualScroll: import("vue").ComputedRef<boolean>;
            handleScroll: () => void;
            handleRowMounted: (rowData: any) => void;
            scrollToElement: (p: import("../hooks/useVirtualScrollNew").ScrollToElementParams) => void;
        };
        showAffixPagination: import("vue").Ref<boolean>;
        tActiveRow: import("vue").Ref<(string | number)[]>;
        hoverRow: import("vue").Ref<string | number>;
        showElement: import("vue").Ref<boolean>;
        scrollToElement: (params: import("..").ComponentScrollToElementParams) => void;
        renderPagination: () => JSX.Element;
        renderTNode: (name: string, options?: import("../utils/render-tnode").OptionsType) => any;
        onFixedChange: () => void;
        onHorizontalScroll: (scrollElement?: HTMLElement) => void;
        updateAffixHeaderOrFooter: () => void;
        onInnerVirtualScroll: (e: WheelEvent) => void;
        refreshTable: () => void;
        scrollColumnIntoView: (colKey: string) => void;
        onTableFocus: () => void;
        onTableBlur: () => void;
        onInnerRowClick: (context: import("./type").RowEventContext<import("./type").TableRowData>) => void;
        paginationAffixRef: import("vue").Ref<any>;
        horizontalScrollAffixRef: import("vue").Ref<any>;
        headerTopAffixRef: import("vue").Ref<any>;
        footerBottomAffixRef: import("vue").Ref<any>;
        tableRefTabIndex: import("vue").Ref<number>;
    }, {}, {}, {}, {
        loading: boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        data: import("./type").TableRowData[];
        empty: string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        hover: boolean;
        tableLayout: "auto" | "fixed";
        verticalAlign: "top" | "middle" | "bottom";
        columns: import("./type").BaseTableCol<import("./type").TableRowData>[];
        lazyLoad: boolean;
        bordered: boolean;
        stripe: boolean;
        activeRowKeys: (string | number)[];
        defaultActiveRowKeys: (string | number)[];
        activeRowType: "single" | "multiple";
        allowResizeColumnWidth: boolean;
        disableDataPage: boolean;
        disableSpaceInactiveRow: boolean;
        footData: import("./type").TableRowData[];
        footerAffixedBottom: boolean | Partial<import("..").TdAffixProps>;
        headerAffixedTop: boolean | Partial<import("..").TdAffixProps>;
        keyboardRowHover: boolean;
        resizable: boolean;
        rowKey: string;
        showHeader: boolean;
        tableContentWidth: string;
        thDraggable: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    renderExpandedRow: import("vue").PropType<import("./interface").BaseTableProps["renderExpandedRow"]>;
    onLeafColumnsChange: import("vue").PropType<import("./interface").BaseTableProps["onLeafColumnsChange"]>;
    thDraggable: BooleanConstructor;
    activeRowKeys: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowKeys"]>;
        default: import("./type").TdBaseTableProps["activeRowKeys"];
    };
    defaultActiveRowKeys: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["defaultActiveRowKeys"]>;
        default: () => import("./type").TdBaseTableProps["defaultActiveRowKeys"];
    };
    activeRowType: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowType"]>;
        default: import("./type").TdBaseTableProps["activeRowType"];
    };
    allowResizeColumnWidth: {
        type: BooleanConstructor;
        default: any;
    };
    attach: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["attach"]>;
    };
    bordered: BooleanConstructor;
    bottomContent: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["bottomContent"]>;
    };
    cellEmptyContent: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["cellEmptyContent"]>;
    };
    columns: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["columns"]>;
        default: () => import("./type").TdBaseTableProps["columns"];
    };
    data: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["data"]>;
        default: () => import("./type").TdBaseTableProps["data"];
    };
    disableDataPage: BooleanConstructor;
    disableSpaceInactiveRow: {
        type: BooleanConstructor;
        default: any;
    };
    empty: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["empty"]>;
        default: import("./type").TdBaseTableProps["empty"];
    };
    firstFullRow: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["firstFullRow"]>;
    };
    fixedRows: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["fixedRows"]>;
    };
    footData: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["footData"]>;
        default: () => import("./type").TdBaseTableProps["footData"];
    };
    footerAffixProps: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixProps"]>;
    };
    footerAffixedBottom: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixedBottom"]>;
        default: import("./type").TdBaseTableProps["footerAffixedBottom"];
    };
    footerSummary: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["footerSummary"]>;
    };
    headerAffixProps: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixProps"]>;
    };
    headerAffixedTop: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixedTop"]>;
        default: import("./type").TdBaseTableProps["headerAffixedTop"];
    };
    height: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["height"]>;
    };
    horizontalScrollAffixedBottom: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["horizontalScrollAffixedBottom"]>;
    };
    hover: BooleanConstructor;
    keyboardRowHover: {
        type: BooleanConstructor;
        default: boolean;
    };
    lastFullRow: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["lastFullRow"]>;
    };
    lazyLoad: BooleanConstructor;
    loading: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["loading"]>;
        default: import("./type").TdBaseTableProps["loading"];
    };
    loadingProps: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["loadingProps"]>;
    };
    locale: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["locale"]>;
    };
    maxHeight: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["maxHeight"]>;
    };
    pagination: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["pagination"]>;
    };
    paginationAffixedBottom: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["paginationAffixedBottom"]>;
    };
    resizable: BooleanConstructor;
    rowAttributes: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["rowAttributes"]>;
    };
    rowClassName: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["rowClassName"]>;
    };
    rowKey: {
        type: StringConstructor;
        default: string;
        required: boolean;
    };
    rowspanAndColspan: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspan"]>;
    };
    rowspanAndColspanInFooter: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspanInFooter"]>;
    };
    scroll: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["scroll"]>;
    };
    showHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["size"]>;
        validator(val: import("./type").TdBaseTableProps["size"]): boolean;
    };
    stripe: BooleanConstructor;
    tableContentWidth: {
        type: StringConstructor;
        default: string;
    };
    tableLayout: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["tableLayout"]>;
        default: import("./type").TdBaseTableProps["tableLayout"];
        validator(val: import("./type").TdBaseTableProps["tableLayout"]): boolean;
    };
    topContent: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["topContent"]>;
    };
    verticalAlign: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["verticalAlign"]>;
        default: import("./type").TdBaseTableProps["verticalAlign"];
        validator(val: import("./type").TdBaseTableProps["verticalAlign"]): boolean;
    };
    onActiveChange: import("vue").PropType<import("./type").TdBaseTableProps["onActiveChange"]>;
    onActiveRowAction: import("vue").PropType<import("./type").TdBaseTableProps["onActiveRowAction"]>;
    onCellClick: import("vue").PropType<import("./type").TdBaseTableProps["onCellClick"]>;
    onColumnResizeChange: import("vue").PropType<import("./type").TdBaseTableProps["onColumnResizeChange"]>;
    onPageChange: import("vue").PropType<import("./type").TdBaseTableProps["onPageChange"]>;
    onRowClick: import("vue").PropType<import("./type").TdBaseTableProps["onRowClick"]>;
    onRowDblclick: import("vue").PropType<import("./type").TdBaseTableProps["onRowDblclick"]>;
    onRowMousedown: import("vue").PropType<import("./type").TdBaseTableProps["onRowMousedown"]>;
    onRowMouseenter: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseenter"]>;
    onRowMouseleave: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseleave"]>;
    onRowMouseover: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseover"]>;
    onRowMouseup: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseup"]>;
    onScroll: import("vue").PropType<import("./type").TdBaseTableProps["onScroll"]>;
    onScrollX: import("vue").PropType<import("./type").TdBaseTableProps["onScrollX"]>;
    onScrollY: import("vue").PropType<import("./type").TdBaseTableProps["onScrollY"]>;
}>>, {
    thList: import("vue").ComputedRef<import("./interface").BaseTableColumns[]>;
    classPrefix: string;
    innerPagination: import("vue").Ref<{
        current?: number;
        defaultCurrent?: number;
        modelValue?: number;
        disabled?: boolean;
        foldedMaxPageBtn?: number;
        maxPageBtn?: number;
        pageEllipsisMode?: "mid" | "both-ends";
        pageSize?: number;
        defaultPageSize?: number;
        pageSizeOptions?: (number | {
            label: string;
            value: number;
        })[];
        selectProps?: {
            autoWidth?: boolean;
            autofocus?: boolean;
            borderless?: boolean;
            clearable?: boolean;
            collapsedItems?: (h: typeof import("vue").h, props: {
                value: import("..").SelectOption[];
                collapsedSelectedItems: import("..").SelectOption[];
                count: number;
                onClose: (context: {
                    index: number;
                    e?: MouseEvent;
                }) => void;
            }) => import("..").TNodeReturnValue;
            creatable?: boolean;
            disabled?: boolean;
            empty?: string | import("..").TNode;
            filter?: (filterWords: string, option: import("..").SelectOption) => boolean | Promise<boolean>;
            filterable?: boolean;
            inputProps?: {
                align?: "left" | "center" | "right";
                allowInputOverMax?: boolean;
                autoWidth?: boolean;
                autocomplete?: string;
                autofocus?: boolean;
                borderless?: boolean;
                clearable?: boolean;
                disabled?: boolean;
                format?: import("..").InputFormatType;
                inputClass?: any;
                label?: string | import("..").TNode;
                maxcharacter?: number;
                maxlength?: string | number;
                name?: string;
                placeholder?: string;
                prefixIcon?: import("..").TNode;
                readonly?: boolean;
                showClearIconOnEmpty?: boolean;
                showLimitNumber?: boolean;
                size?: import("..").SizeEnum;
                spellCheck?: boolean;
                status?: "default" | "success" | "warning" | "error";
                suffix?: string | import("..").TNode;
                suffixIcon?: import("..").TNode;
                tips?: string | import("..").TNode;
                type?: "text" | "number" | "url" | "tel" | "password" | "search" | "submit" | "hidden";
                value?: import("..").InputValue;
                defaultValue?: import("..").InputValue;
                modelValue?: import("..").InputValue;
                onBlur?: (value: import("..").InputValue, context: {
                    e: FocusEvent;
                }) => void;
                onChange?: (value: import("..").InputValue, context?: {
                    e?: InputEvent | MouseEvent | CompositionEvent;
                    trigger: "input" | "initial" | "clear";
                }) => void;
                onClear?: (context: {
                    e: MouseEvent;
                }) => void;
                onClick?: (context: {
                    e: MouseEvent;
                }) => void;
                onCompositionend?: (value: string, context: {
                    e: CompositionEvent;
                }) => void;
                onCompositionstart?: (value: string, context: {
                    e: CompositionEvent;
                }) => void;
                onEnter?: (value: import("..").InputValue, context: {
                    e: KeyboardEvent;
                }) => void;
                onFocus?: (value: import("..").InputValue, context: {
                    e: FocusEvent;
                }) => void;
                onKeydown?: (value: import("..").InputValue, context: {
                    e: KeyboardEvent;
                }) => void;
                onKeypress?: (value: import("..").InputValue, context: {
                    e: KeyboardEvent;
                }) => void;
                onKeyup?: (value: import("..").InputValue, context: {
                    e: KeyboardEvent;
                }) => void;
                onMouseenter?: (context: {
                    e: MouseEvent;
                }) => void;
                onMouseleave?: (context: {
                    e: MouseEvent;
                }) => void;
                onPaste?: (context: {
                    e: ClipboardEvent;
                    pasteValue: string;
                }) => void;
                onValidate?: (context: {
                    error?: "exceed-maximum" | "below-minimum";
                }) => void;
                onWheel?: (context: {
                    e: WheelEvent;
                }) => void;
            };
            inputValue?: string;
            defaultInputValue?: string;
            keys?: {
                value?: string;
                label?: string;
                disabled?: string;
            };
            label?: string | import("..").TNode;
            loading?: boolean;
            loadingText?: string | import("..").TNode;
            max?: number;
            minCollapsedNum?: number;
            multiple?: boolean;
            options?: (import("..").PlainObject | {
                checkAll?: boolean;
                content?: string | import("..").TNode;
                default?: string | import("..").TNode;
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number | boolean;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | import("..").TNode;
                    default?: string | import("..").TNode;
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number | boolean;
                }[];
                divider?: boolean;
                label?: string;
            })[];
            panelBottomContent?: string | import("..").TNode;
            panelTopContent?: string | import("..").TNode;
            placeholder?: string;
            popupProps?: {
                attach?: import("..").AttachNode;
                content?: string | import("..").TNode;
                default?: string | import("..").TNode;
                delay?: number | Array<number>;
                destroyOnClose?: boolean;
                disabled?: boolean;
                hideEmptyPopup?: boolean;
                overlayClassName?: any;
                overlayInnerClassName?: any;
                overlayInnerStyle?: import("..").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("..").Styles);
                overlayStyle?: import("..").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("..").Styles);
                placement?: import("..").PopupPlacement;
                popperOptions?: object;
                showArrow?: boolean;
                trigger?: "hover" | "click" | "focus" | "mousedown" | "context-menu";
                triggerElement?: string | import("..").TNode;
                visible?: boolean;
                defaultVisible?: boolean;
                modelValue?: boolean;
                zIndex?: number;
                onOverlayClick?: (context: {
                    e: MouseEvent;
                }) => void;
                onScroll?: (context: {
                    e: WheelEvent;
                }) => void;
                onScrollToBottom?: (context: {
                    e: WheelEvent;
                }) => void;
                onVisibleChange?: (visible: boolean, context: import("..").PopupVisibleChangeContext) => void;
            };
            popupVisible?: boolean;
            defaultPopupVisible?: boolean;
            prefixIcon?: import("..").TNode;
            readonly?: boolean;
            reserveKeyword?: boolean;
            scroll?: {
                bufferSize?: number;
                isFixedRowHeight?: boolean;
                rowHeight?: number;
                threshold?: number;
                type: "lazy" | "virtual";
            };
            selectInputProps?: {
                allowInput?: boolean;
                autoWidth?: boolean;
                autofocus?: boolean;
                borderless?: boolean;
                clearable?: boolean;
                collapsedItems?: import("..").TNode<{
                    value: import("..").SelectInputValue;
                    collapsedSelectedItems: import("..").SelectInputValue;
                    count: number;
                    onClose: (context: {
                        index: number;
                        e?: MouseEvent;
                    }) => void;
                }>;
                disabled?: boolean;
                inputProps?: {
                    align?: "left" | "center" | "right";
                    allowInputOverMax?: boolean;
                    autoWidth?: boolean;
                    autocomplete?: string;
                    autofocus?: boolean;
                    borderless?: boolean;
                    clearable?: boolean;
                    disabled?: boolean;
                    format?: import("..").InputFormatType;
                    inputClass?: any;
                    label?: string | import("..").TNode;
                    maxcharacter?: number;
                    maxlength?: string | number;
                    name?: string;
                    placeholder?: string;
                    prefixIcon?: import("..").TNode;
                    readonly?: boolean;
                    showClearIconOnEmpty?: boolean;
                    showLimitNumber?: boolean;
                    size?: import("..").SizeEnum;
                    spellCheck?: boolean;
                    status?: "default" | "success" | "warning" | "error";
                    suffix?: string | import("..").TNode;
                    suffixIcon?: import("..").TNode;
                    tips?: string | import("..").TNode;
                    type?: "text" | "number" | "url" | "tel" | "password" | "search" | "submit" | "hidden";
                    value?: import("..").InputValue;
                    defaultValue?: import("..").InputValue;
                    modelValue?: import("..").InputValue;
                    onBlur?: (value: import("..").InputValue, context: {
                        e: FocusEvent;
                    }) => void;
                    onChange?: (value: import("..").InputValue, context?: {
                        e?: InputEvent | MouseEvent | CompositionEvent;
                        trigger: "input" | "initial" | "clear";
                    }) => void;
                    onClear?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onClick?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onCompositionend?: (value: string, context: {
                        e: CompositionEvent;
                    }) => void;
                    onCompositionstart?: (value: string, context: {
                        e: CompositionEvent;
                    }) => void;
                    onEnter?: (value: import("..").InputValue, context: {
                        e: KeyboardEvent;
                    }) => void;
                    onFocus?: (value: import("..").InputValue, context: {
                        e: FocusEvent;
                    }) => void;
                    onKeydown?: (value: import("..").InputValue, context: {
                        e: KeyboardEvent;
                    }) => void;
                    onKeypress?: (value: import("..").InputValue, context: {
                        e: KeyboardEvent;
                    }) => void;
                    onKeyup?: (value: import("..").InputValue, context: {
                        e: KeyboardEvent;
                    }) => void;
                    onMouseenter?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onMouseleave?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onPaste?: (context: {
                        e: ClipboardEvent;
                        pasteValue: string;
                    }) => void;
                    onValidate?: (context: {
                        error?: "exceed-maximum" | "below-minimum";
                    }) => void;
                    onWheel?: (context: {
                        e: WheelEvent;
                    }) => void;
                };
                inputValue?: string;
                defaultInputValue?: string;
                keys?: {
                    label?: string;
                    value?: string;
                    children?: string;
                };
                label?: string | import("..").TNode;
                loading?: boolean;
                minCollapsedNum?: number;
                multiple?: boolean;
                panel?: string | import("..").TNode;
                placeholder?: string;
                popupProps?: {
                    attach?: import("..").AttachNode;
                    content?: string | import("..").TNode;
                    default?: string | import("..").TNode;
                    delay?: number | Array<number>;
                    destroyOnClose?: boolean;
                    disabled?: boolean;
                    hideEmptyPopup?: boolean;
                    overlayClassName?: any;
                    overlayInnerClassName?: any;
                    overlayInnerStyle?: import("..").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("..").Styles);
                    overlayStyle?: import("..").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("..").Styles);
                    placement?: import("..").PopupPlacement;
                    popperOptions?: object;
                    showArrow?: boolean;
                    trigger?: "hover" | "click" | "focus" | "mousedown" | "context-menu";
                    triggerElement?: string | import("..").TNode;
                    visible?: boolean;
                    defaultVisible?: boolean;
                    modelValue?: boolean;
                    zIndex?: number;
                    onOverlayClick?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onScroll?: (context: {
                        e: WheelEvent;
                    }) => void;
                    onScrollToBottom?: (context: {
                        e: WheelEvent;
                    }) => void;
                    onVisibleChange?: (visible: boolean, context: import("..").PopupVisibleChangeContext) => void;
                };
                popupVisible?: boolean;
                defaultPopupVisible?: boolean;
                prefixIcon?: import("..").TNode;
                readonly?: boolean;
                reserveKeyword?: boolean;
                size?: import("..").SizeEnum;
                status?: "default" | "success" | "warning" | "error";
                suffix?: string | import("..").TNode;
                suffixIcon?: import("..").TNode;
                tag?: string | import("..").TNode<{
                    value: string | number;
                }>;
                tagInputProps?: {
                    autoWidth?: boolean;
                    borderless?: boolean;
                    clearable?: boolean;
                    collapsedItems?: import("..").TNode<{
                        value: import("..").TagInputValue;
                        collapsedSelectedItems: import("..").TagInputValue;
                        count: number;
                        onClose: (context: {
                            index: number;
                            e?: MouseEvent;
                        }) => void;
                    }>;
                    disabled?: boolean;
                    dragSort?: boolean;
                    excessTagsDisplayType?: "scroll" | "break-line";
                    inputProps?: {
                        align?: "left" | "center" | "right";
                        allowInputOverMax?: boolean;
                        autoWidth?: boolean;
                        autocomplete?: string;
                        autofocus?: boolean;
                        borderless?: boolean;
                        clearable?: boolean;
                        disabled?: boolean;
                        format?: import("..").InputFormatType;
                        inputClass?: any;
                        label?: string | import("..").TNode;
                        maxcharacter?: number;
                        maxlength?: string | number;
                        name?: string;
                        placeholder?: string;
                        prefixIcon?: import("..").TNode;
                        readonly?: boolean;
                        showClearIconOnEmpty?: boolean;
                        showLimitNumber?: boolean;
                        size?: import("..").SizeEnum;
                        spellCheck?: boolean;
                        status?: "default" | "success" | "warning" | "error";
                        suffix?: string | import("..").TNode;
                        suffixIcon?: import("..").TNode;
                        tips?: string | import("..").TNode;
                        type?: "text" | "number" | "url" | "tel" | "password" | "search" | "submit" | "hidden";
                        value?: import("..").InputValue;
                        defaultValue?: import("..").InputValue;
                        modelValue?: import("..").InputValue;
                        onBlur?: (value: import("..").InputValue, context: {
                            e: FocusEvent;
                        }) => void;
                        onChange?: (value: import("..").InputValue, context?: {
                            e?: InputEvent | MouseEvent | CompositionEvent;
                            trigger: "input" | "initial" | "clear";
                        }) => void;
                        onClear?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onClick?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onCompositionend?: (value: string, context: {
                            e: CompositionEvent;
                        }) => void;
                        onCompositionstart?: (value: string, context: {
                            e: CompositionEvent;
                        }) => void;
                        onEnter?: (value: import("..").InputValue, context: {
                            e: KeyboardEvent;
                        }) => void;
                        onFocus?: (value: import("..").InputValue, context: {
                            e: FocusEvent;
                        }) => void;
                        onKeydown?: (value: import("..").InputValue, context: {
                            e: KeyboardEvent;
                        }) => void;
                        onKeypress?: (value: import("..").InputValue, context: {
                            e: KeyboardEvent;
                        }) => void;
                        onKeyup?: (value: import("..").InputValue, context: {
                            e: KeyboardEvent;
                        }) => void;
                        onMouseenter?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onMouseleave?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onPaste?: (context: {
                            e: ClipboardEvent;
                            pasteValue: string;
                        }) => void;
                        onValidate?: (context: {
                            error?: "exceed-maximum" | "below-minimum";
                        }) => void;
                        onWheel?: (context: {
                            e: WheelEvent;
                        }) => void;
                    };
                    inputValue?: string;
                    defaultInputValue?: string;
                    label?: string | import("..").TNode;
                    max?: number;
                    minCollapsedNum?: number;
                    placeholder?: string;
                    prefixIcon?: import("..").TNode;
                    readonly?: boolean;
                    size?: import("..").SizeEnum;
                    status?: "default" | "success" | "warning" | "error";
                    suffix?: string | import("..").TNode;
                    suffixIcon?: import("..").TNode;
                    tag?: string | import("..").TNode<{
                        value: string | number;
                    }>;
                    tagProps?: {
                        closable?: boolean;
                        color?: string;
                        content?: string | import("..").TNode;
                        default?: string | import("..").TNode;
                        disabled?: boolean;
                        icon?: import("..").TNode;
                        maxWidth?: string | number;
                        shape?: "square" | "round" | "mark";
                        size?: import("..").SizeEnum;
                        theme?: "default" | "primary" | "warning" | "danger" | "success";
                        title?: string;
                        variant?: "dark" | "light" | "outline" | "light-outline";
                        onClick?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onClose?: (context: {
                            e: MouseEvent;
                        }) => void;
                    };
                    tips?: string | import("..").TNode;
                    value?: (string | number)[];
                    defaultValue?: (string | number)[];
                    modelValue?: (string | number)[];
                    valueDisplay?: string | import("..").TNode<{
                        value: import("..").TagInputValue;
                        onClose: (index: number, item?: any) => void;
                    }>;
                    onBlur?: (value: import("..").TagInputValue, context: {
                        inputValue: string;
                        e: FocusEvent;
                    }) => void;
                    onChange?: (value: import("..").TagInputValue, context: import("..").TagInputChangeContext) => void;
                    onClear?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onClick?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onDragSort?: (context: import("..").TagInputDragSortContext) => void;
                    onEnter?: (value: import("..").TagInputValue, context: {
                        e: KeyboardEvent;
                        inputValue: string;
                    }) => void;
                    onFocus?: (value: import("..").TagInputValue, context: {
                        inputValue: string;
                        e: FocusEvent;
                    }) => void;
                    onInputChange?: (value: string, context?: import("..").InputValueChangeContext) => void;
                    onMouseenter?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onMouseleave?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onPaste?: (context: {
                        e: ClipboardEvent;
                        pasteValue: string;
                    }) => void;
                    onRemove?: (context: import("..").TagInputRemoveContext) => void;
                };
                tagProps?: {
                    closable?: boolean;
                    color?: string;
                    content?: string | import("..").TNode;
                    default?: string | import("..").TNode;
                    disabled?: boolean;
                    icon?: import("..").TNode;
                    maxWidth?: string | number;
                    shape?: "square" | "round" | "mark";
                    size?: import("..").SizeEnum;
                    theme?: "default" | "primary" | "warning" | "danger" | "success";
                    title?: string;
                    variant?: "dark" | "light" | "outline" | "light-outline";
                    onClick?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onClose?: (context: {
                        e: MouseEvent;
                    }) => void;
                };
                tips?: string | import("..").TNode;
                value?: any;
                valueDisplay?: string | import("..").TNode<{
                    value: import("..").TagInputValue;
                    onClose: (index: number, item?: any) => void;
                }>;
                onBlur?: (value: import("..").SelectInputValue, context: import("..").SelectInputBlurContext) => void;
                onClear?: (context: {
                    e: MouseEvent;
                }) => void;
                onEnter?: (value: import("..").SelectInputValue, context: {
                    e: KeyboardEvent;
                    inputValue: string;
                    tagInputValue?: import("..").TagInputValue;
                }) => void;
                onFocus?: (value: import("..").SelectInputValue, context: import("..").SelectInputFocusContext) => void;
                onInputChange?: (value: string, context?: import("..").SelectInputValueChangeContext) => void;
                onMouseenter?: (context: {
                    e: MouseEvent;
                }) => void;
                onMouseleave?: (context: {
                    e: MouseEvent;
                }) => void;
                onPaste?: (context: {
                    e: ClipboardEvent;
                    pasteValue: string;
                }) => void;
                onPopupVisibleChange?: (visible: boolean, context: import("..").PopupVisibleChangeContext) => void;
                onTagChange?: (value: import("..").TagInputValue, context: import("..").SelectInputChangeContext) => void;
            };
            showArrow?: boolean;
            size?: import("..").SizeEnum;
            status?: "default" | "success" | "warning" | "error";
            suffix?: string | import("..").TNode;
            suffixIcon?: import("..").TNode;
            tagInputProps?: {
                autoWidth?: boolean;
                borderless?: boolean;
                clearable?: boolean;
                collapsedItems?: import("..").TNode<{
                    value: import("..").TagInputValue;
                    collapsedSelectedItems: import("..").TagInputValue;
                    count: number;
                    onClose: (context: {
                        index: number;
                        e?: MouseEvent;
                    }) => void;
                }>;
                disabled?: boolean;
                dragSort?: boolean;
                excessTagsDisplayType?: "scroll" | "break-line";
                inputProps?: {
                    align?: "left" | "center" | "right";
                    allowInputOverMax?: boolean;
                    autoWidth?: boolean;
                    autocomplete?: string;
                    autofocus?: boolean;
                    borderless?: boolean;
                    clearable?: boolean;
                    disabled?: boolean;
                    format?: import("..").InputFormatType;
                    inputClass?: any;
                    label?: string | import("..").TNode;
                    maxcharacter?: number;
                    maxlength?: string | number;
                    name?: string;
                    placeholder?: string;
                    prefixIcon?: import("..").TNode;
                    readonly?: boolean;
                    showClearIconOnEmpty?: boolean;
                    showLimitNumber?: boolean;
                    size?: import("..").SizeEnum;
                    spellCheck?: boolean;
                    status?: "default" | "success" | "warning" | "error";
                    suffix?: string | import("..").TNode;
                    suffixIcon?: import("..").TNode;
                    tips?: string | import("..").TNode;
                    type?: "text" | "number" | "url" | "tel" | "password" | "search" | "submit" | "hidden";
                    value?: import("..").InputValue;
                    defaultValue?: import("..").InputValue;
                    modelValue?: import("..").InputValue;
                    onBlur?: (value: import("..").InputValue, context: {
                        e: FocusEvent;
                    }) => void;
                    onChange?: (value: import("..").InputValue, context?: {
                        e?: InputEvent | MouseEvent | CompositionEvent;
                        trigger: "input" | "initial" | "clear";
                    }) => void;
                    onClear?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onClick?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onCompositionend?: (value: string, context: {
                        e: CompositionEvent;
                    }) => void;
                    onCompositionstart?: (value: string, context: {
                        e: CompositionEvent;
                    }) => void;
                    onEnter?: (value: import("..").InputValue, context: {
                        e: KeyboardEvent;
                    }) => void;
                    onFocus?: (value: import("..").InputValue, context: {
                        e: FocusEvent;
                    }) => void;
                    onKeydown?: (value: import("..").InputValue, context: {
                        e: KeyboardEvent;
                    }) => void;
                    onKeypress?: (value: import("..").InputValue, context: {
                        e: KeyboardEvent;
                    }) => void;
                    onKeyup?: (value: import("..").InputValue, context: {
                        e: KeyboardEvent;
                    }) => void;
                    onMouseenter?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onMouseleave?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onPaste?: (context: {
                        e: ClipboardEvent;
                        pasteValue: string;
                    }) => void;
                    onValidate?: (context: {
                        error?: "exceed-maximum" | "below-minimum";
                    }) => void;
                    onWheel?: (context: {
                        e: WheelEvent;
                    }) => void;
                };
                inputValue?: string;
                defaultInputValue?: string;
                label?: string | import("..").TNode;
                max?: number;
                minCollapsedNum?: number;
                placeholder?: string;
                prefixIcon?: import("..").TNode;
                readonly?: boolean;
                size?: import("..").SizeEnum;
                status?: "default" | "success" | "warning" | "error";
                suffix?: string | import("..").TNode;
                suffixIcon?: import("..").TNode;
                tag?: string | import("..").TNode<{
                    value: string | number;
                }>;
                tagProps?: {
                    closable?: boolean;
                    color?: string;
                    content?: string | import("..").TNode;
                    default?: string | import("..").TNode;
                    disabled?: boolean;
                    icon?: import("..").TNode;
                    maxWidth?: string | number;
                    shape?: "square" | "round" | "mark";
                    size?: import("..").SizeEnum;
                    theme?: "default" | "primary" | "warning" | "danger" | "success";
                    title?: string;
                    variant?: "dark" | "light" | "outline" | "light-outline";
                    onClick?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onClose?: (context: {
                        e: MouseEvent;
                    }) => void;
                };
                tips?: string | import("..").TNode;
                value?: (string | number)[];
                defaultValue?: (string | number)[];
                modelValue?: (string | number)[];
                valueDisplay?: string | import("..").TNode<{
                    value: import("..").TagInputValue;
                    onClose: (index: number, item?: any) => void;
                }>;
                onBlur?: (value: import("..").TagInputValue, context: {
                    inputValue: string;
                    e: FocusEvent;
                }) => void;
                onChange?: (value: import("..").TagInputValue, context: import("..").TagInputChangeContext) => void;
                onClear?: (context: {
                    e: MouseEvent;
                }) => void;
                onClick?: (context: {
                    e: MouseEvent;
                }) => void;
                onDragSort?: (context: import("..").TagInputDragSortContext) => void;
                onEnter?: (value: import("..").TagInputValue, context: {
                    e: KeyboardEvent;
                    inputValue: string;
                }) => void;
                onFocus?: (value: import("..").TagInputValue, context: {
                    inputValue: string;
                    e: FocusEvent;
                }) => void;
                onInputChange?: (value: string, context?: import("..").InputValueChangeContext) => void;
                onMouseenter?: (context: {
                    e: MouseEvent;
                }) => void;
                onMouseleave?: (context: {
                    e: MouseEvent;
                }) => void;
                onPaste?: (context: {
                    e: ClipboardEvent;
                    pasteValue: string;
                }) => void;
                onRemove?: (context: import("..").TagInputRemoveContext) => void;
            };
            tagProps?: {
                closable?: boolean;
                color?: string;
                content?: string | import("..").TNode;
                default?: string | import("..").TNode;
                disabled?: boolean;
                icon?: import("..").TNode;
                maxWidth?: string | number;
                shape?: "square" | "round" | "mark";
                size?: import("..").SizeEnum;
                theme?: "default" | "primary" | "warning" | "danger" | "success";
                title?: string;
                variant?: "dark" | "light" | "outline" | "light-outline";
                onClick?: (context: {
                    e: MouseEvent;
                }) => void;
                onClose?: (context: {
                    e: MouseEvent;
                }) => void;
            };
            tips?: string | import("..").TNode;
            value?: any;
            defaultValue?: any;
            modelValue?: any;
            valueDisplay?: string | import("..").TNode<{
                value: import("..").SelectValue;
                onClose: (index: number) => void;
                displayValue?: import("..").SelectValue;
                label?: string;
            }>;
            valueType?: "value" | "object";
            onBlur?: (context: {
                value: import("..").SelectValue;
                e: FocusEvent | KeyboardEvent;
            }) => void;
            onChange?: (value: import("..").SelectValue, context: {
                option?: import("..").SelectOption;
                selectedOptions: import("..").SelectOption[];
                trigger: import("..").SelectValueChangeTrigger;
                e?: MouseEvent | KeyboardEvent;
            }) => void;
            onClear?: (context: {
                e: MouseEvent;
            }) => void;
            onCreate?: (value: string | number | boolean) => void;
            onEnter?: (context: {
                inputValue: string;
                e: KeyboardEvent;
                value: import("..").SelectValue;
            }) => void;
            onFocus?: (context: {
                value: import("..").SelectValue;
                e: FocusEvent | KeyboardEvent;
            }) => void;
            onInputChange?: (value: string, context?: import("..").SelectInputValueChangeContext) => void;
            onPopupVisibleChange?: (visible: boolean, context: import("..").PopupVisibleChangeContext) => void;
            onRemove?: (options: import("..").SelectRemoveContext<import("..").SelectOption>) => void;
            onSearch?: (filterWords: string, context: {
                e: KeyboardEvent;
            }) => void;
        };
        showFirstAndLastPageBtn?: boolean;
        showJumper?: boolean;
        showPageNumber?: boolean;
        showPageSize?: boolean;
        showPreviousAndNextBtn?: boolean;
        size?: "small" | "medium";
        theme?: "default" | "simple";
        total?: number;
        totalContent?: boolean | import("..").TNode;
        onChange?: (pageInfo: import("..").PageInfo) => void;
        onCurrentChange?: (current: number, pageInfo: import("..").PageInfo) => void;
        onPageSizeChange?: (pageSize: number, pageInfo: import("..").PageInfo) => void;
    }>;
    globalConfig: import("vue").ComputedRef<{} & (import("..").TableConfig | ({
        readonly expandIcon: any;
        readonly sortIcon: any;
        readonly filterIcon: any;
        readonly treeExpandAndFoldIcon: any;
        readonly hideSortTips: false;
        readonly size: "medium";
    } & {
        readonly empty: "暂无数据";
        readonly loadingText: "正在加载中，请稍后";
        readonly loadingMoreText: "点击加载更多";
        readonly filterInputPlaceholder: "请输入内容（无默认值）";
        readonly sortAscendingOperationText: "点击升序";
        readonly sortCancelOperationText: "点击取消排序";
        readonly sortDescendingOperationText: "点击降序";
        readonly clearFilterResultButtonText: "清空筛选";
        readonly columnConfigButtonText: "列配置";
        readonly columnConfigTitleText: "表格列配置";
        readonly columnConfigDescriptionText: "请选择需要在表格中显示的数据列";
        readonly confirmText: "确认";
        readonly cancelText: "取消";
        readonly resetText: "重置";
        readonly selectAllText: "全选";
        readonly searchResultText: "搜索“{result}”，找到 {count} 条结果";
    } & import("..").TableConfig))>;
    tableFootHeight: import("vue").Ref<number>;
    virtualScrollHeaderPos: import("vue").Ref<{
        left: number;
        top: number;
    }>;
    tableSize: import("vue").ComputedRef<import("..").SizeEnum>;
    tableWidth: import("vue").Ref<number>;
    tableElmWidth: import("vue").Ref<number>;
    tableRef: import("vue").Ref<HTMLDivElement>;
    tableElmRef: import("vue").Ref<HTMLTableElement>;
    sizeClassNames: {
        small: string;
        medium: string;
        large: string;
        default: string;
        xs: string;
        xl: string;
        block: string;
    };
    tableBaseClass: {
        table: string;
        columnResizableTable: string;
        overflowVisible: string;
        body: string;
        content: string;
        topContent: string;
        bottomContent: string;
        paginationWrap: string;
        tdLastRow: string;
        tdFirstCol: string;
        thCellInner: string;
        tableRowEdit: string;
        cellEditable: string;
        cellEditWrap: string;
        bordered: string;
        striped: string;
        hover: string;
        loading: string;
        rowspanAndColspan: string;
        empty: string;
        emptyRow: string;
        headerFixed: string;
        columnFixed: string;
        widthOverflow: string;
        multipleHeader: string;
        footerAffixed: string;
        horizontalBarAffixed: string;
        affixedHeader: string;
        affixedHeaderElm: string;
        affixedFooterElm: string;
        affixedFooterWrap: string;
        scrollbarDivider: string;
        fullHeight: string;
        resizeLine: string;
        obviousScrollbar: string;
        affixedHeaderWrap: string;
    };
    spansAndLeafNodes: import("vue").ComputedRef<{
        rowspanAndColspanMap: import("./interface").ThRowspanAndColspan;
        leafColumns: import("./interface").BaseTableColumns;
    }>;
    dynamicBaseTableClasses: import("vue").ComputedRef<((string | {
        [x: string]: boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue) | Partial<import("..").TdAffixProps> | import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>;
    })[] | {
        [x: string]: boolean | "single" | "multiple";
    })[]>;
    tableContentStyles: import("vue").ComputedRef<{
        height: string | number;
        maxHeight: string | number;
    }>;
    tableElementStyles: import("vue").ComputedRef<{
        width: string | number;
    }>;
    dividerBottom: import("vue").ComputedRef<number>;
    virtualScrollClasses: {
        cursor: string;
        header: string;
    };
    tableLayoutClasses: {
        auto: string;
        fixed: string;
    };
    tableElmClasses: import("vue").ComputedRef<string[][]>;
    tableContentRef: import("vue").Ref<HTMLDivElement>;
    isFixedHeader: import("vue").Ref<boolean>;
    isWidthOverflow: import("vue").Ref<boolean>;
    isFixedColumn: import("vue").Ref<boolean>;
    rowAndColFixedPosition: import("vue").Ref<import("./interface").RowAndColFixedPosition>;
    showColumnShadow: {
        left: boolean;
        right: boolean;
    };
    thWidthList: import("vue").Ref<{
        [colKey: string]: number;
    }>;
    isPaginateData: import("vue").Ref<boolean>;
    dataSource: import("vue").Ref<{
        [x: string]: any;
        children?: any[];
    }[]>;
    affixHeaderRef: import("vue").Ref<HTMLDivElement>;
    affixFooterRef: import("vue").Ref<HTMLDivElement>;
    bottomContentRef: import("vue").Ref<HTMLDivElement>;
    paginationRef: import("vue").Ref<HTMLDivElement>;
    showAffixHeader: import("vue").Ref<boolean>;
    showAffixFooter: import("vue").Ref<boolean>;
    scrollbarWidth: import("vue").Ref<number>;
    isMultipleHeader: import("vue").ComputedRef<boolean>;
    showRightDivider: import("vue").ComputedRef<boolean>;
    resizeLineRef: import("vue").Ref<HTMLDivElement>;
    resizeLineStyle: {
        display: string;
        height: string;
        left: string;
        bottom: string;
    };
    columnResizeParams: {
        resizeLineRef: import("vue").Ref<HTMLDivElement>;
        resizeLineStyle: {
            display: string;
            height: string;
            left: string;
            bottom: string;
        };
        onColumnMouseover: (e: MouseEvent, col: import("./type").BaseTableCol<import("./type").TableRowData>) => void;
        onColumnMousedown: (e: MouseEvent, col: import("./type").BaseTableCol<import("./type").TableRowData>, index: number) => void;
        setEffectColMap: (nodes: import("./type").BaseTableCol<import("./type").TableRowData>[], parent: import("./type").BaseTableCol<import("./type").TableRowData> | null) => void;
    };
    horizontalScrollbarRef: import("vue").Ref<HTMLDivElement>;
    tableBodyRef: import("vue").Ref<import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        activeRowKeys?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowKeys"]>;
            default: import("./type").TdBaseTableProps["activeRowKeys"];
        };
        defaultActiveRowKeys?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["defaultActiveRowKeys"]>;
            default: () => import("./type").TdBaseTableProps["defaultActiveRowKeys"];
        };
        activeRowType?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowType"]>;
            default: import("./type").TdBaseTableProps["activeRowType"];
        };
        allowResizeColumnWidth?: {
            type: BooleanConstructor;
            default: any;
        };
        attach?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["attach"]>;
        };
        bordered?: BooleanConstructor;
        bottomContent?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["bottomContent"]>;
        };
        cellEmptyContent?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["cellEmptyContent"]>;
        };
        columns: import("vue").PropType<import("./type").BaseTableCol<import("./type").TableRowData>[]> | {
            type: import("vue").PropType<import("./type").TdBaseTableProps["columns"]>;
            default: () => import("./type").TdBaseTableProps["columns"];
        };
        data: import("vue").PropType<import("./type").TableRowData[]> | {
            type: import("vue").PropType<import("./type").TdBaseTableProps["data"]>;
            default: () => import("./type").TdBaseTableProps["data"];
        };
        disableDataPage?: BooleanConstructor;
        disableSpaceInactiveRow?: {
            type: BooleanConstructor;
            default: any;
        };
        empty?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["empty"]>;
            default: import("./type").TdBaseTableProps["empty"];
        };
        firstFullRow: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue)> | {
            type: import("vue").PropType<import("./type").TdBaseTableProps["firstFullRow"]>;
        };
        fixedRows?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["fixedRows"]>;
        };
        footData?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footData"]>;
            default: () => import("./type").TdBaseTableProps["footData"];
        };
        footerAffixProps?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixProps"]>;
        };
        footerAffixedBottom?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixedBottom"]>;
            default: import("./type").TdBaseTableProps["footerAffixedBottom"];
        };
        footerSummary?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerSummary"]>;
        };
        headerAffixProps?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixProps"]>;
        };
        headerAffixedTop?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixedTop"]>;
            default: import("./type").TdBaseTableProps["headerAffixedTop"];
        };
        height?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["height"]>;
        };
        horizontalScrollAffixedBottom?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["horizontalScrollAffixedBottom"]>;
        };
        hover?: BooleanConstructor;
        keyboardRowHover?: {
            type: BooleanConstructor;
            default: boolean;
        };
        lastFullRow: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue)> | {
            type: import("vue").PropType<import("./type").TdBaseTableProps["lastFullRow"]>;
        };
        lazyLoad?: BooleanConstructor;
        loading?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["loading"]>;
            default: import("./type").TdBaseTableProps["loading"];
        };
        loadingProps?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["loadingProps"]>;
        };
        locale?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["locale"]>;
        };
        maxHeight?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["maxHeight"]>;
        };
        pagination?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["pagination"]>;
        };
        paginationAffixedBottom?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["paginationAffixedBottom"]>;
        };
        resizable?: BooleanConstructor;
        rowAttributes?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowAttributes"]>;
        };
        rowClassName?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowClassName"]>;
        };
        rowKey?: {
            type: StringConstructor;
            default: string;
            required: boolean;
        };
        rowspanAndColspan?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspan"]>;
        };
        rowspanAndColspanInFooter?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspanInFooter"]>;
        };
        scroll?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["scroll"]>;
        };
        showHeader?: {
            type: BooleanConstructor;
            default: boolean;
        };
        size?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["size"]>;
            validator(val: import("./type").TdBaseTableProps["size"]): boolean;
        };
        stripe?: BooleanConstructor;
        tableContentWidth?: {
            type: StringConstructor;
            default: string;
        };
        tableLayout?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["tableLayout"]>;
            default: import("./type").TdBaseTableProps["tableLayout"];
            validator(val: import("./type").TdBaseTableProps["tableLayout"]): boolean;
        };
        topContent?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["topContent"]>;
        };
        verticalAlign?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["verticalAlign"]>;
            default: import("./type").TdBaseTableProps["verticalAlign"];
            validator(val: import("./type").TdBaseTableProps["verticalAlign"]): boolean;
        };
        onActiveChange?: import("vue").PropType<import("./type").TdBaseTableProps["onActiveChange"]>;
        onActiveRowAction?: import("vue").PropType<import("./type").TdBaseTableProps["onActiveRowAction"]>;
        onCellClick?: import("vue").PropType<import("./type").TdBaseTableProps["onCellClick"]>;
        onColumnResizeChange?: import("vue").PropType<import("./type").TdBaseTableProps["onColumnResizeChange"]>;
        onPageChange?: import("vue").PropType<import("./type").TdBaseTableProps["onPageChange"]>;
        onRowClick?: import("vue").PropType<import("./type").TdBaseTableProps["onRowClick"]>;
        onRowDblclick?: import("vue").PropType<import("./type").TdBaseTableProps["onRowDblclick"]>;
        onRowMousedown?: import("vue").PropType<import("./type").TdBaseTableProps["onRowMousedown"]>;
        onRowMouseenter?: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseenter"]>;
        onRowMouseleave?: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseleave"]>;
        onRowMouseover?: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseover"]>;
        onRowMouseup?: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseup"]>;
        onScroll?: import("vue").PropType<import("./type").TdBaseTableProps["onScroll"]>;
        onScrollX?: import("vue").PropType<import("./type").TdBaseTableProps["onScrollX"]>;
        onScrollY?: import("vue").PropType<import("./type").TdBaseTableProps["onScrollY"]>;
        classPrefix: StringConstructor;
        ellipsisOverlayClassName: StringConstructor;
        rowAndColFixedPosition: import("vue").PropType<import("./tbody").TableBodyProps["rowAndColFixedPosition"]>;
        showColumnShadow: import("vue").PropType<import("./tbody").TableBodyProps["showColumnShadow"]>;
        tableElm: {};
        tableWidth: NumberConstructor;
        isWidthOverflow: BooleanConstructor;
        virtualConfig: import("vue").PropType<import("../hooks/useVirtualScrollNew").VirtualScrollConfig>;
        tableContentElm: {};
        handleRowMounted: import("vue").PropType<import("./tbody").TableBodyProps["handleRowMounted"]>;
        renderExpandedRow: import("vue").PropType<import("./tbody").TableBodyProps["renderExpandedRow"]>;
        activeRow: import("vue").PropType<Array<string | number>>;
        hoverRow: (NumberConstructor | StringConstructor)[];
    }>>, {
        t: <T>(pattern: T, ...args: any[]) => any;
        globalConfig: import("vue").ComputedRef<{} & (import("..").TableConfig | ({
            readonly expandIcon: any;
            readonly sortIcon: any;
            readonly filterIcon: any;
            readonly treeExpandAndFoldIcon: any;
            readonly hideSortTips: false;
            readonly size: "medium";
        } & {
            readonly empty: "暂无数据";
            readonly loadingText: "正在加载中，请稍后";
            readonly loadingMoreText: "点击加载更多";
            readonly filterInputPlaceholder: "请输入内容（无默认值）";
            readonly sortAscendingOperationText: "点击升序";
            readonly sortCancelOperationText: "点击取消排序";
            readonly sortDescendingOperationText: "点击降序";
            readonly clearFilterResultButtonText: "清空筛选";
            readonly columnConfigButtonText: "列配置";
            readonly columnConfigTitleText: "表格列配置";
            readonly columnConfigDescriptionText: "请选择需要在表格中显示的数据列";
            readonly confirmText: "确认";
            readonly cancelText: "取消";
            readonly resetText: "重置";
            readonly selectAllText: "全选";
            readonly searchResultText: "搜索“{result}”，找到 {count} 条结果";
        } & import("..").TableConfig))>;
        renderTNode: (name: string, options?: import("../utils/render-tnode").OptionsType) => any;
        tableFullRowClasses: {
            base: string;
            innerFullRow: string;
            innerFullElement: string;
            firstFullRow: string;
            lastFullRow: string;
        };
        tbodyClasses: import("vue").ComputedRef<string[]>;
        tableBaseClass: {
            table: string;
            columnResizableTable: string;
            overflowVisible: string;
            body: string;
            content: string;
            topContent: string;
            bottomContent: string;
            paginationWrap: string;
            tdLastRow: string;
            tdFirstCol: string;
            thCellInner: string;
            tableRowEdit: string;
            cellEditable: string;
            cellEditWrap: string;
            bordered: string;
            striped: string;
            hover: string;
            loading: string;
            rowspanAndColspan: string;
            empty: string;
            emptyRow: string;
            headerFixed: string;
            columnFixed: string;
            widthOverflow: string;
            multipleHeader: string;
            footerAffixed: string;
            horizontalBarAffixed: string;
            affixedHeader: string;
            affixedHeaderElm: string;
            affixedFooterElm: string;
            affixedFooterWrap: string;
            scrollbarDivider: string;
            fullHeight: string;
            resizeLine: string;
            obviousScrollbar: string;
            affixedHeaderWrap: string;
        };
        skipSpansMap: import("vue").Ref<Map<string, import("./hooks/useRowspanAndColspan").SkipSpansValue>>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        activeRowKeys?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowKeys"]>;
            default: import("./type").TdBaseTableProps["activeRowKeys"];
        };
        defaultActiveRowKeys?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["defaultActiveRowKeys"]>;
            default: () => import("./type").TdBaseTableProps["defaultActiveRowKeys"];
        };
        activeRowType?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowType"]>;
            default: import("./type").TdBaseTableProps["activeRowType"];
        };
        allowResizeColumnWidth?: {
            type: BooleanConstructor;
            default: any;
        };
        attach?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["attach"]>;
        };
        bordered?: BooleanConstructor;
        bottomContent?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["bottomContent"]>;
        };
        cellEmptyContent?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["cellEmptyContent"]>;
        };
        columns: import("vue").PropType<import("./type").BaseTableCol<import("./type").TableRowData>[]> | {
            type: import("vue").PropType<import("./type").TdBaseTableProps["columns"]>;
            default: () => import("./type").TdBaseTableProps["columns"];
        };
        data: import("vue").PropType<import("./type").TableRowData[]> | {
            type: import("vue").PropType<import("./type").TdBaseTableProps["data"]>;
            default: () => import("./type").TdBaseTableProps["data"];
        };
        disableDataPage?: BooleanConstructor;
        disableSpaceInactiveRow?: {
            type: BooleanConstructor;
            default: any;
        };
        empty?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["empty"]>;
            default: import("./type").TdBaseTableProps["empty"];
        };
        firstFullRow: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue)> | {
            type: import("vue").PropType<import("./type").TdBaseTableProps["firstFullRow"]>;
        };
        fixedRows?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["fixedRows"]>;
        };
        footData?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footData"]>;
            default: () => import("./type").TdBaseTableProps["footData"];
        };
        footerAffixProps?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixProps"]>;
        };
        footerAffixedBottom?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixedBottom"]>;
            default: import("./type").TdBaseTableProps["footerAffixedBottom"];
        };
        footerSummary?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerSummary"]>;
        };
        headerAffixProps?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixProps"]>;
        };
        headerAffixedTop?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixedTop"]>;
            default: import("./type").TdBaseTableProps["headerAffixedTop"];
        };
        height?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["height"]>;
        };
        horizontalScrollAffixedBottom?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["horizontalScrollAffixedBottom"]>;
        };
        hover?: BooleanConstructor;
        keyboardRowHover?: {
            type: BooleanConstructor;
            default: boolean;
        };
        lastFullRow: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue)> | {
            type: import("vue").PropType<import("./type").TdBaseTableProps["lastFullRow"]>;
        };
        lazyLoad?: BooleanConstructor;
        loading?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["loading"]>;
            default: import("./type").TdBaseTableProps["loading"];
        };
        loadingProps?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["loadingProps"]>;
        };
        locale?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["locale"]>;
        };
        maxHeight?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["maxHeight"]>;
        };
        pagination?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["pagination"]>;
        };
        paginationAffixedBottom?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["paginationAffixedBottom"]>;
        };
        resizable?: BooleanConstructor;
        rowAttributes?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowAttributes"]>;
        };
        rowClassName?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowClassName"]>;
        };
        rowKey?: {
            type: StringConstructor;
            default: string;
            required: boolean;
        };
        rowspanAndColspan?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspan"]>;
        };
        rowspanAndColspanInFooter?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspanInFooter"]>;
        };
        scroll?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["scroll"]>;
        };
        showHeader?: {
            type: BooleanConstructor;
            default: boolean;
        };
        size?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["size"]>;
            validator(val: import("./type").TdBaseTableProps["size"]): boolean;
        };
        stripe?: BooleanConstructor;
        tableContentWidth?: {
            type: StringConstructor;
            default: string;
        };
        tableLayout?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["tableLayout"]>;
            default: import("./type").TdBaseTableProps["tableLayout"];
            validator(val: import("./type").TdBaseTableProps["tableLayout"]): boolean;
        };
        topContent?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["topContent"]>;
        };
        verticalAlign?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["verticalAlign"]>;
            default: import("./type").TdBaseTableProps["verticalAlign"];
            validator(val: import("./type").TdBaseTableProps["verticalAlign"]): boolean;
        };
        onActiveChange?: import("vue").PropType<import("./type").TdBaseTableProps["onActiveChange"]>;
        onActiveRowAction?: import("vue").PropType<import("./type").TdBaseTableProps["onActiveRowAction"]>;
        onCellClick?: import("vue").PropType<import("./type").TdBaseTableProps["onCellClick"]>;
        onColumnResizeChange?: import("vue").PropType<import("./type").TdBaseTableProps["onColumnResizeChange"]>;
        onPageChange?: import("vue").PropType<import("./type").TdBaseTableProps["onPageChange"]>;
        onRowClick?: import("vue").PropType<import("./type").TdBaseTableProps["onRowClick"]>;
        onRowDblclick?: import("vue").PropType<import("./type").TdBaseTableProps["onRowDblclick"]>;
        onRowMousedown?: import("vue").PropType<import("./type").TdBaseTableProps["onRowMousedown"]>;
        onRowMouseenter?: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseenter"]>;
        onRowMouseleave?: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseleave"]>;
        onRowMouseover?: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseover"]>;
        onRowMouseup?: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseup"]>;
        onScroll?: import("vue").PropType<import("./type").TdBaseTableProps["onScroll"]>;
        onScrollX?: import("vue").PropType<import("./type").TdBaseTableProps["onScrollX"]>;
        onScrollY?: import("vue").PropType<import("./type").TdBaseTableProps["onScrollY"]>;
        classPrefix: StringConstructor;
        ellipsisOverlayClassName: StringConstructor;
        rowAndColFixedPosition: import("vue").PropType<import("./tbody").TableBodyProps["rowAndColFixedPosition"]>;
        showColumnShadow: import("vue").PropType<import("./tbody").TableBodyProps["showColumnShadow"]>;
        tableElm: {};
        tableWidth: NumberConstructor;
        isWidthOverflow: BooleanConstructor;
        virtualConfig: import("vue").PropType<import("../hooks/useVirtualScrollNew").VirtualScrollConfig>;
        tableContentElm: {};
        handleRowMounted: import("vue").PropType<import("./tbody").TableBodyProps["handleRowMounted"]>;
        renderExpandedRow: import("vue").PropType<import("./tbody").TableBodyProps["renderExpandedRow"]>;
        activeRow: import("vue").PropType<Array<string | number>>;
        hoverRow: (NumberConstructor | StringConstructor)[];
    }>>, {
        loading?: boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        empty?: string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        hover?: boolean;
        tableLayout?: "auto" | "fixed";
        verticalAlign?: "top" | "middle" | "bottom";
        lazyLoad?: boolean;
        bordered?: boolean;
        stripe?: boolean;
        activeRowKeys?: (string | number)[];
        defaultActiveRowKeys?: (string | number)[];
        activeRowType?: "single" | "multiple";
        allowResizeColumnWidth?: boolean;
        disableDataPage?: boolean;
        disableSpaceInactiveRow?: boolean;
        footData?: import("./type").TableRowData[];
        footerAffixedBottom?: boolean | Partial<import("..").TdAffixProps>;
        headerAffixedTop?: boolean | Partial<import("..").TdAffixProps>;
        keyboardRowHover?: boolean;
        resizable?: boolean;
        rowKey?: string;
        showHeader?: boolean;
        tableContentWidth?: string;
        isWidthOverflow: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        activeRowKeys?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowKeys"]>;
            default: import("./type").TdBaseTableProps["activeRowKeys"];
        };
        defaultActiveRowKeys?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["defaultActiveRowKeys"]>;
            default: () => import("./type").TdBaseTableProps["defaultActiveRowKeys"];
        };
        activeRowType?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowType"]>;
            default: import("./type").TdBaseTableProps["activeRowType"];
        };
        allowResizeColumnWidth?: {
            type: BooleanConstructor;
            default: any;
        };
        attach?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["attach"]>;
        };
        bordered?: BooleanConstructor;
        bottomContent?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["bottomContent"]>;
        };
        cellEmptyContent?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["cellEmptyContent"]>;
        };
        columns: import("vue").PropType<import("./type").BaseTableCol<import("./type").TableRowData>[]> | {
            type: import("vue").PropType<import("./type").TdBaseTableProps["columns"]>;
            default: () => import("./type").TdBaseTableProps["columns"];
        };
        data: import("vue").PropType<import("./type").TableRowData[]> | {
            type: import("vue").PropType<import("./type").TdBaseTableProps["data"]>;
            default: () => import("./type").TdBaseTableProps["data"];
        };
        disableDataPage?: BooleanConstructor;
        disableSpaceInactiveRow?: {
            type: BooleanConstructor;
            default: any;
        };
        empty?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["empty"]>;
            default: import("./type").TdBaseTableProps["empty"];
        };
        firstFullRow: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue)> | {
            type: import("vue").PropType<import("./type").TdBaseTableProps["firstFullRow"]>;
        };
        fixedRows?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["fixedRows"]>;
        };
        footData?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footData"]>;
            default: () => import("./type").TdBaseTableProps["footData"];
        };
        footerAffixProps?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixProps"]>;
        };
        footerAffixedBottom?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixedBottom"]>;
            default: import("./type").TdBaseTableProps["footerAffixedBottom"];
        };
        footerSummary?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerSummary"]>;
        };
        headerAffixProps?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixProps"]>;
        };
        headerAffixedTop?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixedTop"]>;
            default: import("./type").TdBaseTableProps["headerAffixedTop"];
        };
        height?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["height"]>;
        };
        horizontalScrollAffixedBottom?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["horizontalScrollAffixedBottom"]>;
        };
        hover?: BooleanConstructor;
        keyboardRowHover?: {
            type: BooleanConstructor;
            default: boolean;
        };
        lastFullRow: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue)> | {
            type: import("vue").PropType<import("./type").TdBaseTableProps["lastFullRow"]>;
        };
        lazyLoad?: BooleanConstructor;
        loading?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["loading"]>;
            default: import("./type").TdBaseTableProps["loading"];
        };
        loadingProps?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["loadingProps"]>;
        };
        locale?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["locale"]>;
        };
        maxHeight?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["maxHeight"]>;
        };
        pagination?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["pagination"]>;
        };
        paginationAffixedBottom?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["paginationAffixedBottom"]>;
        };
        resizable?: BooleanConstructor;
        rowAttributes?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowAttributes"]>;
        };
        rowClassName?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowClassName"]>;
        };
        rowKey?: {
            type: StringConstructor;
            default: string;
            required: boolean;
        };
        rowspanAndColspan?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspan"]>;
        };
        rowspanAndColspanInFooter?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspanInFooter"]>;
        };
        scroll?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["scroll"]>;
        };
        showHeader?: {
            type: BooleanConstructor;
            default: boolean;
        };
        size?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["size"]>;
            validator(val: import("./type").TdBaseTableProps["size"]): boolean;
        };
        stripe?: BooleanConstructor;
        tableContentWidth?: {
            type: StringConstructor;
            default: string;
        };
        tableLayout?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["tableLayout"]>;
            default: import("./type").TdBaseTableProps["tableLayout"];
            validator(val: import("./type").TdBaseTableProps["tableLayout"]): boolean;
        };
        topContent?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["topContent"]>;
        };
        verticalAlign?: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["verticalAlign"]>;
            default: import("./type").TdBaseTableProps["verticalAlign"];
            validator(val: import("./type").TdBaseTableProps["verticalAlign"]): boolean;
        };
        onActiveChange?: import("vue").PropType<import("./type").TdBaseTableProps["onActiveChange"]>;
        onActiveRowAction?: import("vue").PropType<import("./type").TdBaseTableProps["onActiveRowAction"]>;
        onCellClick?: import("vue").PropType<import("./type").TdBaseTableProps["onCellClick"]>;
        onColumnResizeChange?: import("vue").PropType<import("./type").TdBaseTableProps["onColumnResizeChange"]>;
        onPageChange?: import("vue").PropType<import("./type").TdBaseTableProps["onPageChange"]>;
        onRowClick?: import("vue").PropType<import("./type").TdBaseTableProps["onRowClick"]>;
        onRowDblclick?: import("vue").PropType<import("./type").TdBaseTableProps["onRowDblclick"]>;
        onRowMousedown?: import("vue").PropType<import("./type").TdBaseTableProps["onRowMousedown"]>;
        onRowMouseenter?: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseenter"]>;
        onRowMouseleave?: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseleave"]>;
        onRowMouseover?: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseover"]>;
        onRowMouseup?: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseup"]>;
        onScroll?: import("vue").PropType<import("./type").TdBaseTableProps["onScroll"]>;
        onScrollX?: import("vue").PropType<import("./type").TdBaseTableProps["onScrollX"]>;
        onScrollY?: import("vue").PropType<import("./type").TdBaseTableProps["onScrollY"]>;
        classPrefix: StringConstructor;
        ellipsisOverlayClassName: StringConstructor;
        rowAndColFixedPosition: import("vue").PropType<import("./tbody").TableBodyProps["rowAndColFixedPosition"]>;
        showColumnShadow: import("vue").PropType<import("./tbody").TableBodyProps["showColumnShadow"]>;
        tableElm: {};
        tableWidth: NumberConstructor;
        isWidthOverflow: BooleanConstructor;
        virtualConfig: import("vue").PropType<import("../hooks/useVirtualScrollNew").VirtualScrollConfig>;
        tableContentElm: {};
        handleRowMounted: import("vue").PropType<import("./tbody").TableBodyProps["handleRowMounted"]>;
        renderExpandedRow: import("vue").PropType<import("./tbody").TableBodyProps["renderExpandedRow"]>;
        activeRow: import("vue").PropType<Array<string | number>>;
        hoverRow: (NumberConstructor | StringConstructor)[];
    }>>, {
        t: <T>(pattern: T, ...args: any[]) => any;
        globalConfig: import("vue").ComputedRef<{} & (import("..").TableConfig | ({
            readonly expandIcon: any;
            readonly sortIcon: any;
            readonly filterIcon: any;
            readonly treeExpandAndFoldIcon: any;
            readonly hideSortTips: false;
            readonly size: "medium";
        } & {
            readonly empty: "暂无数据";
            readonly loadingText: "正在加载中，请稍后";
            readonly loadingMoreText: "点击加载更多";
            readonly filterInputPlaceholder: "请输入内容（无默认值）";
            readonly sortAscendingOperationText: "点击升序";
            readonly sortCancelOperationText: "点击取消排序";
            readonly sortDescendingOperationText: "点击降序";
            readonly clearFilterResultButtonText: "清空筛选";
            readonly columnConfigButtonText: "列配置";
            readonly columnConfigTitleText: "表格列配置";
            readonly columnConfigDescriptionText: "请选择需要在表格中显示的数据列";
            readonly confirmText: "确认";
            readonly cancelText: "取消";
            readonly resetText: "重置";
            readonly selectAllText: "全选";
            readonly searchResultText: "搜索“{result}”，找到 {count} 条结果";
        } & import("..").TableConfig))>;
        renderTNode: (name: string, options?: import("../utils/render-tnode").OptionsType) => any;
        tableFullRowClasses: {
            base: string;
            innerFullRow: string;
            innerFullElement: string;
            firstFullRow: string;
            lastFullRow: string;
        };
        tbodyClasses: import("vue").ComputedRef<string[]>;
        tableBaseClass: {
            table: string;
            columnResizableTable: string;
            overflowVisible: string;
            body: string;
            content: string;
            topContent: string;
            bottomContent: string;
            paginationWrap: string;
            tdLastRow: string;
            tdFirstCol: string;
            thCellInner: string;
            tableRowEdit: string;
            cellEditable: string;
            cellEditWrap: string;
            bordered: string;
            striped: string;
            hover: string;
            loading: string;
            rowspanAndColspan: string;
            empty: string;
            emptyRow: string;
            headerFixed: string;
            columnFixed: string;
            widthOverflow: string;
            multipleHeader: string;
            footerAffixed: string;
            horizontalBarAffixed: string;
            affixedHeader: string;
            affixedHeaderElm: string;
            affixedFooterElm: string;
            affixedFooterWrap: string;
            scrollbarDivider: string;
            fullHeight: string;
            resizeLine: string;
            obviousScrollbar: string;
            affixedHeaderWrap: string;
        };
        skipSpansMap: import("vue").Ref<Map<string, import("./hooks/useRowspanAndColspan").SkipSpansValue>>;
    }, {}, {}, {}, {
        loading?: boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        empty?: string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        hover?: boolean;
        tableLayout?: "auto" | "fixed";
        verticalAlign?: "top" | "middle" | "bottom";
        lazyLoad?: boolean;
        bordered?: boolean;
        stripe?: boolean;
        activeRowKeys?: (string | number)[];
        defaultActiveRowKeys?: (string | number)[];
        activeRowType?: "single" | "multiple";
        allowResizeColumnWidth?: boolean;
        disableDataPage?: boolean;
        disableSpaceInactiveRow?: boolean;
        footData?: import("./type").TableRowData[];
        footerAffixedBottom?: boolean | Partial<import("..").TdAffixProps>;
        headerAffixedTop?: boolean | Partial<import("..").TdAffixProps>;
        keyboardRowHover?: boolean;
        resizable?: boolean;
        rowKey?: string;
        showHeader?: boolean;
        tableContentWidth?: string;
        isWidthOverflow: boolean;
    }>>;
    virtualConfig: {
        visibleData: import("vue").Ref<any[]>;
        translateY: import("vue").Ref<number>;
        scrollHeight: import("vue").Ref<number>;
        isVirtualScroll: import("vue").ComputedRef<boolean>;
        handleScroll: () => void;
        handleRowMounted: (rowData: any) => void;
        scrollToElement: (p: import("../hooks/useVirtualScrollNew").ScrollToElementParams) => void;
    };
    showAffixPagination: import("vue").Ref<boolean>;
    tActiveRow: import("vue").Ref<(string | number)[]>;
    hoverRow: import("vue").Ref<string | number>;
    showElement: import("vue").Ref<boolean>;
    scrollToElement: (params: import("..").ComponentScrollToElementParams) => void;
    renderPagination: () => JSX.Element;
    renderTNode: (name: string, options?: import("../utils/render-tnode").OptionsType) => any;
    onFixedChange: () => void;
    onHorizontalScroll: (scrollElement?: HTMLElement) => void;
    updateAffixHeaderOrFooter: () => void;
    onInnerVirtualScroll: (e: WheelEvent) => void;
    refreshTable: () => void;
    scrollColumnIntoView: (colKey: string) => void;
    onTableFocus: () => void;
    onTableBlur: () => void;
    onInnerRowClick: (context: import("./type").RowEventContext<import("./type").TableRowData>) => void;
    paginationAffixRef: import("vue").Ref<any>;
    horizontalScrollAffixRef: import("vue").Ref<any>;
    headerTopAffixRef: import("vue").Ref<any>;
    footerBottomAffixRef: import("vue").Ref<any>;
    tableRefTabIndex: import("vue").Ref<number>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, "show-element-change", {
    loading: boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
    data: import("./type").TableRowData[];
    empty: string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
    hover: boolean;
    tableLayout: "auto" | "fixed";
    verticalAlign: "top" | "middle" | "bottom";
    columns: import("./type").BaseTableCol<import("./type").TableRowData>[];
    lazyLoad: boolean;
    bordered: boolean;
    stripe: boolean;
    activeRowKeys: (string | number)[];
    defaultActiveRowKeys: (string | number)[];
    activeRowType: "single" | "multiple";
    allowResizeColumnWidth: boolean;
    disableDataPage: boolean;
    disableSpaceInactiveRow: boolean;
    footData: import("./type").TableRowData[];
    footerAffixedBottom: boolean | Partial<import("..").TdAffixProps>;
    headerAffixedTop: boolean | Partial<import("..").TdAffixProps>;
    keyboardRowHover: boolean;
    resizable: boolean;
    rowKey: string;
    showHeader: boolean;
    tableContentWidth: string;
    thDraggable: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export declare const PrimaryTable: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        asyncLoading: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["asyncLoading"]>;
        };
        columnController: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["columnController"]>;
        };
        columnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        defaultColumnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        columns: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["columns"]>;
            default: () => import("./type").TdPrimaryTableProps["columns"];
        };
        displayColumns: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["displayColumns"]>;
            default: import("./type").TdPrimaryTableProps["displayColumns"];
        };
        defaultDisplayColumns: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultDisplayColumns"]>;
        };
        dragSort: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["dragSort"]>;
            validator(val: import("./type").TdPrimaryTableProps["dragSort"]): boolean;
        };
        dragSortOptions: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["dragSortOptions"]>;
        };
        editableCellState: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["editableCellState"]>;
        };
        editableRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["editableRowKeys"]>;
        };
        expandIcon: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandIcon"]>;
            default: import("./type").TdPrimaryTableProps["expandIcon"];
        };
        expandOnRowClick: BooleanConstructor;
        expandedRow: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandedRow"]>;
        };
        expandedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandedRowKeys"]>;
            default: import("./type").TdPrimaryTableProps["expandedRowKeys"];
        };
        defaultExpandedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultExpandedRowKeys"]>;
            default: () => import("./type").TdPrimaryTableProps["defaultExpandedRowKeys"];
        };
        filterIcon: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterIcon"]>;
        };
        filterRow: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterRow"]>;
        };
        filterValue: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterValue"]>;
            default: import("./type").TdPrimaryTableProps["filterValue"];
        };
        defaultFilterValue: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultFilterValue"]>;
        };
        hideSortTips: BooleanConstructor;
        indeterminateSelectedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["indeterminateSelectedRowKeys"]>;
        };
        multipleSort: BooleanConstructor;
        reserveSelectedRowOnPaginate: {
            type: BooleanConstructor;
            default: boolean;
        };
        rowSelectionAllowUncheck: BooleanConstructor;
        rowSelectionType: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["rowSelectionType"]>;
            validator(val: import("./type").TdPrimaryTableProps["rowSelectionType"]): boolean;
        };
        selectOnRowClick: BooleanConstructor;
        selectedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["selectedRowKeys"]>;
            default: import("./type").TdPrimaryTableProps["selectedRowKeys"];
        };
        defaultSelectedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultSelectedRowKeys"]>;
            default: () => import("./type").TdPrimaryTableProps["defaultSelectedRowKeys"];
        };
        showSortColumnBgColor: BooleanConstructor;
        sort: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["sort"]>;
            default: import("./type").TdPrimaryTableProps["sort"];
        };
        defaultSort: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultSort"]>;
        };
        sortIcon: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["sortIcon"]>;
        };
        sortOnRowDraggable: BooleanConstructor;
        onAsyncLoadingClick: import("vue").PropType<import("./type").TdPrimaryTableProps["onAsyncLoadingClick"]>;
        onCellClick: import("vue").PropType<import("./type").TdPrimaryTableProps["onCellClick"]>;
        onChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onChange"]>;
        onColumnChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onColumnChange"]>;
        onColumnControllerVisibleChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onColumnControllerVisibleChange"]>;
        onDataChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onDataChange"]>;
        onDisplayColumnsChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onDisplayColumnsChange"]>;
        onDragSort: import("vue").PropType<import("./type").TdPrimaryTableProps["onDragSort"]>;
        onExpandChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onExpandChange"]>;
        onFilterChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onFilterChange"]>;
        onRowEdit: import("vue").PropType<import("./type").TdPrimaryTableProps["onRowEdit"]>;
        onRowValidate: import("vue").PropType<import("./type").TdPrimaryTableProps["onRowValidate"]>;
        onSelectChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onSelectChange"]>;
        onSortChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onSortChange"]>;
        onValidate: import("vue").PropType<import("./type").TdPrimaryTableProps["onValidate"]>;
        activeRowKeys: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowKeys"]>;
            default: import("./type").TdBaseTableProps["activeRowKeys"];
        };
        defaultActiveRowKeys: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["defaultActiveRowKeys"]>;
            default: () => import("./type").TdBaseTableProps["defaultActiveRowKeys"];
        };
        activeRowType: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowType"]>;
            default: import("./type").TdBaseTableProps["activeRowType"];
        };
        allowResizeColumnWidth: {
            type: BooleanConstructor;
            default: any;
        };
        attach: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["attach"]>;
        };
        bordered: BooleanConstructor;
        bottomContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["bottomContent"]>;
        };
        cellEmptyContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["cellEmptyContent"]>;
        };
        data: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["data"]>;
            default: () => import("./type").TdBaseTableProps["data"];
        };
        disableDataPage: BooleanConstructor;
        disableSpaceInactiveRow: {
            type: BooleanConstructor;
            default: any;
        };
        empty: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["empty"]>;
            default: import("./type").TdBaseTableProps["empty"];
        };
        firstFullRow: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["firstFullRow"]>;
        };
        fixedRows: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["fixedRows"]>;
        };
        footData: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footData"]>;
            default: () => import("./type").TdBaseTableProps["footData"];
        };
        footerAffixProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixProps"]>;
        };
        footerAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixedBottom"]>;
            default: import("./type").TdBaseTableProps["footerAffixedBottom"];
        };
        footerSummary: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerSummary"]>;
        };
        headerAffixProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixProps"]>;
        };
        headerAffixedTop: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixedTop"]>;
            default: import("./type").TdBaseTableProps["headerAffixedTop"];
        };
        height: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["height"]>;
        };
        horizontalScrollAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["horizontalScrollAffixedBottom"]>;
        };
        hover: BooleanConstructor;
        keyboardRowHover: {
            type: BooleanConstructor;
            default: boolean;
        };
        lastFullRow: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["lastFullRow"]>;
        };
        lazyLoad: BooleanConstructor;
        loading: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["loading"]>;
            default: import("./type").TdBaseTableProps["loading"];
        };
        loadingProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["loadingProps"]>;
        };
        locale: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["locale"]>;
        };
        maxHeight: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["maxHeight"]>;
        };
        pagination: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["pagination"]>;
        };
        paginationAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["paginationAffixedBottom"]>;
        };
        resizable: BooleanConstructor;
        rowAttributes: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowAttributes"]>;
        };
        rowClassName: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowClassName"]>;
        };
        rowKey: {
            type: StringConstructor;
            default: string;
            required: boolean;
        };
        rowspanAndColspan: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspan"]>;
        };
        rowspanAndColspanInFooter: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspanInFooter"]>;
        };
        scroll: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["scroll"]>;
        };
        showHeader: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["size"]>;
            validator(val: import("./type").TdBaseTableProps["size"]): boolean;
        };
        stripe: BooleanConstructor;
        tableContentWidth: {
            type: StringConstructor;
            default: string;
        };
        tableLayout: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["tableLayout"]>;
            default: import("./type").TdBaseTableProps["tableLayout"];
            validator(val: import("./type").TdBaseTableProps["tableLayout"]): boolean;
        };
        topContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["topContent"]>;
        };
        verticalAlign: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["verticalAlign"]>;
            default: import("./type").TdBaseTableProps["verticalAlign"];
            validator(val: import("./type").TdBaseTableProps["verticalAlign"]): boolean;
        };
        onActiveChange: import("vue").PropType<import("./type").TdBaseTableProps["onActiveChange"]>;
        onActiveRowAction: import("vue").PropType<import("./type").TdBaseTableProps["onActiveRowAction"]>;
        onColumnResizeChange: import("vue").PropType<import("./type").TdBaseTableProps["onColumnResizeChange"]>;
        onPageChange: import("vue").PropType<import("./type").TdBaseTableProps["onPageChange"]>;
        onRowClick: import("vue").PropType<import("./type").TdBaseTableProps["onRowClick"]>;
        onRowDblclick: import("vue").PropType<import("./type").TdBaseTableProps["onRowDblclick"]>;
        onRowMousedown: import("vue").PropType<import("./type").TdBaseTableProps["onRowMousedown"]>;
        onRowMouseenter: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseenter"]>;
        onRowMouseleave: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseleave"]>;
        onRowMouseover: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseover"]>;
        onRowMouseup: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseup"]>;
        onScroll: import("vue").PropType<import("./type").TdBaseTableProps["onScroll"]>;
        onScrollX: import("vue").PropType<import("./type").TdBaseTableProps["onScrollX"]>;
        onScrollY: import("vue").PropType<import("./type").TdBaseTableProps["onScrollY"]>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        asyncLoading: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["asyncLoading"]>;
        };
        columnController: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["columnController"]>;
        };
        columnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        defaultColumnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        columns: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["columns"]>;
            default: () => import("./type").TdPrimaryTableProps["columns"];
        };
        displayColumns: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["displayColumns"]>;
            default: import("./type").TdPrimaryTableProps["displayColumns"];
        };
        defaultDisplayColumns: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultDisplayColumns"]>;
        };
        dragSort: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["dragSort"]>;
            validator(val: import("./type").TdPrimaryTableProps["dragSort"]): boolean;
        };
        dragSortOptions: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["dragSortOptions"]>;
        };
        editableCellState: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["editableCellState"]>;
        };
        editableRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["editableRowKeys"]>;
        };
        expandIcon: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandIcon"]>;
            default: import("./type").TdPrimaryTableProps["expandIcon"];
        };
        expandOnRowClick: BooleanConstructor;
        expandedRow: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandedRow"]>;
        };
        expandedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandedRowKeys"]>;
            default: import("./type").TdPrimaryTableProps["expandedRowKeys"];
        };
        defaultExpandedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultExpandedRowKeys"]>;
            default: () => import("./type").TdPrimaryTableProps["defaultExpandedRowKeys"];
        };
        filterIcon: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterIcon"]>;
        };
        filterRow: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterRow"]>;
        };
        filterValue: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterValue"]>;
            default: import("./type").TdPrimaryTableProps["filterValue"];
        };
        defaultFilterValue: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultFilterValue"]>;
        };
        hideSortTips: BooleanConstructor;
        indeterminateSelectedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["indeterminateSelectedRowKeys"]>;
        };
        multipleSort: BooleanConstructor;
        reserveSelectedRowOnPaginate: {
            type: BooleanConstructor;
            default: boolean;
        };
        rowSelectionAllowUncheck: BooleanConstructor;
        rowSelectionType: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["rowSelectionType"]>;
            validator(val: import("./type").TdPrimaryTableProps["rowSelectionType"]): boolean;
        };
        selectOnRowClick: BooleanConstructor;
        selectedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["selectedRowKeys"]>;
            default: import("./type").TdPrimaryTableProps["selectedRowKeys"];
        };
        defaultSelectedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultSelectedRowKeys"]>;
            default: () => import("./type").TdPrimaryTableProps["defaultSelectedRowKeys"];
        };
        showSortColumnBgColor: BooleanConstructor;
        sort: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["sort"]>;
            default: import("./type").TdPrimaryTableProps["sort"];
        };
        defaultSort: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultSort"]>;
        };
        sortIcon: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["sortIcon"]>;
        };
        sortOnRowDraggable: BooleanConstructor;
        onAsyncLoadingClick: import("vue").PropType<import("./type").TdPrimaryTableProps["onAsyncLoadingClick"]>;
        onCellClick: import("vue").PropType<import("./type").TdPrimaryTableProps["onCellClick"]>;
        onChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onChange"]>;
        onColumnChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onColumnChange"]>;
        onColumnControllerVisibleChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onColumnControllerVisibleChange"]>;
        onDataChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onDataChange"]>;
        onDisplayColumnsChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onDisplayColumnsChange"]>;
        onDragSort: import("vue").PropType<import("./type").TdPrimaryTableProps["onDragSort"]>;
        onExpandChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onExpandChange"]>;
        onFilterChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onFilterChange"]>;
        onRowEdit: import("vue").PropType<import("./type").TdPrimaryTableProps["onRowEdit"]>;
        onRowValidate: import("vue").PropType<import("./type").TdPrimaryTableProps["onRowValidate"]>;
        onSelectChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onSelectChange"]>;
        onSortChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onSortChange"]>;
        onValidate: import("vue").PropType<import("./type").TdPrimaryTableProps["onValidate"]>;
        activeRowKeys: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowKeys"]>;
            default: import("./type").TdBaseTableProps["activeRowKeys"];
        };
        defaultActiveRowKeys: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["defaultActiveRowKeys"]>;
            default: () => import("./type").TdBaseTableProps["defaultActiveRowKeys"];
        };
        activeRowType: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowType"]>;
            default: import("./type").TdBaseTableProps["activeRowType"];
        };
        allowResizeColumnWidth: {
            type: BooleanConstructor;
            default: any;
        };
        attach: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["attach"]>;
        };
        bordered: BooleanConstructor;
        bottomContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["bottomContent"]>;
        };
        cellEmptyContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["cellEmptyContent"]>;
        };
        data: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["data"]>;
            default: () => import("./type").TdBaseTableProps["data"];
        };
        disableDataPage: BooleanConstructor;
        disableSpaceInactiveRow: {
            type: BooleanConstructor;
            default: any;
        };
        empty: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["empty"]>;
            default: import("./type").TdBaseTableProps["empty"];
        };
        firstFullRow: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["firstFullRow"]>;
        };
        fixedRows: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["fixedRows"]>;
        };
        footData: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footData"]>;
            default: () => import("./type").TdBaseTableProps["footData"];
        };
        footerAffixProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixProps"]>;
        };
        footerAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixedBottom"]>;
            default: import("./type").TdBaseTableProps["footerAffixedBottom"];
        };
        footerSummary: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerSummary"]>;
        };
        headerAffixProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixProps"]>;
        };
        headerAffixedTop: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixedTop"]>;
            default: import("./type").TdBaseTableProps["headerAffixedTop"];
        };
        height: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["height"]>;
        };
        horizontalScrollAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["horizontalScrollAffixedBottom"]>;
        };
        hover: BooleanConstructor;
        keyboardRowHover: {
            type: BooleanConstructor;
            default: boolean;
        };
        lastFullRow: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["lastFullRow"]>;
        };
        lazyLoad: BooleanConstructor;
        loading: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["loading"]>;
            default: import("./type").TdBaseTableProps["loading"];
        };
        loadingProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["loadingProps"]>;
        };
        locale: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["locale"]>;
        };
        maxHeight: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["maxHeight"]>;
        };
        pagination: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["pagination"]>;
        };
        paginationAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["paginationAffixedBottom"]>;
        };
        resizable: BooleanConstructor;
        rowAttributes: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowAttributes"]>;
        };
        rowClassName: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowClassName"]>;
        };
        rowKey: {
            type: StringConstructor;
            default: string;
            required: boolean;
        };
        rowspanAndColspan: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspan"]>;
        };
        rowspanAndColspanInFooter: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspanInFooter"]>;
        };
        scroll: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["scroll"]>;
        };
        showHeader: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["size"]>;
            validator(val: import("./type").TdBaseTableProps["size"]): boolean;
        };
        stripe: BooleanConstructor;
        tableContentWidth: {
            type: StringConstructor;
            default: string;
        };
        tableLayout: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["tableLayout"]>;
            default: import("./type").TdBaseTableProps["tableLayout"];
            validator(val: import("./type").TdBaseTableProps["tableLayout"]): boolean;
        };
        topContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["topContent"]>;
        };
        verticalAlign: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["verticalAlign"]>;
            default: import("./type").TdBaseTableProps["verticalAlign"];
            validator(val: import("./type").TdBaseTableProps["verticalAlign"]): boolean;
        };
        onActiveChange: import("vue").PropType<import("./type").TdBaseTableProps["onActiveChange"]>;
        onActiveRowAction: import("vue").PropType<import("./type").TdBaseTableProps["onActiveRowAction"]>;
        onColumnResizeChange: import("vue").PropType<import("./type").TdBaseTableProps["onColumnResizeChange"]>;
        onPageChange: import("vue").PropType<import("./type").TdBaseTableProps["onPageChange"]>;
        onRowClick: import("vue").PropType<import("./type").TdBaseTableProps["onRowClick"]>;
        onRowDblclick: import("vue").PropType<import("./type").TdBaseTableProps["onRowDblclick"]>;
        onRowMousedown: import("vue").PropType<import("./type").TdBaseTableProps["onRowMousedown"]>;
        onRowMouseenter: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseenter"]>;
        onRowMouseleave: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseleave"]>;
        onRowMouseover: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseover"]>;
        onRowMouseup: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseup"]>;
        onScroll: import("vue").PropType<import("./type").TdBaseTableProps["onScroll"]>;
        onScrollX: import("vue").PropType<import("./type").TdBaseTableProps["onScrollX"]>;
        onScrollY: import("vue").PropType<import("./type").TdBaseTableProps["onScrollY"]>;
    }>>, {
        sort: import("./type").TableSort;
        loading: boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        data: import("./type").TableRowData[];
        empty: string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        hover: boolean;
        tableLayout: "auto" | "fixed";
        verticalAlign: "top" | "middle" | "bottom";
        columns: import("./type").PrimaryTableCol<import("./type").TableRowData>[];
        lazyLoad: boolean;
        bordered: boolean;
        stripe: boolean;
        activeRowKeys: (string | number)[];
        defaultActiveRowKeys: (string | number)[];
        activeRowType: "single" | "multiple";
        allowResizeColumnWidth: boolean;
        disableDataPage: boolean;
        disableSpaceInactiveRow: boolean;
        footData: import("./type").TableRowData[];
        footerAffixedBottom: boolean | Partial<import("..").TdAffixProps>;
        headerAffixedTop: boolean | Partial<import("..").TdAffixProps>;
        keyboardRowHover: boolean;
        resizable: boolean;
        rowKey: string;
        showHeader: boolean;
        tableContentWidth: string;
        columnControllerVisible: boolean;
        defaultColumnControllerVisible: boolean;
        displayColumns: import("..").CheckboxGroupValue;
        expandIcon: boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("..").TNodeReturnValue);
        expandOnRowClick: boolean;
        expandedRowKeys: (string | number)[];
        defaultExpandedRowKeys: (string | number)[];
        filterValue: import("./type").FilterValue;
        hideSortTips: boolean;
        multipleSort: boolean;
        reserveSelectedRowOnPaginate: boolean;
        rowSelectionAllowUncheck: boolean;
        selectOnRowClick: boolean;
        selectedRowKeys: (string | number)[];
        defaultSelectedRowKeys: (string | number)[];
        showSortColumnBgColor: boolean;
        sortOnRowDraggable: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        asyncLoading: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["asyncLoading"]>;
        };
        columnController: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["columnController"]>;
        };
        columnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        defaultColumnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        columns: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["columns"]>;
            default: () => import("./type").TdPrimaryTableProps["columns"];
        };
        displayColumns: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["displayColumns"]>;
            default: import("./type").TdPrimaryTableProps["displayColumns"];
        };
        defaultDisplayColumns: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultDisplayColumns"]>;
        };
        dragSort: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["dragSort"]>;
            validator(val: import("./type").TdPrimaryTableProps["dragSort"]): boolean;
        };
        dragSortOptions: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["dragSortOptions"]>;
        };
        editableCellState: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["editableCellState"]>;
        };
        editableRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["editableRowKeys"]>;
        };
        expandIcon: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandIcon"]>;
            default: import("./type").TdPrimaryTableProps["expandIcon"];
        };
        expandOnRowClick: BooleanConstructor;
        expandedRow: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandedRow"]>;
        };
        expandedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandedRowKeys"]>;
            default: import("./type").TdPrimaryTableProps["expandedRowKeys"];
        };
        defaultExpandedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultExpandedRowKeys"]>;
            default: () => import("./type").TdPrimaryTableProps["defaultExpandedRowKeys"];
        };
        filterIcon: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterIcon"]>;
        };
        filterRow: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterRow"]>;
        };
        filterValue: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterValue"]>;
            default: import("./type").TdPrimaryTableProps["filterValue"];
        };
        defaultFilterValue: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultFilterValue"]>;
        };
        hideSortTips: BooleanConstructor;
        indeterminateSelectedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["indeterminateSelectedRowKeys"]>;
        };
        multipleSort: BooleanConstructor;
        reserveSelectedRowOnPaginate: {
            type: BooleanConstructor;
            default: boolean;
        };
        rowSelectionAllowUncheck: BooleanConstructor;
        rowSelectionType: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["rowSelectionType"]>;
            validator(val: import("./type").TdPrimaryTableProps["rowSelectionType"]): boolean;
        };
        selectOnRowClick: BooleanConstructor;
        selectedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["selectedRowKeys"]>;
            default: import("./type").TdPrimaryTableProps["selectedRowKeys"];
        };
        defaultSelectedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultSelectedRowKeys"]>;
            default: () => import("./type").TdPrimaryTableProps["defaultSelectedRowKeys"];
        };
        showSortColumnBgColor: BooleanConstructor;
        sort: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["sort"]>;
            default: import("./type").TdPrimaryTableProps["sort"];
        };
        defaultSort: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultSort"]>;
        };
        sortIcon: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["sortIcon"]>;
        };
        sortOnRowDraggable: BooleanConstructor;
        onAsyncLoadingClick: import("vue").PropType<import("./type").TdPrimaryTableProps["onAsyncLoadingClick"]>;
        onCellClick: import("vue").PropType<import("./type").TdPrimaryTableProps["onCellClick"]>;
        onChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onChange"]>;
        onColumnChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onColumnChange"]>;
        onColumnControllerVisibleChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onColumnControllerVisibleChange"]>;
        onDataChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onDataChange"]>;
        onDisplayColumnsChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onDisplayColumnsChange"]>;
        onDragSort: import("vue").PropType<import("./type").TdPrimaryTableProps["onDragSort"]>;
        onExpandChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onExpandChange"]>;
        onFilterChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onFilterChange"]>;
        onRowEdit: import("vue").PropType<import("./type").TdPrimaryTableProps["onRowEdit"]>;
        onRowValidate: import("vue").PropType<import("./type").TdPrimaryTableProps["onRowValidate"]>;
        onSelectChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onSelectChange"]>;
        onSortChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onSortChange"]>;
        onValidate: import("vue").PropType<import("./type").TdPrimaryTableProps["onValidate"]>;
        activeRowKeys: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowKeys"]>;
            default: import("./type").TdBaseTableProps["activeRowKeys"];
        };
        defaultActiveRowKeys: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["defaultActiveRowKeys"]>;
            default: () => import("./type").TdBaseTableProps["defaultActiveRowKeys"];
        };
        activeRowType: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowType"]>;
            default: import("./type").TdBaseTableProps["activeRowType"];
        };
        allowResizeColumnWidth: {
            type: BooleanConstructor;
            default: any;
        };
        attach: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["attach"]>;
        };
        bordered: BooleanConstructor;
        bottomContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["bottomContent"]>;
        };
        cellEmptyContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["cellEmptyContent"]>;
        };
        data: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["data"]>;
            default: () => import("./type").TdBaseTableProps["data"];
        };
        disableDataPage: BooleanConstructor;
        disableSpaceInactiveRow: {
            type: BooleanConstructor;
            default: any;
        };
        empty: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["empty"]>;
            default: import("./type").TdBaseTableProps["empty"];
        };
        firstFullRow: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["firstFullRow"]>;
        };
        fixedRows: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["fixedRows"]>;
        };
        footData: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footData"]>;
            default: () => import("./type").TdBaseTableProps["footData"];
        };
        footerAffixProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixProps"]>;
        };
        footerAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixedBottom"]>;
            default: import("./type").TdBaseTableProps["footerAffixedBottom"];
        };
        footerSummary: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerSummary"]>;
        };
        headerAffixProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixProps"]>;
        };
        headerAffixedTop: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixedTop"]>;
            default: import("./type").TdBaseTableProps["headerAffixedTop"];
        };
        height: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["height"]>;
        };
        horizontalScrollAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["horizontalScrollAffixedBottom"]>;
        };
        hover: BooleanConstructor;
        keyboardRowHover: {
            type: BooleanConstructor;
            default: boolean;
        };
        lastFullRow: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["lastFullRow"]>;
        };
        lazyLoad: BooleanConstructor;
        loading: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["loading"]>;
            default: import("./type").TdBaseTableProps["loading"];
        };
        loadingProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["loadingProps"]>;
        };
        locale: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["locale"]>;
        };
        maxHeight: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["maxHeight"]>;
        };
        pagination: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["pagination"]>;
        };
        paginationAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["paginationAffixedBottom"]>;
        };
        resizable: BooleanConstructor;
        rowAttributes: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowAttributes"]>;
        };
        rowClassName: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowClassName"]>;
        };
        rowKey: {
            type: StringConstructor;
            default: string;
            required: boolean;
        };
        rowspanAndColspan: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspan"]>;
        };
        rowspanAndColspanInFooter: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspanInFooter"]>;
        };
        scroll: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["scroll"]>;
        };
        showHeader: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["size"]>;
            validator(val: import("./type").TdBaseTableProps["size"]): boolean;
        };
        stripe: BooleanConstructor;
        tableContentWidth: {
            type: StringConstructor;
            default: string;
        };
        tableLayout: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["tableLayout"]>;
            default: import("./type").TdBaseTableProps["tableLayout"];
            validator(val: import("./type").TdBaseTableProps["tableLayout"]): boolean;
        };
        topContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["topContent"]>;
        };
        verticalAlign: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["verticalAlign"]>;
            default: import("./type").TdBaseTableProps["verticalAlign"];
            validator(val: import("./type").TdBaseTableProps["verticalAlign"]): boolean;
        };
        onActiveChange: import("vue").PropType<import("./type").TdBaseTableProps["onActiveChange"]>;
        onActiveRowAction: import("vue").PropType<import("./type").TdBaseTableProps["onActiveRowAction"]>;
        onColumnResizeChange: import("vue").PropType<import("./type").TdBaseTableProps["onColumnResizeChange"]>;
        onPageChange: import("vue").PropType<import("./type").TdBaseTableProps["onPageChange"]>;
        onRowClick: import("vue").PropType<import("./type").TdBaseTableProps["onRowClick"]>;
        onRowDblclick: import("vue").PropType<import("./type").TdBaseTableProps["onRowDblclick"]>;
        onRowMousedown: import("vue").PropType<import("./type").TdBaseTableProps["onRowMousedown"]>;
        onRowMouseenter: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseenter"]>;
        onRowMouseleave: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseleave"]>;
        onRowMouseover: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseover"]>;
        onRowMouseup: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseup"]>;
        onScroll: import("vue").PropType<import("./type").TdBaseTableProps["onScroll"]>;
        onScrollX: import("vue").PropType<import("./type").TdBaseTableProps["onScrollX"]>;
        onScrollY: import("vue").PropType<import("./type").TdBaseTableProps["onScrollY"]>;
    }>>, () => JSX.Element, {}, {}, {}, {
        sort: import("./type").TableSort;
        loading: boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        data: import("./type").TableRowData[];
        empty: string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        hover: boolean;
        tableLayout: "auto" | "fixed";
        verticalAlign: "top" | "middle" | "bottom";
        columns: import("./type").PrimaryTableCol<import("./type").TableRowData>[];
        lazyLoad: boolean;
        bordered: boolean;
        stripe: boolean;
        activeRowKeys: (string | number)[];
        defaultActiveRowKeys: (string | number)[];
        activeRowType: "single" | "multiple";
        allowResizeColumnWidth: boolean;
        disableDataPage: boolean;
        disableSpaceInactiveRow: boolean;
        footData: import("./type").TableRowData[];
        footerAffixedBottom: boolean | Partial<import("..").TdAffixProps>;
        headerAffixedTop: boolean | Partial<import("..").TdAffixProps>;
        keyboardRowHover: boolean;
        resizable: boolean;
        rowKey: string;
        showHeader: boolean;
        tableContentWidth: string;
        columnControllerVisible: boolean;
        defaultColumnControllerVisible: boolean;
        displayColumns: import("..").CheckboxGroupValue;
        expandIcon: boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("..").TNodeReturnValue);
        expandOnRowClick: boolean;
        expandedRowKeys: (string | number)[];
        defaultExpandedRowKeys: (string | number)[];
        filterValue: import("./type").FilterValue;
        hideSortTips: boolean;
        multipleSort: boolean;
        reserveSelectedRowOnPaginate: boolean;
        rowSelectionAllowUncheck: boolean;
        selectOnRowClick: boolean;
        selectedRowKeys: (string | number)[];
        defaultSelectedRowKeys: (string | number)[];
        showSortColumnBgColor: boolean;
        sortOnRowDraggable: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    asyncLoading: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["asyncLoading"]>;
    };
    columnController: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["columnController"]>;
    };
    columnControllerVisible: {
        type: BooleanConstructor;
        default: any;
    };
    defaultColumnControllerVisible: {
        type: BooleanConstructor;
        default: any;
    };
    columns: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["columns"]>;
        default: () => import("./type").TdPrimaryTableProps["columns"];
    };
    displayColumns: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["displayColumns"]>;
        default: import("./type").TdPrimaryTableProps["displayColumns"];
    };
    defaultDisplayColumns: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultDisplayColumns"]>;
    };
    dragSort: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["dragSort"]>;
        validator(val: import("./type").TdPrimaryTableProps["dragSort"]): boolean;
    };
    dragSortOptions: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["dragSortOptions"]>;
    };
    editableCellState: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["editableCellState"]>;
    };
    editableRowKeys: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["editableRowKeys"]>;
    };
    expandIcon: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandIcon"]>;
        default: import("./type").TdPrimaryTableProps["expandIcon"];
    };
    expandOnRowClick: BooleanConstructor;
    expandedRow: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandedRow"]>;
    };
    expandedRowKeys: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandedRowKeys"]>;
        default: import("./type").TdPrimaryTableProps["expandedRowKeys"];
    };
    defaultExpandedRowKeys: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultExpandedRowKeys"]>;
        default: () => import("./type").TdPrimaryTableProps["defaultExpandedRowKeys"];
    };
    filterIcon: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterIcon"]>;
    };
    filterRow: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterRow"]>;
    };
    filterValue: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterValue"]>;
        default: import("./type").TdPrimaryTableProps["filterValue"];
    };
    defaultFilterValue: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultFilterValue"]>;
    };
    hideSortTips: BooleanConstructor;
    indeterminateSelectedRowKeys: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["indeterminateSelectedRowKeys"]>;
    };
    multipleSort: BooleanConstructor;
    reserveSelectedRowOnPaginate: {
        type: BooleanConstructor;
        default: boolean;
    };
    rowSelectionAllowUncheck: BooleanConstructor;
    rowSelectionType: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["rowSelectionType"]>;
        validator(val: import("./type").TdPrimaryTableProps["rowSelectionType"]): boolean;
    };
    selectOnRowClick: BooleanConstructor;
    selectedRowKeys: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["selectedRowKeys"]>;
        default: import("./type").TdPrimaryTableProps["selectedRowKeys"];
    };
    defaultSelectedRowKeys: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultSelectedRowKeys"]>;
        default: () => import("./type").TdPrimaryTableProps["defaultSelectedRowKeys"];
    };
    showSortColumnBgColor: BooleanConstructor;
    sort: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["sort"]>;
        default: import("./type").TdPrimaryTableProps["sort"];
    };
    defaultSort: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultSort"]>;
    };
    sortIcon: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["sortIcon"]>;
    };
    sortOnRowDraggable: BooleanConstructor;
    onAsyncLoadingClick: import("vue").PropType<import("./type").TdPrimaryTableProps["onAsyncLoadingClick"]>;
    onCellClick: import("vue").PropType<import("./type").TdPrimaryTableProps["onCellClick"]>;
    onChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onChange"]>;
    onColumnChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onColumnChange"]>;
    onColumnControllerVisibleChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onColumnControllerVisibleChange"]>;
    onDataChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onDataChange"]>;
    onDisplayColumnsChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onDisplayColumnsChange"]>;
    onDragSort: import("vue").PropType<import("./type").TdPrimaryTableProps["onDragSort"]>;
    onExpandChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onExpandChange"]>;
    onFilterChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onFilterChange"]>;
    onRowEdit: import("vue").PropType<import("./type").TdPrimaryTableProps["onRowEdit"]>;
    onRowValidate: import("vue").PropType<import("./type").TdPrimaryTableProps["onRowValidate"]>;
    onSelectChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onSelectChange"]>;
    onSortChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onSortChange"]>;
    onValidate: import("vue").PropType<import("./type").TdPrimaryTableProps["onValidate"]>;
    activeRowKeys: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowKeys"]>;
        default: import("./type").TdBaseTableProps["activeRowKeys"];
    };
    defaultActiveRowKeys: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["defaultActiveRowKeys"]>;
        default: () => import("./type").TdBaseTableProps["defaultActiveRowKeys"];
    };
    activeRowType: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowType"]>;
        default: import("./type").TdBaseTableProps["activeRowType"];
    };
    allowResizeColumnWidth: {
        type: BooleanConstructor;
        default: any;
    };
    attach: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["attach"]>;
    };
    bordered: BooleanConstructor;
    bottomContent: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["bottomContent"]>;
    };
    cellEmptyContent: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["cellEmptyContent"]>;
    };
    data: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["data"]>;
        default: () => import("./type").TdBaseTableProps["data"];
    };
    disableDataPage: BooleanConstructor;
    disableSpaceInactiveRow: {
        type: BooleanConstructor;
        default: any;
    };
    empty: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["empty"]>;
        default: import("./type").TdBaseTableProps["empty"];
    };
    firstFullRow: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["firstFullRow"]>;
    };
    fixedRows: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["fixedRows"]>;
    };
    footData: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["footData"]>;
        default: () => import("./type").TdBaseTableProps["footData"];
    };
    footerAffixProps: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixProps"]>;
    };
    footerAffixedBottom: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixedBottom"]>;
        default: import("./type").TdBaseTableProps["footerAffixedBottom"];
    };
    footerSummary: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["footerSummary"]>;
    };
    headerAffixProps: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixProps"]>;
    };
    headerAffixedTop: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixedTop"]>;
        default: import("./type").TdBaseTableProps["headerAffixedTop"];
    };
    height: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["height"]>;
    };
    horizontalScrollAffixedBottom: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["horizontalScrollAffixedBottom"]>;
    };
    hover: BooleanConstructor;
    keyboardRowHover: {
        type: BooleanConstructor;
        default: boolean;
    };
    lastFullRow: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["lastFullRow"]>;
    };
    lazyLoad: BooleanConstructor;
    loading: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["loading"]>;
        default: import("./type").TdBaseTableProps["loading"];
    };
    loadingProps: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["loadingProps"]>;
    };
    locale: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["locale"]>;
    };
    maxHeight: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["maxHeight"]>;
    };
    pagination: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["pagination"]>;
    };
    paginationAffixedBottom: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["paginationAffixedBottom"]>;
    };
    resizable: BooleanConstructor;
    rowAttributes: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["rowAttributes"]>;
    };
    rowClassName: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["rowClassName"]>;
    };
    rowKey: {
        type: StringConstructor;
        default: string;
        required: boolean;
    };
    rowspanAndColspan: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspan"]>;
    };
    rowspanAndColspanInFooter: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspanInFooter"]>;
    };
    scroll: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["scroll"]>;
    };
    showHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["size"]>;
        validator(val: import("./type").TdBaseTableProps["size"]): boolean;
    };
    stripe: BooleanConstructor;
    tableContentWidth: {
        type: StringConstructor;
        default: string;
    };
    tableLayout: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["tableLayout"]>;
        default: import("./type").TdBaseTableProps["tableLayout"];
        validator(val: import("./type").TdBaseTableProps["tableLayout"]): boolean;
    };
    topContent: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["topContent"]>;
    };
    verticalAlign: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["verticalAlign"]>;
        default: import("./type").TdBaseTableProps["verticalAlign"];
        validator(val: import("./type").TdBaseTableProps["verticalAlign"]): boolean;
    };
    onActiveChange: import("vue").PropType<import("./type").TdBaseTableProps["onActiveChange"]>;
    onActiveRowAction: import("vue").PropType<import("./type").TdBaseTableProps["onActiveRowAction"]>;
    onColumnResizeChange: import("vue").PropType<import("./type").TdBaseTableProps["onColumnResizeChange"]>;
    onPageChange: import("vue").PropType<import("./type").TdBaseTableProps["onPageChange"]>;
    onRowClick: import("vue").PropType<import("./type").TdBaseTableProps["onRowClick"]>;
    onRowDblclick: import("vue").PropType<import("./type").TdBaseTableProps["onRowDblclick"]>;
    onRowMousedown: import("vue").PropType<import("./type").TdBaseTableProps["onRowMousedown"]>;
    onRowMouseenter: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseenter"]>;
    onRowMouseleave: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseleave"]>;
    onRowMouseover: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseover"]>;
    onRowMouseup: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseup"]>;
    onScroll: import("vue").PropType<import("./type").TdBaseTableProps["onScroll"]>;
    onScrollX: import("vue").PropType<import("./type").TdBaseTableProps["onScrollX"]>;
    onScrollY: import("vue").PropType<import("./type").TdBaseTableProps["onScrollY"]>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    sort: import("./type").TableSort;
    loading: boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
    data: import("./type").TableRowData[];
    empty: string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
    hover: boolean;
    tableLayout: "auto" | "fixed";
    verticalAlign: "top" | "middle" | "bottom";
    columns: import("./type").PrimaryTableCol<import("./type").TableRowData>[];
    lazyLoad: boolean;
    bordered: boolean;
    stripe: boolean;
    activeRowKeys: (string | number)[];
    defaultActiveRowKeys: (string | number)[];
    activeRowType: "single" | "multiple";
    allowResizeColumnWidth: boolean;
    disableDataPage: boolean;
    disableSpaceInactiveRow: boolean;
    footData: import("./type").TableRowData[];
    footerAffixedBottom: boolean | Partial<import("..").TdAffixProps>;
    headerAffixedTop: boolean | Partial<import("..").TdAffixProps>;
    keyboardRowHover: boolean;
    resizable: boolean;
    rowKey: string;
    showHeader: boolean;
    tableContentWidth: string;
    columnControllerVisible: boolean;
    defaultColumnControllerVisible: boolean;
    displayColumns: import("..").CheckboxGroupValue;
    expandIcon: boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("..").TNodeReturnValue);
    expandOnRowClick: boolean;
    expandedRowKeys: (string | number)[];
    defaultExpandedRowKeys: (string | number)[];
    filterValue: import("./type").FilterValue;
    hideSortTips: boolean;
    multipleSort: boolean;
    reserveSelectedRowOnPaginate: boolean;
    rowSelectionAllowUncheck: boolean;
    selectOnRowClick: boolean;
    selectedRowKeys: (string | number)[];
    defaultSelectedRowKeys: (string | number)[];
    showSortColumnBgColor: boolean;
    sortOnRowDraggable: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export declare const EnhancedTable: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        beforeDragSort: {
            type: import("vue").PropType<import("./type").TdEnhancedTableProps["beforeDragSort"]>;
        };
        expandedTreeNodes: {
            type: import("vue").PropType<import("./type").TdEnhancedTableProps["expandedTreeNodes"]>;
            default: import("./type").TdEnhancedTableProps["expandedTreeNodes"];
        };
        defaultExpandedTreeNodes: {
            type: import("vue").PropType<import("./type").TdEnhancedTableProps["defaultExpandedTreeNodes"]>;
            default: () => import("./type").TdEnhancedTableProps["defaultExpandedTreeNodes"];
        };
        tree: {
            type: import("vue").PropType<import("./type").TdEnhancedTableProps["tree"]>;
        };
        treeExpandAndFoldIcon: {
            type: import("vue").PropType<import("./type").TdEnhancedTableProps["treeExpandAndFoldIcon"]>;
        };
        onAbnormalDragSort: import("vue").PropType<import("./type").TdEnhancedTableProps["onAbnormalDragSort"]>;
        onExpandedTreeNodesChange: import("vue").PropType<import("./type").TdEnhancedTableProps["onExpandedTreeNodesChange"]>;
        onTreeExpandChange: import("vue").PropType<import("./type").TdEnhancedTableProps["onTreeExpandChange"]>;
        asyncLoading: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["asyncLoading"]>;
        };
        columnController: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["columnController"]>;
        };
        columnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        defaultColumnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        columns: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["columns"]>;
            default: () => import("./type").TdPrimaryTableProps["columns"];
        };
        displayColumns: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["displayColumns"]>;
            default: import("./type").TdPrimaryTableProps["displayColumns"];
        };
        defaultDisplayColumns: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultDisplayColumns"]>;
        };
        dragSort: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["dragSort"]>;
            validator(val: import("./type").TdPrimaryTableProps["dragSort"]): boolean;
        };
        dragSortOptions: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["dragSortOptions"]>;
        };
        editableCellState: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["editableCellState"]>;
        };
        editableRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["editableRowKeys"]>;
        };
        expandIcon: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandIcon"]>;
            default: import("./type").TdPrimaryTableProps["expandIcon"];
        };
        expandOnRowClick: BooleanConstructor;
        expandedRow: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandedRow"]>;
        };
        expandedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandedRowKeys"]>;
            default: import("./type").TdPrimaryTableProps["expandedRowKeys"];
        };
        defaultExpandedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultExpandedRowKeys"]>;
            default: () => import("./type").TdPrimaryTableProps["defaultExpandedRowKeys"];
        };
        filterIcon: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterIcon"]>;
        };
        filterRow: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterRow"]>;
        };
        filterValue: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterValue"]>;
            default: import("./type").TdPrimaryTableProps["filterValue"];
        };
        defaultFilterValue: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultFilterValue"]>;
        };
        hideSortTips: BooleanConstructor;
        indeterminateSelectedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["indeterminateSelectedRowKeys"]>;
        };
        multipleSort: BooleanConstructor;
        reserveSelectedRowOnPaginate: {
            type: BooleanConstructor;
            default: boolean;
        };
        rowSelectionAllowUncheck: BooleanConstructor;
        rowSelectionType: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["rowSelectionType"]>;
            validator(val: import("./type").TdPrimaryTableProps["rowSelectionType"]): boolean;
        };
        selectOnRowClick: BooleanConstructor;
        selectedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["selectedRowKeys"]>;
            default: import("./type").TdPrimaryTableProps["selectedRowKeys"];
        };
        defaultSelectedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultSelectedRowKeys"]>;
            default: () => import("./type").TdPrimaryTableProps["defaultSelectedRowKeys"];
        };
        showSortColumnBgColor: BooleanConstructor;
        sort: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["sort"]>;
            default: import("./type").TdPrimaryTableProps["sort"];
        };
        defaultSort: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultSort"]>;
        };
        sortIcon: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["sortIcon"]>;
        };
        sortOnRowDraggable: BooleanConstructor;
        onAsyncLoadingClick: import("vue").PropType<import("./type").TdPrimaryTableProps["onAsyncLoadingClick"]>;
        onCellClick: import("vue").PropType<import("./type").TdPrimaryTableProps["onCellClick"]>;
        onChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onChange"]>;
        onColumnChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onColumnChange"]>;
        onColumnControllerVisibleChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onColumnControllerVisibleChange"]>;
        onDataChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onDataChange"]>;
        onDisplayColumnsChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onDisplayColumnsChange"]>;
        onDragSort: import("vue").PropType<import("./type").TdPrimaryTableProps["onDragSort"]>;
        onExpandChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onExpandChange"]>;
        onFilterChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onFilterChange"]>;
        onRowEdit: import("vue").PropType<import("./type").TdPrimaryTableProps["onRowEdit"]>;
        onRowValidate: import("vue").PropType<import("./type").TdPrimaryTableProps["onRowValidate"]>;
        onSelectChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onSelectChange"]>;
        onSortChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onSortChange"]>;
        onValidate: import("vue").PropType<import("./type").TdPrimaryTableProps["onValidate"]>;
        activeRowKeys: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowKeys"]>;
            default: import("./type").TdBaseTableProps["activeRowKeys"];
        };
        defaultActiveRowKeys: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["defaultActiveRowKeys"]>;
            default: () => import("./type").TdBaseTableProps["defaultActiveRowKeys"];
        };
        activeRowType: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowType"]>;
            default: import("./type").TdBaseTableProps["activeRowType"];
        };
        allowResizeColumnWidth: {
            type: BooleanConstructor;
            default: any;
        };
        attach: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["attach"]>;
        };
        bordered: BooleanConstructor;
        bottomContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["bottomContent"]>;
        };
        cellEmptyContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["cellEmptyContent"]>;
        };
        data: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["data"]>;
            default: () => import("./type").TdBaseTableProps["data"];
        };
        disableDataPage: BooleanConstructor;
        disableSpaceInactiveRow: {
            type: BooleanConstructor;
            default: any;
        };
        empty: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["empty"]>;
            default: import("./type").TdBaseTableProps["empty"];
        };
        firstFullRow: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["firstFullRow"]>;
        };
        fixedRows: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["fixedRows"]>;
        };
        footData: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footData"]>;
            default: () => import("./type").TdBaseTableProps["footData"];
        };
        footerAffixProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixProps"]>;
        };
        footerAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixedBottom"]>;
            default: import("./type").TdBaseTableProps["footerAffixedBottom"];
        };
        footerSummary: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerSummary"]>;
        };
        headerAffixProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixProps"]>;
        };
        headerAffixedTop: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixedTop"]>;
            default: import("./type").TdBaseTableProps["headerAffixedTop"];
        };
        height: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["height"]>;
        };
        horizontalScrollAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["horizontalScrollAffixedBottom"]>;
        };
        hover: BooleanConstructor;
        keyboardRowHover: {
            type: BooleanConstructor;
            default: boolean;
        };
        lastFullRow: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["lastFullRow"]>;
        };
        lazyLoad: BooleanConstructor;
        loading: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["loading"]>;
            default: import("./type").TdBaseTableProps["loading"];
        };
        loadingProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["loadingProps"]>;
        };
        locale: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["locale"]>;
        };
        maxHeight: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["maxHeight"]>;
        };
        pagination: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["pagination"]>;
        };
        paginationAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["paginationAffixedBottom"]>;
        };
        resizable: BooleanConstructor;
        rowAttributes: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowAttributes"]>;
        };
        rowClassName: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowClassName"]>;
        };
        rowKey: {
            type: StringConstructor;
            default: string;
            required: boolean;
        };
        rowspanAndColspan: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspan"]>;
        };
        rowspanAndColspanInFooter: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspanInFooter"]>;
        };
        scroll: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["scroll"]>;
        };
        showHeader: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["size"]>;
            validator(val: import("./type").TdBaseTableProps["size"]): boolean;
        };
        stripe: BooleanConstructor;
        tableContentWidth: {
            type: StringConstructor;
            default: string;
        };
        tableLayout: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["tableLayout"]>;
            default: import("./type").TdBaseTableProps["tableLayout"];
            validator(val: import("./type").TdBaseTableProps["tableLayout"]): boolean;
        };
        topContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["topContent"]>;
        };
        verticalAlign: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["verticalAlign"]>;
            default: import("./type").TdBaseTableProps["verticalAlign"];
            validator(val: import("./type").TdBaseTableProps["verticalAlign"]): boolean;
        };
        onActiveChange: import("vue").PropType<import("./type").TdBaseTableProps["onActiveChange"]>;
        onActiveRowAction: import("vue").PropType<import("./type").TdBaseTableProps["onActiveRowAction"]>;
        onColumnResizeChange: import("vue").PropType<import("./type").TdBaseTableProps["onColumnResizeChange"]>;
        onPageChange: import("vue").PropType<import("./type").TdBaseTableProps["onPageChange"]>;
        onRowClick: import("vue").PropType<import("./type").TdBaseTableProps["onRowClick"]>;
        onRowDblclick: import("vue").PropType<import("./type").TdBaseTableProps["onRowDblclick"]>;
        onRowMousedown: import("vue").PropType<import("./type").TdBaseTableProps["onRowMousedown"]>;
        onRowMouseenter: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseenter"]>;
        onRowMouseleave: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseleave"]>;
        onRowMouseover: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseover"]>;
        onRowMouseup: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseup"]>;
        onScroll: import("vue").PropType<import("./type").TdBaseTableProps["onScroll"]>;
        onScrollX: import("vue").PropType<import("./type").TdBaseTableProps["onScrollX"]>;
        onScrollY: import("vue").PropType<import("./type").TdBaseTableProps["onScrollY"]>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        beforeDragSort: {
            type: import("vue").PropType<import("./type").TdEnhancedTableProps["beforeDragSort"]>;
        };
        expandedTreeNodes: {
            type: import("vue").PropType<import("./type").TdEnhancedTableProps["expandedTreeNodes"]>;
            default: import("./type").TdEnhancedTableProps["expandedTreeNodes"];
        };
        defaultExpandedTreeNodes: {
            type: import("vue").PropType<import("./type").TdEnhancedTableProps["defaultExpandedTreeNodes"]>;
            default: () => import("./type").TdEnhancedTableProps["defaultExpandedTreeNodes"];
        };
        tree: {
            type: import("vue").PropType<import("./type").TdEnhancedTableProps["tree"]>;
        };
        treeExpandAndFoldIcon: {
            type: import("vue").PropType<import("./type").TdEnhancedTableProps["treeExpandAndFoldIcon"]>;
        };
        onAbnormalDragSort: import("vue").PropType<import("./type").TdEnhancedTableProps["onAbnormalDragSort"]>;
        onExpandedTreeNodesChange: import("vue").PropType<import("./type").TdEnhancedTableProps["onExpandedTreeNodesChange"]>;
        onTreeExpandChange: import("vue").PropType<import("./type").TdEnhancedTableProps["onTreeExpandChange"]>;
        asyncLoading: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["asyncLoading"]>;
        };
        columnController: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["columnController"]>;
        };
        columnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        defaultColumnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        columns: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["columns"]>;
            default: () => import("./type").TdPrimaryTableProps["columns"];
        };
        displayColumns: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["displayColumns"]>;
            default: import("./type").TdPrimaryTableProps["displayColumns"];
        };
        defaultDisplayColumns: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultDisplayColumns"]>;
        };
        dragSort: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["dragSort"]>;
            validator(val: import("./type").TdPrimaryTableProps["dragSort"]): boolean;
        };
        dragSortOptions: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["dragSortOptions"]>;
        };
        editableCellState: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["editableCellState"]>;
        };
        editableRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["editableRowKeys"]>;
        };
        expandIcon: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandIcon"]>;
            default: import("./type").TdPrimaryTableProps["expandIcon"];
        };
        expandOnRowClick: BooleanConstructor;
        expandedRow: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandedRow"]>;
        };
        expandedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandedRowKeys"]>;
            default: import("./type").TdPrimaryTableProps["expandedRowKeys"];
        };
        defaultExpandedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultExpandedRowKeys"]>;
            default: () => import("./type").TdPrimaryTableProps["defaultExpandedRowKeys"];
        };
        filterIcon: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterIcon"]>;
        };
        filterRow: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterRow"]>;
        };
        filterValue: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterValue"]>;
            default: import("./type").TdPrimaryTableProps["filterValue"];
        };
        defaultFilterValue: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultFilterValue"]>;
        };
        hideSortTips: BooleanConstructor;
        indeterminateSelectedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["indeterminateSelectedRowKeys"]>;
        };
        multipleSort: BooleanConstructor;
        reserveSelectedRowOnPaginate: {
            type: BooleanConstructor;
            default: boolean;
        };
        rowSelectionAllowUncheck: BooleanConstructor;
        rowSelectionType: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["rowSelectionType"]>;
            validator(val: import("./type").TdPrimaryTableProps["rowSelectionType"]): boolean;
        };
        selectOnRowClick: BooleanConstructor;
        selectedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["selectedRowKeys"]>;
            default: import("./type").TdPrimaryTableProps["selectedRowKeys"];
        };
        defaultSelectedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultSelectedRowKeys"]>;
            default: () => import("./type").TdPrimaryTableProps["defaultSelectedRowKeys"];
        };
        showSortColumnBgColor: BooleanConstructor;
        sort: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["sort"]>;
            default: import("./type").TdPrimaryTableProps["sort"];
        };
        defaultSort: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultSort"]>;
        };
        sortIcon: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["sortIcon"]>;
        };
        sortOnRowDraggable: BooleanConstructor;
        onAsyncLoadingClick: import("vue").PropType<import("./type").TdPrimaryTableProps["onAsyncLoadingClick"]>;
        onCellClick: import("vue").PropType<import("./type").TdPrimaryTableProps["onCellClick"]>;
        onChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onChange"]>;
        onColumnChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onColumnChange"]>;
        onColumnControllerVisibleChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onColumnControllerVisibleChange"]>;
        onDataChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onDataChange"]>;
        onDisplayColumnsChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onDisplayColumnsChange"]>;
        onDragSort: import("vue").PropType<import("./type").TdPrimaryTableProps["onDragSort"]>;
        onExpandChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onExpandChange"]>;
        onFilterChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onFilterChange"]>;
        onRowEdit: import("vue").PropType<import("./type").TdPrimaryTableProps["onRowEdit"]>;
        onRowValidate: import("vue").PropType<import("./type").TdPrimaryTableProps["onRowValidate"]>;
        onSelectChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onSelectChange"]>;
        onSortChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onSortChange"]>;
        onValidate: import("vue").PropType<import("./type").TdPrimaryTableProps["onValidate"]>;
        activeRowKeys: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowKeys"]>;
            default: import("./type").TdBaseTableProps["activeRowKeys"];
        };
        defaultActiveRowKeys: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["defaultActiveRowKeys"]>;
            default: () => import("./type").TdBaseTableProps["defaultActiveRowKeys"];
        };
        activeRowType: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowType"]>;
            default: import("./type").TdBaseTableProps["activeRowType"];
        };
        allowResizeColumnWidth: {
            type: BooleanConstructor;
            default: any;
        };
        attach: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["attach"]>;
        };
        bordered: BooleanConstructor;
        bottomContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["bottomContent"]>;
        };
        cellEmptyContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["cellEmptyContent"]>;
        };
        data: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["data"]>;
            default: () => import("./type").TdBaseTableProps["data"];
        };
        disableDataPage: BooleanConstructor;
        disableSpaceInactiveRow: {
            type: BooleanConstructor;
            default: any;
        };
        empty: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["empty"]>;
            default: import("./type").TdBaseTableProps["empty"];
        };
        firstFullRow: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["firstFullRow"]>;
        };
        fixedRows: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["fixedRows"]>;
        };
        footData: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footData"]>;
            default: () => import("./type").TdBaseTableProps["footData"];
        };
        footerAffixProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixProps"]>;
        };
        footerAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixedBottom"]>;
            default: import("./type").TdBaseTableProps["footerAffixedBottom"];
        };
        footerSummary: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerSummary"]>;
        };
        headerAffixProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixProps"]>;
        };
        headerAffixedTop: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixedTop"]>;
            default: import("./type").TdBaseTableProps["headerAffixedTop"];
        };
        height: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["height"]>;
        };
        horizontalScrollAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["horizontalScrollAffixedBottom"]>;
        };
        hover: BooleanConstructor;
        keyboardRowHover: {
            type: BooleanConstructor;
            default: boolean;
        };
        lastFullRow: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["lastFullRow"]>;
        };
        lazyLoad: BooleanConstructor;
        loading: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["loading"]>;
            default: import("./type").TdBaseTableProps["loading"];
        };
        loadingProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["loadingProps"]>;
        };
        locale: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["locale"]>;
        };
        maxHeight: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["maxHeight"]>;
        };
        pagination: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["pagination"]>;
        };
        paginationAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["paginationAffixedBottom"]>;
        };
        resizable: BooleanConstructor;
        rowAttributes: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowAttributes"]>;
        };
        rowClassName: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowClassName"]>;
        };
        rowKey: {
            type: StringConstructor;
            default: string;
            required: boolean;
        };
        rowspanAndColspan: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspan"]>;
        };
        rowspanAndColspanInFooter: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspanInFooter"]>;
        };
        scroll: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["scroll"]>;
        };
        showHeader: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["size"]>;
            validator(val: import("./type").TdBaseTableProps["size"]): boolean;
        };
        stripe: BooleanConstructor;
        tableContentWidth: {
            type: StringConstructor;
            default: string;
        };
        tableLayout: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["tableLayout"]>;
            default: import("./type").TdBaseTableProps["tableLayout"];
            validator(val: import("./type").TdBaseTableProps["tableLayout"]): boolean;
        };
        topContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["topContent"]>;
        };
        verticalAlign: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["verticalAlign"]>;
            default: import("./type").TdBaseTableProps["verticalAlign"];
            validator(val: import("./type").TdBaseTableProps["verticalAlign"]): boolean;
        };
        onActiveChange: import("vue").PropType<import("./type").TdBaseTableProps["onActiveChange"]>;
        onActiveRowAction: import("vue").PropType<import("./type").TdBaseTableProps["onActiveRowAction"]>;
        onColumnResizeChange: import("vue").PropType<import("./type").TdBaseTableProps["onColumnResizeChange"]>;
        onPageChange: import("vue").PropType<import("./type").TdBaseTableProps["onPageChange"]>;
        onRowClick: import("vue").PropType<import("./type").TdBaseTableProps["onRowClick"]>;
        onRowDblclick: import("vue").PropType<import("./type").TdBaseTableProps["onRowDblclick"]>;
        onRowMousedown: import("vue").PropType<import("./type").TdBaseTableProps["onRowMousedown"]>;
        onRowMouseenter: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseenter"]>;
        onRowMouseleave: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseleave"]>;
        onRowMouseover: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseover"]>;
        onRowMouseup: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseup"]>;
        onScroll: import("vue").PropType<import("./type").TdBaseTableProps["onScroll"]>;
        onScrollX: import("vue").PropType<import("./type").TdBaseTableProps["onScrollX"]>;
        onScrollY: import("vue").PropType<import("./type").TdBaseTableProps["onScrollY"]>;
    }>>, {
        sort: import("./type").TableSort;
        loading: boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        data: import("./type").TableRowData[];
        empty: string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        hover: boolean;
        tableLayout: "auto" | "fixed";
        verticalAlign: "top" | "middle" | "bottom";
        columns: import("./type").PrimaryTableCol<import("./type").TableRowData>[];
        lazyLoad: boolean;
        bordered: boolean;
        stripe: boolean;
        activeRowKeys: (string | number)[];
        defaultActiveRowKeys: (string | number)[];
        activeRowType: "single" | "multiple";
        allowResizeColumnWidth: boolean;
        disableDataPage: boolean;
        disableSpaceInactiveRow: boolean;
        footData: import("./type").TableRowData[];
        footerAffixedBottom: boolean | Partial<import("..").TdAffixProps>;
        headerAffixedTop: boolean | Partial<import("..").TdAffixProps>;
        keyboardRowHover: boolean;
        resizable: boolean;
        rowKey: string;
        showHeader: boolean;
        tableContentWidth: string;
        columnControllerVisible: boolean;
        defaultColumnControllerVisible: boolean;
        displayColumns: import("..").CheckboxGroupValue;
        expandIcon: boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("..").TNodeReturnValue);
        expandOnRowClick: boolean;
        expandedRowKeys: (string | number)[];
        defaultExpandedRowKeys: (string | number)[];
        filterValue: import("./type").FilterValue;
        hideSortTips: boolean;
        multipleSort: boolean;
        reserveSelectedRowOnPaginate: boolean;
        rowSelectionAllowUncheck: boolean;
        selectOnRowClick: boolean;
        selectedRowKeys: (string | number)[];
        defaultSelectedRowKeys: (string | number)[];
        showSortColumnBgColor: boolean;
        sortOnRowDraggable: boolean;
        expandedTreeNodes: (string | number)[];
        defaultExpandedTreeNodes: (string | number)[];
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        beforeDragSort: {
            type: import("vue").PropType<import("./type").TdEnhancedTableProps["beforeDragSort"]>;
        };
        expandedTreeNodes: {
            type: import("vue").PropType<import("./type").TdEnhancedTableProps["expandedTreeNodes"]>;
            default: import("./type").TdEnhancedTableProps["expandedTreeNodes"];
        };
        defaultExpandedTreeNodes: {
            type: import("vue").PropType<import("./type").TdEnhancedTableProps["defaultExpandedTreeNodes"]>;
            default: () => import("./type").TdEnhancedTableProps["defaultExpandedTreeNodes"];
        };
        tree: {
            type: import("vue").PropType<import("./type").TdEnhancedTableProps["tree"]>;
        };
        treeExpandAndFoldIcon: {
            type: import("vue").PropType<import("./type").TdEnhancedTableProps["treeExpandAndFoldIcon"]>;
        };
        onAbnormalDragSort: import("vue").PropType<import("./type").TdEnhancedTableProps["onAbnormalDragSort"]>;
        onExpandedTreeNodesChange: import("vue").PropType<import("./type").TdEnhancedTableProps["onExpandedTreeNodesChange"]>;
        onTreeExpandChange: import("vue").PropType<import("./type").TdEnhancedTableProps["onTreeExpandChange"]>;
        asyncLoading: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["asyncLoading"]>;
        };
        columnController: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["columnController"]>;
        };
        columnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        defaultColumnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        columns: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["columns"]>;
            default: () => import("./type").TdPrimaryTableProps["columns"];
        };
        displayColumns: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["displayColumns"]>;
            default: import("./type").TdPrimaryTableProps["displayColumns"];
        };
        defaultDisplayColumns: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultDisplayColumns"]>;
        };
        dragSort: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["dragSort"]>;
            validator(val: import("./type").TdPrimaryTableProps["dragSort"]): boolean;
        };
        dragSortOptions: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["dragSortOptions"]>;
        };
        editableCellState: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["editableCellState"]>;
        };
        editableRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["editableRowKeys"]>;
        };
        expandIcon: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandIcon"]>;
            default: import("./type").TdPrimaryTableProps["expandIcon"];
        };
        expandOnRowClick: BooleanConstructor;
        expandedRow: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandedRow"]>;
        };
        expandedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandedRowKeys"]>;
            default: import("./type").TdPrimaryTableProps["expandedRowKeys"];
        };
        defaultExpandedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultExpandedRowKeys"]>;
            default: () => import("./type").TdPrimaryTableProps["defaultExpandedRowKeys"];
        };
        filterIcon: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterIcon"]>;
        };
        filterRow: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterRow"]>;
        };
        filterValue: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterValue"]>;
            default: import("./type").TdPrimaryTableProps["filterValue"];
        };
        defaultFilterValue: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultFilterValue"]>;
        };
        hideSortTips: BooleanConstructor;
        indeterminateSelectedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["indeterminateSelectedRowKeys"]>;
        };
        multipleSort: BooleanConstructor;
        reserveSelectedRowOnPaginate: {
            type: BooleanConstructor;
            default: boolean;
        };
        rowSelectionAllowUncheck: BooleanConstructor;
        rowSelectionType: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["rowSelectionType"]>;
            validator(val: import("./type").TdPrimaryTableProps["rowSelectionType"]): boolean;
        };
        selectOnRowClick: BooleanConstructor;
        selectedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["selectedRowKeys"]>;
            default: import("./type").TdPrimaryTableProps["selectedRowKeys"];
        };
        defaultSelectedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultSelectedRowKeys"]>;
            default: () => import("./type").TdPrimaryTableProps["defaultSelectedRowKeys"];
        };
        showSortColumnBgColor: BooleanConstructor;
        sort: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["sort"]>;
            default: import("./type").TdPrimaryTableProps["sort"];
        };
        defaultSort: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultSort"]>;
        };
        sortIcon: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["sortIcon"]>;
        };
        sortOnRowDraggable: BooleanConstructor;
        onAsyncLoadingClick: import("vue").PropType<import("./type").TdPrimaryTableProps["onAsyncLoadingClick"]>;
        onCellClick: import("vue").PropType<import("./type").TdPrimaryTableProps["onCellClick"]>;
        onChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onChange"]>;
        onColumnChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onColumnChange"]>;
        onColumnControllerVisibleChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onColumnControllerVisibleChange"]>;
        onDataChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onDataChange"]>;
        onDisplayColumnsChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onDisplayColumnsChange"]>;
        onDragSort: import("vue").PropType<import("./type").TdPrimaryTableProps["onDragSort"]>;
        onExpandChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onExpandChange"]>;
        onFilterChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onFilterChange"]>;
        onRowEdit: import("vue").PropType<import("./type").TdPrimaryTableProps["onRowEdit"]>;
        onRowValidate: import("vue").PropType<import("./type").TdPrimaryTableProps["onRowValidate"]>;
        onSelectChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onSelectChange"]>;
        onSortChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onSortChange"]>;
        onValidate: import("vue").PropType<import("./type").TdPrimaryTableProps["onValidate"]>;
        activeRowKeys: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowKeys"]>;
            default: import("./type").TdBaseTableProps["activeRowKeys"];
        };
        defaultActiveRowKeys: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["defaultActiveRowKeys"]>;
            default: () => import("./type").TdBaseTableProps["defaultActiveRowKeys"];
        };
        activeRowType: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowType"]>;
            default: import("./type").TdBaseTableProps["activeRowType"];
        };
        allowResizeColumnWidth: {
            type: BooleanConstructor;
            default: any;
        };
        attach: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["attach"]>;
        };
        bordered: BooleanConstructor;
        bottomContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["bottomContent"]>;
        };
        cellEmptyContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["cellEmptyContent"]>;
        };
        data: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["data"]>;
            default: () => import("./type").TdBaseTableProps["data"];
        };
        disableDataPage: BooleanConstructor;
        disableSpaceInactiveRow: {
            type: BooleanConstructor;
            default: any;
        };
        empty: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["empty"]>;
            default: import("./type").TdBaseTableProps["empty"];
        };
        firstFullRow: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["firstFullRow"]>;
        };
        fixedRows: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["fixedRows"]>;
        };
        footData: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footData"]>;
            default: () => import("./type").TdBaseTableProps["footData"];
        };
        footerAffixProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixProps"]>;
        };
        footerAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixedBottom"]>;
            default: import("./type").TdBaseTableProps["footerAffixedBottom"];
        };
        footerSummary: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerSummary"]>;
        };
        headerAffixProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixProps"]>;
        };
        headerAffixedTop: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixedTop"]>;
            default: import("./type").TdBaseTableProps["headerAffixedTop"];
        };
        height: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["height"]>;
        };
        horizontalScrollAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["horizontalScrollAffixedBottom"]>;
        };
        hover: BooleanConstructor;
        keyboardRowHover: {
            type: BooleanConstructor;
            default: boolean;
        };
        lastFullRow: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["lastFullRow"]>;
        };
        lazyLoad: BooleanConstructor;
        loading: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["loading"]>;
            default: import("./type").TdBaseTableProps["loading"];
        };
        loadingProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["loadingProps"]>;
        };
        locale: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["locale"]>;
        };
        maxHeight: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["maxHeight"]>;
        };
        pagination: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["pagination"]>;
        };
        paginationAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["paginationAffixedBottom"]>;
        };
        resizable: BooleanConstructor;
        rowAttributes: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowAttributes"]>;
        };
        rowClassName: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowClassName"]>;
        };
        rowKey: {
            type: StringConstructor;
            default: string;
            required: boolean;
        };
        rowspanAndColspan: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspan"]>;
        };
        rowspanAndColspanInFooter: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspanInFooter"]>;
        };
        scroll: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["scroll"]>;
        };
        showHeader: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["size"]>;
            validator(val: import("./type").TdBaseTableProps["size"]): boolean;
        };
        stripe: BooleanConstructor;
        tableContentWidth: {
            type: StringConstructor;
            default: string;
        };
        tableLayout: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["tableLayout"]>;
            default: import("./type").TdBaseTableProps["tableLayout"];
            validator(val: import("./type").TdBaseTableProps["tableLayout"]): boolean;
        };
        topContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["topContent"]>;
        };
        verticalAlign: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["verticalAlign"]>;
            default: import("./type").TdBaseTableProps["verticalAlign"];
            validator(val: import("./type").TdBaseTableProps["verticalAlign"]): boolean;
        };
        onActiveChange: import("vue").PropType<import("./type").TdBaseTableProps["onActiveChange"]>;
        onActiveRowAction: import("vue").PropType<import("./type").TdBaseTableProps["onActiveRowAction"]>;
        onColumnResizeChange: import("vue").PropType<import("./type").TdBaseTableProps["onColumnResizeChange"]>;
        onPageChange: import("vue").PropType<import("./type").TdBaseTableProps["onPageChange"]>;
        onRowClick: import("vue").PropType<import("./type").TdBaseTableProps["onRowClick"]>;
        onRowDblclick: import("vue").PropType<import("./type").TdBaseTableProps["onRowDblclick"]>;
        onRowMousedown: import("vue").PropType<import("./type").TdBaseTableProps["onRowMousedown"]>;
        onRowMouseenter: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseenter"]>;
        onRowMouseleave: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseleave"]>;
        onRowMouseover: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseover"]>;
        onRowMouseup: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseup"]>;
        onScroll: import("vue").PropType<import("./type").TdBaseTableProps["onScroll"]>;
        onScrollX: import("vue").PropType<import("./type").TdBaseTableProps["onScrollX"]>;
        onScrollY: import("vue").PropType<import("./type").TdBaseTableProps["onScrollY"]>;
    }>>, () => JSX.Element, {}, {}, {}, {
        sort: import("./type").TableSort;
        loading: boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        data: import("./type").TableRowData[];
        empty: string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        hover: boolean;
        tableLayout: "auto" | "fixed";
        verticalAlign: "top" | "middle" | "bottom";
        columns: import("./type").PrimaryTableCol<import("./type").TableRowData>[];
        lazyLoad: boolean;
        bordered: boolean;
        stripe: boolean;
        activeRowKeys: (string | number)[];
        defaultActiveRowKeys: (string | number)[];
        activeRowType: "single" | "multiple";
        allowResizeColumnWidth: boolean;
        disableDataPage: boolean;
        disableSpaceInactiveRow: boolean;
        footData: import("./type").TableRowData[];
        footerAffixedBottom: boolean | Partial<import("..").TdAffixProps>;
        headerAffixedTop: boolean | Partial<import("..").TdAffixProps>;
        keyboardRowHover: boolean;
        resizable: boolean;
        rowKey: string;
        showHeader: boolean;
        tableContentWidth: string;
        columnControllerVisible: boolean;
        defaultColumnControllerVisible: boolean;
        displayColumns: import("..").CheckboxGroupValue;
        expandIcon: boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("..").TNodeReturnValue);
        expandOnRowClick: boolean;
        expandedRowKeys: (string | number)[];
        defaultExpandedRowKeys: (string | number)[];
        filterValue: import("./type").FilterValue;
        hideSortTips: boolean;
        multipleSort: boolean;
        reserveSelectedRowOnPaginate: boolean;
        rowSelectionAllowUncheck: boolean;
        selectOnRowClick: boolean;
        selectedRowKeys: (string | number)[];
        defaultSelectedRowKeys: (string | number)[];
        showSortColumnBgColor: boolean;
        sortOnRowDraggable: boolean;
        expandedTreeNodes: (string | number)[];
        defaultExpandedTreeNodes: (string | number)[];
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    beforeDragSort: {
        type: import("vue").PropType<import("./type").TdEnhancedTableProps["beforeDragSort"]>;
    };
    expandedTreeNodes: {
        type: import("vue").PropType<import("./type").TdEnhancedTableProps["expandedTreeNodes"]>;
        default: import("./type").TdEnhancedTableProps["expandedTreeNodes"];
    };
    defaultExpandedTreeNodes: {
        type: import("vue").PropType<import("./type").TdEnhancedTableProps["defaultExpandedTreeNodes"]>;
        default: () => import("./type").TdEnhancedTableProps["defaultExpandedTreeNodes"];
    };
    tree: {
        type: import("vue").PropType<import("./type").TdEnhancedTableProps["tree"]>;
    };
    treeExpandAndFoldIcon: {
        type: import("vue").PropType<import("./type").TdEnhancedTableProps["treeExpandAndFoldIcon"]>;
    };
    onAbnormalDragSort: import("vue").PropType<import("./type").TdEnhancedTableProps["onAbnormalDragSort"]>;
    onExpandedTreeNodesChange: import("vue").PropType<import("./type").TdEnhancedTableProps["onExpandedTreeNodesChange"]>;
    onTreeExpandChange: import("vue").PropType<import("./type").TdEnhancedTableProps["onTreeExpandChange"]>;
    asyncLoading: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["asyncLoading"]>;
    };
    columnController: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["columnController"]>;
    };
    columnControllerVisible: {
        type: BooleanConstructor;
        default: any;
    };
    defaultColumnControllerVisible: {
        type: BooleanConstructor;
        default: any;
    };
    columns: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["columns"]>;
        default: () => import("./type").TdPrimaryTableProps["columns"];
    };
    displayColumns: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["displayColumns"]>;
        default: import("./type").TdPrimaryTableProps["displayColumns"];
    };
    defaultDisplayColumns: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultDisplayColumns"]>;
    };
    dragSort: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["dragSort"]>;
        validator(val: import("./type").TdPrimaryTableProps["dragSort"]): boolean;
    };
    dragSortOptions: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["dragSortOptions"]>;
    };
    editableCellState: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["editableCellState"]>;
    };
    editableRowKeys: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["editableRowKeys"]>;
    };
    expandIcon: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandIcon"]>;
        default: import("./type").TdPrimaryTableProps["expandIcon"];
    };
    expandOnRowClick: BooleanConstructor;
    expandedRow: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandedRow"]>;
    };
    expandedRowKeys: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandedRowKeys"]>;
        default: import("./type").TdPrimaryTableProps["expandedRowKeys"];
    };
    defaultExpandedRowKeys: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultExpandedRowKeys"]>;
        default: () => import("./type").TdPrimaryTableProps["defaultExpandedRowKeys"];
    };
    filterIcon: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterIcon"]>;
    };
    filterRow: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterRow"]>;
    };
    filterValue: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterValue"]>;
        default: import("./type").TdPrimaryTableProps["filterValue"];
    };
    defaultFilterValue: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultFilterValue"]>;
    };
    hideSortTips: BooleanConstructor;
    indeterminateSelectedRowKeys: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["indeterminateSelectedRowKeys"]>;
    };
    multipleSort: BooleanConstructor;
    reserveSelectedRowOnPaginate: {
        type: BooleanConstructor;
        default: boolean;
    };
    rowSelectionAllowUncheck: BooleanConstructor;
    rowSelectionType: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["rowSelectionType"]>;
        validator(val: import("./type").TdPrimaryTableProps["rowSelectionType"]): boolean;
    };
    selectOnRowClick: BooleanConstructor;
    selectedRowKeys: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["selectedRowKeys"]>;
        default: import("./type").TdPrimaryTableProps["selectedRowKeys"];
    };
    defaultSelectedRowKeys: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultSelectedRowKeys"]>;
        default: () => import("./type").TdPrimaryTableProps["defaultSelectedRowKeys"];
    };
    showSortColumnBgColor: BooleanConstructor;
    sort: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["sort"]>;
        default: import("./type").TdPrimaryTableProps["sort"];
    };
    defaultSort: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultSort"]>;
    };
    sortIcon: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["sortIcon"]>;
    };
    sortOnRowDraggable: BooleanConstructor;
    onAsyncLoadingClick: import("vue").PropType<import("./type").TdPrimaryTableProps["onAsyncLoadingClick"]>;
    onCellClick: import("vue").PropType<import("./type").TdPrimaryTableProps["onCellClick"]>;
    onChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onChange"]>;
    onColumnChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onColumnChange"]>;
    onColumnControllerVisibleChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onColumnControllerVisibleChange"]>;
    onDataChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onDataChange"]>;
    onDisplayColumnsChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onDisplayColumnsChange"]>;
    onDragSort: import("vue").PropType<import("./type").TdPrimaryTableProps["onDragSort"]>;
    onExpandChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onExpandChange"]>;
    onFilterChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onFilterChange"]>;
    onRowEdit: import("vue").PropType<import("./type").TdPrimaryTableProps["onRowEdit"]>;
    onRowValidate: import("vue").PropType<import("./type").TdPrimaryTableProps["onRowValidate"]>;
    onSelectChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onSelectChange"]>;
    onSortChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onSortChange"]>;
    onValidate: import("vue").PropType<import("./type").TdPrimaryTableProps["onValidate"]>;
    activeRowKeys: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowKeys"]>;
        default: import("./type").TdBaseTableProps["activeRowKeys"];
    };
    defaultActiveRowKeys: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["defaultActiveRowKeys"]>;
        default: () => import("./type").TdBaseTableProps["defaultActiveRowKeys"];
    };
    activeRowType: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowType"]>;
        default: import("./type").TdBaseTableProps["activeRowType"];
    };
    allowResizeColumnWidth: {
        type: BooleanConstructor;
        default: any;
    };
    attach: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["attach"]>;
    };
    bordered: BooleanConstructor;
    bottomContent: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["bottomContent"]>;
    };
    cellEmptyContent: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["cellEmptyContent"]>;
    };
    data: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["data"]>;
        default: () => import("./type").TdBaseTableProps["data"];
    };
    disableDataPage: BooleanConstructor;
    disableSpaceInactiveRow: {
        type: BooleanConstructor;
        default: any;
    };
    empty: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["empty"]>;
        default: import("./type").TdBaseTableProps["empty"];
    };
    firstFullRow: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["firstFullRow"]>;
    };
    fixedRows: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["fixedRows"]>;
    };
    footData: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["footData"]>;
        default: () => import("./type").TdBaseTableProps["footData"];
    };
    footerAffixProps: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixProps"]>;
    };
    footerAffixedBottom: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixedBottom"]>;
        default: import("./type").TdBaseTableProps["footerAffixedBottom"];
    };
    footerSummary: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["footerSummary"]>;
    };
    headerAffixProps: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixProps"]>;
    };
    headerAffixedTop: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixedTop"]>;
        default: import("./type").TdBaseTableProps["headerAffixedTop"];
    };
    height: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["height"]>;
    };
    horizontalScrollAffixedBottom: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["horizontalScrollAffixedBottom"]>;
    };
    hover: BooleanConstructor;
    keyboardRowHover: {
        type: BooleanConstructor;
        default: boolean;
    };
    lastFullRow: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["lastFullRow"]>;
    };
    lazyLoad: BooleanConstructor;
    loading: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["loading"]>;
        default: import("./type").TdBaseTableProps["loading"];
    };
    loadingProps: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["loadingProps"]>;
    };
    locale: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["locale"]>;
    };
    maxHeight: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["maxHeight"]>;
    };
    pagination: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["pagination"]>;
    };
    paginationAffixedBottom: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["paginationAffixedBottom"]>;
    };
    resizable: BooleanConstructor;
    rowAttributes: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["rowAttributes"]>;
    };
    rowClassName: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["rowClassName"]>;
    };
    rowKey: {
        type: StringConstructor;
        default: string;
        required: boolean;
    };
    rowspanAndColspan: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspan"]>;
    };
    rowspanAndColspanInFooter: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspanInFooter"]>;
    };
    scroll: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["scroll"]>;
    };
    showHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["size"]>;
        validator(val: import("./type").TdBaseTableProps["size"]): boolean;
    };
    stripe: BooleanConstructor;
    tableContentWidth: {
        type: StringConstructor;
        default: string;
    };
    tableLayout: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["tableLayout"]>;
        default: import("./type").TdBaseTableProps["tableLayout"];
        validator(val: import("./type").TdBaseTableProps["tableLayout"]): boolean;
    };
    topContent: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["topContent"]>;
    };
    verticalAlign: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["verticalAlign"]>;
        default: import("./type").TdBaseTableProps["verticalAlign"];
        validator(val: import("./type").TdBaseTableProps["verticalAlign"]): boolean;
    };
    onActiveChange: import("vue").PropType<import("./type").TdBaseTableProps["onActiveChange"]>;
    onActiveRowAction: import("vue").PropType<import("./type").TdBaseTableProps["onActiveRowAction"]>;
    onColumnResizeChange: import("vue").PropType<import("./type").TdBaseTableProps["onColumnResizeChange"]>;
    onPageChange: import("vue").PropType<import("./type").TdBaseTableProps["onPageChange"]>;
    onRowClick: import("vue").PropType<import("./type").TdBaseTableProps["onRowClick"]>;
    onRowDblclick: import("vue").PropType<import("./type").TdBaseTableProps["onRowDblclick"]>;
    onRowMousedown: import("vue").PropType<import("./type").TdBaseTableProps["onRowMousedown"]>;
    onRowMouseenter: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseenter"]>;
    onRowMouseleave: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseleave"]>;
    onRowMouseover: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseover"]>;
    onRowMouseup: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseup"]>;
    onScroll: import("vue").PropType<import("./type").TdBaseTableProps["onScroll"]>;
    onScrollX: import("vue").PropType<import("./type").TdBaseTableProps["onScrollX"]>;
    onScrollY: import("vue").PropType<import("./type").TdBaseTableProps["onScrollY"]>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, {
    sort: import("./type").TableSort;
    loading: boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
    data: import("./type").TableRowData[];
    empty: string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
    hover: boolean;
    tableLayout: "auto" | "fixed";
    verticalAlign: "top" | "middle" | "bottom";
    columns: import("./type").PrimaryTableCol<import("./type").TableRowData>[];
    lazyLoad: boolean;
    bordered: boolean;
    stripe: boolean;
    activeRowKeys: (string | number)[];
    defaultActiveRowKeys: (string | number)[];
    activeRowType: "single" | "multiple";
    allowResizeColumnWidth: boolean;
    disableDataPage: boolean;
    disableSpaceInactiveRow: boolean;
    footData: import("./type").TableRowData[];
    footerAffixedBottom: boolean | Partial<import("..").TdAffixProps>;
    headerAffixedTop: boolean | Partial<import("..").TdAffixProps>;
    keyboardRowHover: boolean;
    resizable: boolean;
    rowKey: string;
    showHeader: boolean;
    tableContentWidth: string;
    columnControllerVisible: boolean;
    defaultColumnControllerVisible: boolean;
    displayColumns: import("..").CheckboxGroupValue;
    expandIcon: boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("..").TNodeReturnValue);
    expandOnRowClick: boolean;
    expandedRowKeys: (string | number)[];
    defaultExpandedRowKeys: (string | number)[];
    filterValue: import("./type").FilterValue;
    hideSortTips: boolean;
    multipleSort: boolean;
    reserveSelectedRowOnPaginate: boolean;
    rowSelectionAllowUncheck: boolean;
    selectOnRowClick: boolean;
    selectedRowKeys: (string | number)[];
    defaultSelectedRowKeys: (string | number)[];
    showSortColumnBgColor: boolean;
    sortOnRowDraggable: boolean;
    expandedTreeNodes: (string | number)[];
    defaultExpandedTreeNodes: (string | number)[];
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export declare const Table: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        asyncLoading: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["asyncLoading"]>;
        };
        columnController: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["columnController"]>;
        };
        columnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        defaultColumnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        columns: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["columns"]>;
            default: () => import("./type").TdPrimaryTableProps["columns"];
        };
        displayColumns: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["displayColumns"]>;
            default: import("./type").TdPrimaryTableProps["displayColumns"];
        };
        defaultDisplayColumns: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultDisplayColumns"]>;
        };
        dragSort: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["dragSort"]>;
            validator(val: import("./type").TdPrimaryTableProps["dragSort"]): boolean;
        };
        dragSortOptions: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["dragSortOptions"]>;
        };
        editableCellState: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["editableCellState"]>;
        };
        editableRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["editableRowKeys"]>;
        };
        expandIcon: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandIcon"]>;
            default: import("./type").TdPrimaryTableProps["expandIcon"];
        };
        expandOnRowClick: BooleanConstructor;
        expandedRow: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandedRow"]>;
        };
        expandedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandedRowKeys"]>;
            default: import("./type").TdPrimaryTableProps["expandedRowKeys"];
        };
        defaultExpandedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultExpandedRowKeys"]>;
            default: () => import("./type").TdPrimaryTableProps["defaultExpandedRowKeys"];
        };
        filterIcon: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterIcon"]>;
        };
        filterRow: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterRow"]>;
        };
        filterValue: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterValue"]>;
            default: import("./type").TdPrimaryTableProps["filterValue"];
        };
        defaultFilterValue: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultFilterValue"]>;
        };
        hideSortTips: BooleanConstructor;
        indeterminateSelectedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["indeterminateSelectedRowKeys"]>;
        };
        multipleSort: BooleanConstructor;
        reserveSelectedRowOnPaginate: {
            type: BooleanConstructor;
            default: boolean;
        };
        rowSelectionAllowUncheck: BooleanConstructor;
        rowSelectionType: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["rowSelectionType"]>;
            validator(val: import("./type").TdPrimaryTableProps["rowSelectionType"]): boolean;
        };
        selectOnRowClick: BooleanConstructor;
        selectedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["selectedRowKeys"]>;
            default: import("./type").TdPrimaryTableProps["selectedRowKeys"];
        };
        defaultSelectedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultSelectedRowKeys"]>;
            default: () => import("./type").TdPrimaryTableProps["defaultSelectedRowKeys"];
        };
        showSortColumnBgColor: BooleanConstructor;
        sort: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["sort"]>;
            default: import("./type").TdPrimaryTableProps["sort"];
        };
        defaultSort: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultSort"]>;
        };
        sortIcon: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["sortIcon"]>;
        };
        sortOnRowDraggable: BooleanConstructor;
        onAsyncLoadingClick: import("vue").PropType<import("./type").TdPrimaryTableProps["onAsyncLoadingClick"]>;
        onCellClick: import("vue").PropType<import("./type").TdPrimaryTableProps["onCellClick"]>;
        onChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onChange"]>;
        onColumnChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onColumnChange"]>;
        onColumnControllerVisibleChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onColumnControllerVisibleChange"]>;
        onDataChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onDataChange"]>;
        onDisplayColumnsChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onDisplayColumnsChange"]>;
        onDragSort: import("vue").PropType<import("./type").TdPrimaryTableProps["onDragSort"]>;
        onExpandChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onExpandChange"]>;
        onFilterChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onFilterChange"]>;
        onRowEdit: import("vue").PropType<import("./type").TdPrimaryTableProps["onRowEdit"]>;
        onRowValidate: import("vue").PropType<import("./type").TdPrimaryTableProps["onRowValidate"]>;
        onSelectChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onSelectChange"]>;
        onSortChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onSortChange"]>;
        onValidate: import("vue").PropType<import("./type").TdPrimaryTableProps["onValidate"]>;
        activeRowKeys: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowKeys"]>;
            default: import("./type").TdBaseTableProps["activeRowKeys"];
        };
        defaultActiveRowKeys: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["defaultActiveRowKeys"]>;
            default: () => import("./type").TdBaseTableProps["defaultActiveRowKeys"];
        };
        activeRowType: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowType"]>;
            default: import("./type").TdBaseTableProps["activeRowType"];
        };
        allowResizeColumnWidth: {
            type: BooleanConstructor;
            default: any;
        };
        attach: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["attach"]>;
        };
        bordered: BooleanConstructor;
        bottomContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["bottomContent"]>;
        };
        cellEmptyContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["cellEmptyContent"]>;
        };
        data: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["data"]>;
            default: () => import("./type").TdBaseTableProps["data"];
        };
        disableDataPage: BooleanConstructor;
        disableSpaceInactiveRow: {
            type: BooleanConstructor;
            default: any;
        };
        empty: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["empty"]>;
            default: import("./type").TdBaseTableProps["empty"];
        };
        firstFullRow: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["firstFullRow"]>;
        };
        fixedRows: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["fixedRows"]>;
        };
        footData: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footData"]>;
            default: () => import("./type").TdBaseTableProps["footData"];
        };
        footerAffixProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixProps"]>;
        };
        footerAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixedBottom"]>;
            default: import("./type").TdBaseTableProps["footerAffixedBottom"];
        };
        footerSummary: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerSummary"]>;
        };
        headerAffixProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixProps"]>;
        };
        headerAffixedTop: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixedTop"]>;
            default: import("./type").TdBaseTableProps["headerAffixedTop"];
        };
        height: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["height"]>;
        };
        horizontalScrollAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["horizontalScrollAffixedBottom"]>;
        };
        hover: BooleanConstructor;
        keyboardRowHover: {
            type: BooleanConstructor;
            default: boolean;
        };
        lastFullRow: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["lastFullRow"]>;
        };
        lazyLoad: BooleanConstructor;
        loading: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["loading"]>;
            default: import("./type").TdBaseTableProps["loading"];
        };
        loadingProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["loadingProps"]>;
        };
        locale: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["locale"]>;
        };
        maxHeight: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["maxHeight"]>;
        };
        pagination: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["pagination"]>;
        };
        paginationAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["paginationAffixedBottom"]>;
        };
        resizable: BooleanConstructor;
        rowAttributes: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowAttributes"]>;
        };
        rowClassName: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowClassName"]>;
        };
        rowKey: {
            type: StringConstructor;
            default: string;
            required: boolean;
        };
        rowspanAndColspan: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspan"]>;
        };
        rowspanAndColspanInFooter: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspanInFooter"]>;
        };
        scroll: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["scroll"]>;
        };
        showHeader: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["size"]>;
            validator(val: import("./type").TdBaseTableProps["size"]): boolean;
        };
        stripe: BooleanConstructor;
        tableContentWidth: {
            type: StringConstructor;
            default: string;
        };
        tableLayout: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["tableLayout"]>;
            default: import("./type").TdBaseTableProps["tableLayout"];
            validator(val: import("./type").TdBaseTableProps["tableLayout"]): boolean;
        };
        topContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["topContent"]>;
        };
        verticalAlign: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["verticalAlign"]>;
            default: import("./type").TdBaseTableProps["verticalAlign"];
            validator(val: import("./type").TdBaseTableProps["verticalAlign"]): boolean;
        };
        onActiveChange: import("vue").PropType<import("./type").TdBaseTableProps["onActiveChange"]>;
        onActiveRowAction: import("vue").PropType<import("./type").TdBaseTableProps["onActiveRowAction"]>;
        onColumnResizeChange: import("vue").PropType<import("./type").TdBaseTableProps["onColumnResizeChange"]>;
        onPageChange: import("vue").PropType<import("./type").TdBaseTableProps["onPageChange"]>;
        onRowClick: import("vue").PropType<import("./type").TdBaseTableProps["onRowClick"]>;
        onRowDblclick: import("vue").PropType<import("./type").TdBaseTableProps["onRowDblclick"]>;
        onRowMousedown: import("vue").PropType<import("./type").TdBaseTableProps["onRowMousedown"]>;
        onRowMouseenter: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseenter"]>;
        onRowMouseleave: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseleave"]>;
        onRowMouseover: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseover"]>;
        onRowMouseup: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseup"]>;
        onScroll: import("vue").PropType<import("./type").TdBaseTableProps["onScroll"]>;
        onScrollX: import("vue").PropType<import("./type").TdBaseTableProps["onScrollX"]>;
        onScrollY: import("vue").PropType<import("./type").TdBaseTableProps["onScrollY"]>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        asyncLoading: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["asyncLoading"]>;
        };
        columnController: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["columnController"]>;
        };
        columnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        defaultColumnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        columns: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["columns"]>;
            default: () => import("./type").TdPrimaryTableProps["columns"];
        };
        displayColumns: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["displayColumns"]>;
            default: import("./type").TdPrimaryTableProps["displayColumns"];
        };
        defaultDisplayColumns: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultDisplayColumns"]>;
        };
        dragSort: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["dragSort"]>;
            validator(val: import("./type").TdPrimaryTableProps["dragSort"]): boolean;
        };
        dragSortOptions: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["dragSortOptions"]>;
        };
        editableCellState: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["editableCellState"]>;
        };
        editableRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["editableRowKeys"]>;
        };
        expandIcon: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandIcon"]>;
            default: import("./type").TdPrimaryTableProps["expandIcon"];
        };
        expandOnRowClick: BooleanConstructor;
        expandedRow: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandedRow"]>;
        };
        expandedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandedRowKeys"]>;
            default: import("./type").TdPrimaryTableProps["expandedRowKeys"];
        };
        defaultExpandedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultExpandedRowKeys"]>;
            default: () => import("./type").TdPrimaryTableProps["defaultExpandedRowKeys"];
        };
        filterIcon: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterIcon"]>;
        };
        filterRow: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterRow"]>;
        };
        filterValue: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterValue"]>;
            default: import("./type").TdPrimaryTableProps["filterValue"];
        };
        defaultFilterValue: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultFilterValue"]>;
        };
        hideSortTips: BooleanConstructor;
        indeterminateSelectedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["indeterminateSelectedRowKeys"]>;
        };
        multipleSort: BooleanConstructor;
        reserveSelectedRowOnPaginate: {
            type: BooleanConstructor;
            default: boolean;
        };
        rowSelectionAllowUncheck: BooleanConstructor;
        rowSelectionType: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["rowSelectionType"]>;
            validator(val: import("./type").TdPrimaryTableProps["rowSelectionType"]): boolean;
        };
        selectOnRowClick: BooleanConstructor;
        selectedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["selectedRowKeys"]>;
            default: import("./type").TdPrimaryTableProps["selectedRowKeys"];
        };
        defaultSelectedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultSelectedRowKeys"]>;
            default: () => import("./type").TdPrimaryTableProps["defaultSelectedRowKeys"];
        };
        showSortColumnBgColor: BooleanConstructor;
        sort: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["sort"]>;
            default: import("./type").TdPrimaryTableProps["sort"];
        };
        defaultSort: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultSort"]>;
        };
        sortIcon: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["sortIcon"]>;
        };
        sortOnRowDraggable: BooleanConstructor;
        onAsyncLoadingClick: import("vue").PropType<import("./type").TdPrimaryTableProps["onAsyncLoadingClick"]>;
        onCellClick: import("vue").PropType<import("./type").TdPrimaryTableProps["onCellClick"]>;
        onChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onChange"]>;
        onColumnChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onColumnChange"]>;
        onColumnControllerVisibleChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onColumnControllerVisibleChange"]>;
        onDataChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onDataChange"]>;
        onDisplayColumnsChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onDisplayColumnsChange"]>;
        onDragSort: import("vue").PropType<import("./type").TdPrimaryTableProps["onDragSort"]>;
        onExpandChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onExpandChange"]>;
        onFilterChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onFilterChange"]>;
        onRowEdit: import("vue").PropType<import("./type").TdPrimaryTableProps["onRowEdit"]>;
        onRowValidate: import("vue").PropType<import("./type").TdPrimaryTableProps["onRowValidate"]>;
        onSelectChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onSelectChange"]>;
        onSortChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onSortChange"]>;
        onValidate: import("vue").PropType<import("./type").TdPrimaryTableProps["onValidate"]>;
        activeRowKeys: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowKeys"]>;
            default: import("./type").TdBaseTableProps["activeRowKeys"];
        };
        defaultActiveRowKeys: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["defaultActiveRowKeys"]>;
            default: () => import("./type").TdBaseTableProps["defaultActiveRowKeys"];
        };
        activeRowType: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowType"]>;
            default: import("./type").TdBaseTableProps["activeRowType"];
        };
        allowResizeColumnWidth: {
            type: BooleanConstructor;
            default: any;
        };
        attach: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["attach"]>;
        };
        bordered: BooleanConstructor;
        bottomContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["bottomContent"]>;
        };
        cellEmptyContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["cellEmptyContent"]>;
        };
        data: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["data"]>;
            default: () => import("./type").TdBaseTableProps["data"];
        };
        disableDataPage: BooleanConstructor;
        disableSpaceInactiveRow: {
            type: BooleanConstructor;
            default: any;
        };
        empty: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["empty"]>;
            default: import("./type").TdBaseTableProps["empty"];
        };
        firstFullRow: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["firstFullRow"]>;
        };
        fixedRows: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["fixedRows"]>;
        };
        footData: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footData"]>;
            default: () => import("./type").TdBaseTableProps["footData"];
        };
        footerAffixProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixProps"]>;
        };
        footerAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixedBottom"]>;
            default: import("./type").TdBaseTableProps["footerAffixedBottom"];
        };
        footerSummary: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerSummary"]>;
        };
        headerAffixProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixProps"]>;
        };
        headerAffixedTop: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixedTop"]>;
            default: import("./type").TdBaseTableProps["headerAffixedTop"];
        };
        height: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["height"]>;
        };
        horizontalScrollAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["horizontalScrollAffixedBottom"]>;
        };
        hover: BooleanConstructor;
        keyboardRowHover: {
            type: BooleanConstructor;
            default: boolean;
        };
        lastFullRow: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["lastFullRow"]>;
        };
        lazyLoad: BooleanConstructor;
        loading: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["loading"]>;
            default: import("./type").TdBaseTableProps["loading"];
        };
        loadingProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["loadingProps"]>;
        };
        locale: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["locale"]>;
        };
        maxHeight: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["maxHeight"]>;
        };
        pagination: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["pagination"]>;
        };
        paginationAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["paginationAffixedBottom"]>;
        };
        resizable: BooleanConstructor;
        rowAttributes: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowAttributes"]>;
        };
        rowClassName: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowClassName"]>;
        };
        rowKey: {
            type: StringConstructor;
            default: string;
            required: boolean;
        };
        rowspanAndColspan: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspan"]>;
        };
        rowspanAndColspanInFooter: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspanInFooter"]>;
        };
        scroll: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["scroll"]>;
        };
        showHeader: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["size"]>;
            validator(val: import("./type").TdBaseTableProps["size"]): boolean;
        };
        stripe: BooleanConstructor;
        tableContentWidth: {
            type: StringConstructor;
            default: string;
        };
        tableLayout: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["tableLayout"]>;
            default: import("./type").TdBaseTableProps["tableLayout"];
            validator(val: import("./type").TdBaseTableProps["tableLayout"]): boolean;
        };
        topContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["topContent"]>;
        };
        verticalAlign: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["verticalAlign"]>;
            default: import("./type").TdBaseTableProps["verticalAlign"];
            validator(val: import("./type").TdBaseTableProps["verticalAlign"]): boolean;
        };
        onActiveChange: import("vue").PropType<import("./type").TdBaseTableProps["onActiveChange"]>;
        onActiveRowAction: import("vue").PropType<import("./type").TdBaseTableProps["onActiveRowAction"]>;
        onColumnResizeChange: import("vue").PropType<import("./type").TdBaseTableProps["onColumnResizeChange"]>;
        onPageChange: import("vue").PropType<import("./type").TdBaseTableProps["onPageChange"]>;
        onRowClick: import("vue").PropType<import("./type").TdBaseTableProps["onRowClick"]>;
        onRowDblclick: import("vue").PropType<import("./type").TdBaseTableProps["onRowDblclick"]>;
        onRowMousedown: import("vue").PropType<import("./type").TdBaseTableProps["onRowMousedown"]>;
        onRowMouseenter: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseenter"]>;
        onRowMouseleave: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseleave"]>;
        onRowMouseover: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseover"]>;
        onRowMouseup: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseup"]>;
        onScroll: import("vue").PropType<import("./type").TdBaseTableProps["onScroll"]>;
        onScrollX: import("vue").PropType<import("./type").TdBaseTableProps["onScrollX"]>;
        onScrollY: import("vue").PropType<import("./type").TdBaseTableProps["onScrollY"]>;
    }>>, {
        sort: import("./type").TableSort;
        loading: boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        data: import("./type").TableRowData[];
        empty: string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        hover: boolean;
        tableLayout: "auto" | "fixed";
        verticalAlign: "top" | "middle" | "bottom";
        columns: import("./type").PrimaryTableCol<import("./type").TableRowData>[];
        lazyLoad: boolean;
        bordered: boolean;
        stripe: boolean;
        activeRowKeys: (string | number)[];
        defaultActiveRowKeys: (string | number)[];
        activeRowType: "single" | "multiple";
        allowResizeColumnWidth: boolean;
        disableDataPage: boolean;
        disableSpaceInactiveRow: boolean;
        footData: import("./type").TableRowData[];
        footerAffixedBottom: boolean | Partial<import("..").TdAffixProps>;
        headerAffixedTop: boolean | Partial<import("..").TdAffixProps>;
        keyboardRowHover: boolean;
        resizable: boolean;
        rowKey: string;
        showHeader: boolean;
        tableContentWidth: string;
        columnControllerVisible: boolean;
        defaultColumnControllerVisible: boolean;
        displayColumns: import("..").CheckboxGroupValue;
        expandIcon: boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("..").TNodeReturnValue);
        expandOnRowClick: boolean;
        expandedRowKeys: (string | number)[];
        defaultExpandedRowKeys: (string | number)[];
        filterValue: import("./type").FilterValue;
        hideSortTips: boolean;
        multipleSort: boolean;
        reserveSelectedRowOnPaginate: boolean;
        rowSelectionAllowUncheck: boolean;
        selectOnRowClick: boolean;
        selectedRowKeys: (string | number)[];
        defaultSelectedRowKeys: (string | number)[];
        showSortColumnBgColor: boolean;
        sortOnRowDraggable: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        asyncLoading: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["asyncLoading"]>;
        };
        columnController: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["columnController"]>;
        };
        columnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        defaultColumnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        columns: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["columns"]>;
            default: () => import("./type").TdPrimaryTableProps["columns"];
        };
        displayColumns: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["displayColumns"]>;
            default: import("./type").TdPrimaryTableProps["displayColumns"];
        };
        defaultDisplayColumns: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultDisplayColumns"]>;
        };
        dragSort: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["dragSort"]>;
            validator(val: import("./type").TdPrimaryTableProps["dragSort"]): boolean;
        };
        dragSortOptions: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["dragSortOptions"]>;
        };
        editableCellState: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["editableCellState"]>;
        };
        editableRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["editableRowKeys"]>;
        };
        expandIcon: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandIcon"]>;
            default: import("./type").TdPrimaryTableProps["expandIcon"];
        };
        expandOnRowClick: BooleanConstructor;
        expandedRow: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandedRow"]>;
        };
        expandedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandedRowKeys"]>;
            default: import("./type").TdPrimaryTableProps["expandedRowKeys"];
        };
        defaultExpandedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultExpandedRowKeys"]>;
            default: () => import("./type").TdPrimaryTableProps["defaultExpandedRowKeys"];
        };
        filterIcon: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterIcon"]>;
        };
        filterRow: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterRow"]>;
        };
        filterValue: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterValue"]>;
            default: import("./type").TdPrimaryTableProps["filterValue"];
        };
        defaultFilterValue: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultFilterValue"]>;
        };
        hideSortTips: BooleanConstructor;
        indeterminateSelectedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["indeterminateSelectedRowKeys"]>;
        };
        multipleSort: BooleanConstructor;
        reserveSelectedRowOnPaginate: {
            type: BooleanConstructor;
            default: boolean;
        };
        rowSelectionAllowUncheck: BooleanConstructor;
        rowSelectionType: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["rowSelectionType"]>;
            validator(val: import("./type").TdPrimaryTableProps["rowSelectionType"]): boolean;
        };
        selectOnRowClick: BooleanConstructor;
        selectedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["selectedRowKeys"]>;
            default: import("./type").TdPrimaryTableProps["selectedRowKeys"];
        };
        defaultSelectedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultSelectedRowKeys"]>;
            default: () => import("./type").TdPrimaryTableProps["defaultSelectedRowKeys"];
        };
        showSortColumnBgColor: BooleanConstructor;
        sort: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["sort"]>;
            default: import("./type").TdPrimaryTableProps["sort"];
        };
        defaultSort: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultSort"]>;
        };
        sortIcon: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["sortIcon"]>;
        };
        sortOnRowDraggable: BooleanConstructor;
        onAsyncLoadingClick: import("vue").PropType<import("./type").TdPrimaryTableProps["onAsyncLoadingClick"]>;
        onCellClick: import("vue").PropType<import("./type").TdPrimaryTableProps["onCellClick"]>;
        onChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onChange"]>;
        onColumnChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onColumnChange"]>;
        onColumnControllerVisibleChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onColumnControllerVisibleChange"]>;
        onDataChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onDataChange"]>;
        onDisplayColumnsChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onDisplayColumnsChange"]>;
        onDragSort: import("vue").PropType<import("./type").TdPrimaryTableProps["onDragSort"]>;
        onExpandChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onExpandChange"]>;
        onFilterChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onFilterChange"]>;
        onRowEdit: import("vue").PropType<import("./type").TdPrimaryTableProps["onRowEdit"]>;
        onRowValidate: import("vue").PropType<import("./type").TdPrimaryTableProps["onRowValidate"]>;
        onSelectChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onSelectChange"]>;
        onSortChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onSortChange"]>;
        onValidate: import("vue").PropType<import("./type").TdPrimaryTableProps["onValidate"]>;
        activeRowKeys: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowKeys"]>;
            default: import("./type").TdBaseTableProps["activeRowKeys"];
        };
        defaultActiveRowKeys: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["defaultActiveRowKeys"]>;
            default: () => import("./type").TdBaseTableProps["defaultActiveRowKeys"];
        };
        activeRowType: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowType"]>;
            default: import("./type").TdBaseTableProps["activeRowType"];
        };
        allowResizeColumnWidth: {
            type: BooleanConstructor;
            default: any;
        };
        attach: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["attach"]>;
        };
        bordered: BooleanConstructor;
        bottomContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["bottomContent"]>;
        };
        cellEmptyContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["cellEmptyContent"]>;
        };
        data: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["data"]>;
            default: () => import("./type").TdBaseTableProps["data"];
        };
        disableDataPage: BooleanConstructor;
        disableSpaceInactiveRow: {
            type: BooleanConstructor;
            default: any;
        };
        empty: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["empty"]>;
            default: import("./type").TdBaseTableProps["empty"];
        };
        firstFullRow: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["firstFullRow"]>;
        };
        fixedRows: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["fixedRows"]>;
        };
        footData: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footData"]>;
            default: () => import("./type").TdBaseTableProps["footData"];
        };
        footerAffixProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixProps"]>;
        };
        footerAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixedBottom"]>;
            default: import("./type").TdBaseTableProps["footerAffixedBottom"];
        };
        footerSummary: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerSummary"]>;
        };
        headerAffixProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixProps"]>;
        };
        headerAffixedTop: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixedTop"]>;
            default: import("./type").TdBaseTableProps["headerAffixedTop"];
        };
        height: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["height"]>;
        };
        horizontalScrollAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["horizontalScrollAffixedBottom"]>;
        };
        hover: BooleanConstructor;
        keyboardRowHover: {
            type: BooleanConstructor;
            default: boolean;
        };
        lastFullRow: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["lastFullRow"]>;
        };
        lazyLoad: BooleanConstructor;
        loading: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["loading"]>;
            default: import("./type").TdBaseTableProps["loading"];
        };
        loadingProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["loadingProps"]>;
        };
        locale: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["locale"]>;
        };
        maxHeight: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["maxHeight"]>;
        };
        pagination: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["pagination"]>;
        };
        paginationAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["paginationAffixedBottom"]>;
        };
        resizable: BooleanConstructor;
        rowAttributes: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowAttributes"]>;
        };
        rowClassName: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowClassName"]>;
        };
        rowKey: {
            type: StringConstructor;
            default: string;
            required: boolean;
        };
        rowspanAndColspan: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspan"]>;
        };
        rowspanAndColspanInFooter: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspanInFooter"]>;
        };
        scroll: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["scroll"]>;
        };
        showHeader: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["size"]>;
            validator(val: import("./type").TdBaseTableProps["size"]): boolean;
        };
        stripe: BooleanConstructor;
        tableContentWidth: {
            type: StringConstructor;
            default: string;
        };
        tableLayout: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["tableLayout"]>;
            default: import("./type").TdBaseTableProps["tableLayout"];
            validator(val: import("./type").TdBaseTableProps["tableLayout"]): boolean;
        };
        topContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["topContent"]>;
        };
        verticalAlign: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["verticalAlign"]>;
            default: import("./type").TdBaseTableProps["verticalAlign"];
            validator(val: import("./type").TdBaseTableProps["verticalAlign"]): boolean;
        };
        onActiveChange: import("vue").PropType<import("./type").TdBaseTableProps["onActiveChange"]>;
        onActiveRowAction: import("vue").PropType<import("./type").TdBaseTableProps["onActiveRowAction"]>;
        onColumnResizeChange: import("vue").PropType<import("./type").TdBaseTableProps["onColumnResizeChange"]>;
        onPageChange: import("vue").PropType<import("./type").TdBaseTableProps["onPageChange"]>;
        onRowClick: import("vue").PropType<import("./type").TdBaseTableProps["onRowClick"]>;
        onRowDblclick: import("vue").PropType<import("./type").TdBaseTableProps["onRowDblclick"]>;
        onRowMousedown: import("vue").PropType<import("./type").TdBaseTableProps["onRowMousedown"]>;
        onRowMouseenter: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseenter"]>;
        onRowMouseleave: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseleave"]>;
        onRowMouseover: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseover"]>;
        onRowMouseup: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseup"]>;
        onScroll: import("vue").PropType<import("./type").TdBaseTableProps["onScroll"]>;
        onScrollX: import("vue").PropType<import("./type").TdBaseTableProps["onScrollX"]>;
        onScrollY: import("vue").PropType<import("./type").TdBaseTableProps["onScrollY"]>;
    }>>, () => JSX.Element, {}, {}, {}, {
        sort: import("./type").TableSort;
        loading: boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        data: import("./type").TableRowData[];
        empty: string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        hover: boolean;
        tableLayout: "auto" | "fixed";
        verticalAlign: "top" | "middle" | "bottom";
        columns: import("./type").PrimaryTableCol<import("./type").TableRowData>[];
        lazyLoad: boolean;
        bordered: boolean;
        stripe: boolean;
        activeRowKeys: (string | number)[];
        defaultActiveRowKeys: (string | number)[];
        activeRowType: "single" | "multiple";
        allowResizeColumnWidth: boolean;
        disableDataPage: boolean;
        disableSpaceInactiveRow: boolean;
        footData: import("./type").TableRowData[];
        footerAffixedBottom: boolean | Partial<import("..").TdAffixProps>;
        headerAffixedTop: boolean | Partial<import("..").TdAffixProps>;
        keyboardRowHover: boolean;
        resizable: boolean;
        rowKey: string;
        showHeader: boolean;
        tableContentWidth: string;
        columnControllerVisible: boolean;
        defaultColumnControllerVisible: boolean;
        displayColumns: import("..").CheckboxGroupValue;
        expandIcon: boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("..").TNodeReturnValue);
        expandOnRowClick: boolean;
        expandedRowKeys: (string | number)[];
        defaultExpandedRowKeys: (string | number)[];
        filterValue: import("./type").FilterValue;
        hideSortTips: boolean;
        multipleSort: boolean;
        reserveSelectedRowOnPaginate: boolean;
        rowSelectionAllowUncheck: boolean;
        selectOnRowClick: boolean;
        selectedRowKeys: (string | number)[];
        defaultSelectedRowKeys: (string | number)[];
        showSortColumnBgColor: boolean;
        sortOnRowDraggable: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    asyncLoading: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["asyncLoading"]>;
    };
    columnController: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["columnController"]>;
    };
    columnControllerVisible: {
        type: BooleanConstructor;
        default: any;
    };
    defaultColumnControllerVisible: {
        type: BooleanConstructor;
        default: any;
    };
    columns: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["columns"]>;
        default: () => import("./type").TdPrimaryTableProps["columns"];
    };
    displayColumns: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["displayColumns"]>;
        default: import("./type").TdPrimaryTableProps["displayColumns"];
    };
    defaultDisplayColumns: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultDisplayColumns"]>;
    };
    dragSort: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["dragSort"]>;
        validator(val: import("./type").TdPrimaryTableProps["dragSort"]): boolean;
    };
    dragSortOptions: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["dragSortOptions"]>;
    };
    editableCellState: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["editableCellState"]>;
    };
    editableRowKeys: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["editableRowKeys"]>;
    };
    expandIcon: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandIcon"]>;
        default: import("./type").TdPrimaryTableProps["expandIcon"];
    };
    expandOnRowClick: BooleanConstructor;
    expandedRow: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandedRow"]>;
    };
    expandedRowKeys: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandedRowKeys"]>;
        default: import("./type").TdPrimaryTableProps["expandedRowKeys"];
    };
    defaultExpandedRowKeys: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultExpandedRowKeys"]>;
        default: () => import("./type").TdPrimaryTableProps["defaultExpandedRowKeys"];
    };
    filterIcon: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterIcon"]>;
    };
    filterRow: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterRow"]>;
    };
    filterValue: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterValue"]>;
        default: import("./type").TdPrimaryTableProps["filterValue"];
    };
    defaultFilterValue: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultFilterValue"]>;
    };
    hideSortTips: BooleanConstructor;
    indeterminateSelectedRowKeys: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["indeterminateSelectedRowKeys"]>;
    };
    multipleSort: BooleanConstructor;
    reserveSelectedRowOnPaginate: {
        type: BooleanConstructor;
        default: boolean;
    };
    rowSelectionAllowUncheck: BooleanConstructor;
    rowSelectionType: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["rowSelectionType"]>;
        validator(val: import("./type").TdPrimaryTableProps["rowSelectionType"]): boolean;
    };
    selectOnRowClick: BooleanConstructor;
    selectedRowKeys: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["selectedRowKeys"]>;
        default: import("./type").TdPrimaryTableProps["selectedRowKeys"];
    };
    defaultSelectedRowKeys: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultSelectedRowKeys"]>;
        default: () => import("./type").TdPrimaryTableProps["defaultSelectedRowKeys"];
    };
    showSortColumnBgColor: BooleanConstructor;
    sort: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["sort"]>;
        default: import("./type").TdPrimaryTableProps["sort"];
    };
    defaultSort: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultSort"]>;
    };
    sortIcon: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["sortIcon"]>;
    };
    sortOnRowDraggable: BooleanConstructor;
    onAsyncLoadingClick: import("vue").PropType<import("./type").TdPrimaryTableProps["onAsyncLoadingClick"]>;
    onCellClick: import("vue").PropType<import("./type").TdPrimaryTableProps["onCellClick"]>;
    onChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onChange"]>;
    onColumnChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onColumnChange"]>;
    onColumnControllerVisibleChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onColumnControllerVisibleChange"]>;
    onDataChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onDataChange"]>;
    onDisplayColumnsChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onDisplayColumnsChange"]>;
    onDragSort: import("vue").PropType<import("./type").TdPrimaryTableProps["onDragSort"]>;
    onExpandChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onExpandChange"]>;
    onFilterChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onFilterChange"]>;
    onRowEdit: import("vue").PropType<import("./type").TdPrimaryTableProps["onRowEdit"]>;
    onRowValidate: import("vue").PropType<import("./type").TdPrimaryTableProps["onRowValidate"]>;
    onSelectChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onSelectChange"]>;
    onSortChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onSortChange"]>;
    onValidate: import("vue").PropType<import("./type").TdPrimaryTableProps["onValidate"]>;
    activeRowKeys: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowKeys"]>;
        default: import("./type").TdBaseTableProps["activeRowKeys"];
    };
    defaultActiveRowKeys: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["defaultActiveRowKeys"]>;
        default: () => import("./type").TdBaseTableProps["defaultActiveRowKeys"];
    };
    activeRowType: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowType"]>;
        default: import("./type").TdBaseTableProps["activeRowType"];
    };
    allowResizeColumnWidth: {
        type: BooleanConstructor;
        default: any;
    };
    attach: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["attach"]>;
    };
    bordered: BooleanConstructor;
    bottomContent: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["bottomContent"]>;
    };
    cellEmptyContent: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["cellEmptyContent"]>;
    };
    data: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["data"]>;
        default: () => import("./type").TdBaseTableProps["data"];
    };
    disableDataPage: BooleanConstructor;
    disableSpaceInactiveRow: {
        type: BooleanConstructor;
        default: any;
    };
    empty: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["empty"]>;
        default: import("./type").TdBaseTableProps["empty"];
    };
    firstFullRow: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["firstFullRow"]>;
    };
    fixedRows: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["fixedRows"]>;
    };
    footData: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["footData"]>;
        default: () => import("./type").TdBaseTableProps["footData"];
    };
    footerAffixProps: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixProps"]>;
    };
    footerAffixedBottom: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixedBottom"]>;
        default: import("./type").TdBaseTableProps["footerAffixedBottom"];
    };
    footerSummary: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["footerSummary"]>;
    };
    headerAffixProps: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixProps"]>;
    };
    headerAffixedTop: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixedTop"]>;
        default: import("./type").TdBaseTableProps["headerAffixedTop"];
    };
    height: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["height"]>;
    };
    horizontalScrollAffixedBottom: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["horizontalScrollAffixedBottom"]>;
    };
    hover: BooleanConstructor;
    keyboardRowHover: {
        type: BooleanConstructor;
        default: boolean;
    };
    lastFullRow: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["lastFullRow"]>;
    };
    lazyLoad: BooleanConstructor;
    loading: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["loading"]>;
        default: import("./type").TdBaseTableProps["loading"];
    };
    loadingProps: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["loadingProps"]>;
    };
    locale: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["locale"]>;
    };
    maxHeight: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["maxHeight"]>;
    };
    pagination: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["pagination"]>;
    };
    paginationAffixedBottom: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["paginationAffixedBottom"]>;
    };
    resizable: BooleanConstructor;
    rowAttributes: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["rowAttributes"]>;
    };
    rowClassName: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["rowClassName"]>;
    };
    rowKey: {
        type: StringConstructor;
        default: string;
        required: boolean;
    };
    rowspanAndColspan: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspan"]>;
    };
    rowspanAndColspanInFooter: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspanInFooter"]>;
    };
    scroll: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["scroll"]>;
    };
    showHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["size"]>;
        validator(val: import("./type").TdBaseTableProps["size"]): boolean;
    };
    stripe: BooleanConstructor;
    tableContentWidth: {
        type: StringConstructor;
        default: string;
    };
    tableLayout: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["tableLayout"]>;
        default: import("./type").TdBaseTableProps["tableLayout"];
        validator(val: import("./type").TdBaseTableProps["tableLayout"]): boolean;
    };
    topContent: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["topContent"]>;
    };
    verticalAlign: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["verticalAlign"]>;
        default: import("./type").TdBaseTableProps["verticalAlign"];
        validator(val: import("./type").TdBaseTableProps["verticalAlign"]): boolean;
    };
    onActiveChange: import("vue").PropType<import("./type").TdBaseTableProps["onActiveChange"]>;
    onActiveRowAction: import("vue").PropType<import("./type").TdBaseTableProps["onActiveRowAction"]>;
    onColumnResizeChange: import("vue").PropType<import("./type").TdBaseTableProps["onColumnResizeChange"]>;
    onPageChange: import("vue").PropType<import("./type").TdBaseTableProps["onPageChange"]>;
    onRowClick: import("vue").PropType<import("./type").TdBaseTableProps["onRowClick"]>;
    onRowDblclick: import("vue").PropType<import("./type").TdBaseTableProps["onRowDblclick"]>;
    onRowMousedown: import("vue").PropType<import("./type").TdBaseTableProps["onRowMousedown"]>;
    onRowMouseenter: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseenter"]>;
    onRowMouseleave: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseleave"]>;
    onRowMouseover: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseover"]>;
    onRowMouseup: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseup"]>;
    onScroll: import("vue").PropType<import("./type").TdBaseTableProps["onScroll"]>;
    onScrollX: import("vue").PropType<import("./type").TdBaseTableProps["onScrollX"]>;
    onScrollY: import("vue").PropType<import("./type").TdBaseTableProps["onScrollY"]>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    sort: import("./type").TableSort;
    loading: boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
    data: import("./type").TableRowData[];
    empty: string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
    hover: boolean;
    tableLayout: "auto" | "fixed";
    verticalAlign: "top" | "middle" | "bottom";
    columns: import("./type").PrimaryTableCol<import("./type").TableRowData>[];
    lazyLoad: boolean;
    bordered: boolean;
    stripe: boolean;
    activeRowKeys: (string | number)[];
    defaultActiveRowKeys: (string | number)[];
    activeRowType: "single" | "multiple";
    allowResizeColumnWidth: boolean;
    disableDataPage: boolean;
    disableSpaceInactiveRow: boolean;
    footData: import("./type").TableRowData[];
    footerAffixedBottom: boolean | Partial<import("..").TdAffixProps>;
    headerAffixedTop: boolean | Partial<import("..").TdAffixProps>;
    keyboardRowHover: boolean;
    resizable: boolean;
    rowKey: string;
    showHeader: boolean;
    tableContentWidth: string;
    columnControllerVisible: boolean;
    defaultColumnControllerVisible: boolean;
    displayColumns: import("..").CheckboxGroupValue;
    expandIcon: boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("..").TNodeReturnValue);
    expandOnRowClick: boolean;
    expandedRowKeys: (string | number)[];
    defaultExpandedRowKeys: (string | number)[];
    filterValue: import("./type").FilterValue;
    hideSortTips: boolean;
    multipleSort: boolean;
    reserveSelectedRowOnPaginate: boolean;
    rowSelectionAllowUncheck: boolean;
    selectOnRowClick: boolean;
    selectedRowKeys: (string | number)[];
    defaultSelectedRowKeys: (string | number)[];
    showSortColumnBgColor: boolean;
    sortOnRowDraggable: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export default Table;
