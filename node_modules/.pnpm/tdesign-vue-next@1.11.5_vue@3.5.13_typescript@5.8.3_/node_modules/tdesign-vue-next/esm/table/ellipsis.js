/**
 * tdesign v1.11.5
 * (c) 2025 tdesign
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, ref, computed, onMounted, onUpdated, createVNode, isVNode } from 'vue';
import { debounce } from 'lodash-es';
import { renderContent } from '../utils/render-tnode.js';
import { isTextEllipsis } from '../utils/dom.js';
import { Tooltip } from '../tooltip/index.js';
import '../_chunks/dep-caecb55d.js';
import '../tooltip/tooltip.js';
import '@babel/runtime/helpers/slicedToArray';
import '../tooltip/props.js';
import '../popup/props.js';
import '../popup/index.js';
import '../popup/popup.js';
import '@popperjs/core';
import '@babel/runtime/helpers/typeof';
import '../_chunks/dep-7c56a7f5.js';
import '../hooks/useConfig.js';
import '../config-provider/hooks/useConfig.js';
import '../config-provider/utils/context.js';
import '../_chunks/dep-c75b9b8e.js';
import 'dayjs';
import '../hooks/useKeepAnimation.js';
import '../_chunks/dep-d60f6309.js';
import '../hooks/useVModel.js';
import '../popup/container.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../hooks/useResizeObserver.js';
import '../utils/withInstall.js';
import 'tdesign-vue-next/esm/common/style/web/components/popup/_index.less';
import '../tooltip/utils/index.js';
import 'tdesign-vue-next/esm/common/style/web/components/tooltip/_index.less';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !isVNode(s);
}
var TEllipsis = defineComponent({
  name: "TEllipsis",
  props: {
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    tooltipContent: {
      type: [String, Number, Function]
    },
    placement: String,
    attach: [String, Function],
    tooltipProps: Object,
    zIndex: Number,
    overlayClassName: String,
    classPrefix: {
      type: String,
      "default": "t"
    }
  },
  setup: function setup(props) {
    var root = ref();
    var flag = ref(false);
    var isOverflow = ref(false);
    var ellipsisClasses = computed(function () {
      return ["".concat(props.classPrefix, "-table__ellipsis"), "".concat(props.classPrefix, "-text-ellipsis")];
    });
    var innerEllipsisClassName = computed(function () {
      return ["".concat(props.classPrefix, "-table__ellipsis-content"), props.overlayClassName];
    });
    onMounted(function () {
      isOverflow.value = isTextEllipsis(root.value);
    });
    onUpdated(function () {
      isOverflow.value = isTextEllipsis(root.value);
    });
    var onTriggerMouseenter = function onTriggerMouseenter() {
      if (!root.value) return;
      flag.value = true;
    };
    var onTriggerMouseleave = function onTriggerMouseleave() {
      if (!root.value) return;
    };
    var handleVisibleChange = function handleVisibleChange(v) {
      if (!v) flag.value = false;
    };
    var onMouseAround = debounce(function (e) {
      e.type === "mouseleave" ? onTriggerMouseleave() : onTriggerMouseenter();
    }, 80);
    return {
      flag: flag,
      root: root,
      isOverflow: isOverflow,
      ellipsisClasses: ellipsisClasses,
      innerEllipsisClassName: innerEllipsisClassName,
      onMouseAround: onMouseAround,
      handleVisibleChange: handleVisibleChange
    };
  },
  render: function render() {
    var cellNode = renderContent(this, "default", "content");
    var ellipsisContent = createVNode("div", {
      "ref": "root",
      "class": this.ellipsisClasses,
      "onMouseenter": this.onMouseAround,
      "onMouseleave": this.onMouseAround,
      "style": {
        textOverflow: this.isOverflow ? "ellipsis" : "clip"
      }
    }, [cellNode]);
    var content = null;
    var tooltipProps = this.tooltipProps;
    if (this.isOverflow && this.flag) {
      var rProps = _objectSpread({
        content: this.tooltipContent || function () {
          return cellNode;
        },
        destroyOnClose: true,
        zIndex: this.zIndex,
        attach: this.attach,
        placement: this.placement,
        overlayClassName: tooltipProps !== null && tooltipProps !== void 0 && tooltipProps.overlayClassName ? this.innerEllipsisClassName.concat(tooltipProps.overlayClassName) : this.innerEllipsisClassName,
        onVisibleChange: this.handleVisibleChange
      }, tooltipProps);
      content = createVNode(Tooltip, rProps, _isSlot(ellipsisContent) ? ellipsisContent : {
        "default": function _default() {
          return [ellipsisContent];
        }
      });
    } else {
      content = ellipsisContent;
    }
    return content;
  }
});

export { TEllipsis as default };
//# sourceMappingURL=ellipsis.js.map
