/**
 * tdesign v1.11.5
 * (c) 2025 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var Vue = require('vue');
var loading_icon_gradient = require('./icon/gradient.js');
var utils_dom = require('../utils/dom.js');
var hooks_tnode = require('../_chunks/dep-a69ce597.js');
var hooks_useConfig = require('../hooks/useConfig.js');
var hooks_useTeleport = require('../hooks/useTeleport.js');
var loading_props = require('./props.js');
require('../_chunks/dep-b1b8272b.js');
require('../_chunks/dep-25acc189.js');
require('@babel/runtime/helpers/toConsumableArray');
require('@babel/runtime/helpers/objectWithoutProperties');
require('../_chunks/dep-93cf0a54.js');
require('../_chunks/dep-8afe2bf0.js');
require('../_chunks/dep-b8b9c2a3.js');
require('../_chunks/dep-bbe343d7.js');
require('@babel/runtime/helpers/typeof');
require('../_chunks/dep-5ad8a2ab.js');
require('../_chunks/dep-0c2ad01b.js');
require('../_chunks/dep-cea0dc9b.js');
require('../_chunks/dep-30fb1b25.js');
require('../_chunks/dep-047617bf.js');
require('../_chunks/dep-0a510359.js');
require('../utils/render-tnode.js');
require('../_chunks/dep-db023c41.js');
require('../_chunks/dep-e495f218.js');
require('../_chunks/dep-bafc1f63.js');
require('../_chunks/dep-c07d6878.js');
require('../_chunks/dep-a957c564.js');
require('../_chunks/dep-acb090bf.js');
require('../_chunks/dep-76218bd8.js');
require('../_chunks/dep-9a321a91.js');
require('../_chunks/dep-ecbaedee.js');
require('../_chunks/dep-8b98fa07.js');
require('../_chunks/dep-b0b4fff1.js');
require('../_chunks/dep-7a21da5b.js');
require('../_chunks/dep-ed572eb3.js');
require('../_chunks/dep-9de7d250.js');
require('../_chunks/dep-be3c3d53.js');
require('../config-provider/hooks/useConfig.js');
require('../_chunks/dep-b4c4a54b.js');
require('../_chunks/dep-f8ff548f.js');
require('dayjs');
require('../_chunks/dep-b6c192db.js');
require('../_chunks/dep-ba2090c8.js');
require('../_chunks/dep-b27d3215.js');
require('../_chunks/dep-50a41d31.js');
require('../_chunks/dep-49fa220e.js');
require('../_chunks/dep-02ebb419.js');
require('../_chunks/dep-feae46a3.js');
require('../_chunks/dep-abf21389.js');
require('../_chunks/dep-7f32423d.js');
require('../_chunks/dep-7c9e3d93.js');
require('../_chunks/dep-61a7e281.js');
require('../_chunks/dep-6f8a66a3.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);
var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

var useComponentClassName = function useComponentClassName() {
  return {
    name: hooks_useConfig.usePrefixClass("loading"),
    centerClass: hooks_useConfig.usePrefixClass("loading--center"),
    fullscreenClass: hooks_useConfig.usePrefixClass("loading__fullscreen"),
    lockClass: hooks_useConfig.usePrefixClass("loading--lock"),
    overlayClass: hooks_useConfig.usePrefixClass("loading__overlay"),
    relativeClass: hooks_useConfig.usePrefixClass("loading__parent"),
    fullClass: hooks_useConfig.usePrefixClass("loading--full"),
    inheritColorClass: hooks_useConfig.usePrefixClass("loading--inherit-color")
  };
};
var _Loading = Vue.defineComponent({
  name: "TLoading",
  inheritAttrs: false,
  props: loading_props["default"],
  setup: function setup(props2, _ref) {
    var slots = _ref.slots,
      attrs = _ref.attrs;
    var delayShowLoading = Vue.ref(false);
    var _useComponentClassNam = useComponentClassName(),
      name = _useComponentClassNam.name,
      centerClass = _useComponentClassNam.centerClass,
      fullscreenClass = _useComponentClassNam.fullscreenClass,
      lockClass = _useComponentClassNam.lockClass,
      overlayClass = _useComponentClassNam.overlayClass,
      relativeClass = _useComponentClassNam.relativeClass,
      fullClass = _useComponentClassNam.fullClass,
      inheritColorClass = _useComponentClassNam.inheritColorClass;
    var classPrefix = hooks_useConfig.usePrefixClass();
    var renderTNodeJSX = hooks_tnode.useTNodeJSX();
    var renderContent = hooks_tnode.useContent();
    var _useCommonClassName = hooks_useConfig.useCommonClassName(),
      SIZE = _useCommonClassName.SIZE;
    var countDelay = function countDelay() {
      delayShowLoading.value = false;
      var timer = setTimeout(function () {
        delayShowLoading.value = true;
        clearTimeout(timer);
      }, props2.delay);
    };
    var teleportElement = hooks_useTeleport["default"](function () {
      return props2.attach;
    });
    var delayCounted = Vue.computed(function () {
      return Boolean(!props2.delay || props2.delay && delayShowLoading.value);
    });
    var styles = Vue.computed(function () {
      var styles2 = {};
      if (props2.zIndex !== void 0) {
        styles2.zIndex = props2.zIndex;
      }
      if (!["small", "medium", "large"].includes(props2.size)) {
        styles2["font-size"] = props2.size;
      }
      return styles2;
    });
    var hasContent = Vue.computed(function () {
      return Boolean(props2["default"] || slots["default"] || props2.content || slots.content);
    });
    var lockFullscreen = Vue.computed(function () {
      return props2.preventScrollThrough && props2.fullscreen;
    });
    var showText = Vue.computed(function () {
      return Boolean(props2.text || slots.text);
    });
    var showWrapLoading = Vue.computed(function () {
      return hasContent.value && props2.loading && delayCounted.value;
    });
    var showFullScreenLoading = Vue.computed(function () {
      return props2.fullscreen && props2.loading && delayCounted.value;
    });
    var showAttachedLoading = Vue.computed(function () {
      return props2.attach && props2.loading && delayCounted.value;
    });
    var classes = Vue.computed(function () {
      var baseClasses = [centerClass.value, hooks_tnode.getPropertyValFromObj(SIZE.value, props2.size), _defineProperty__default["default"]({}, inheritColorClass.value, props2.inheritColor)];
      var fullScreenClasses = [name.value, fullscreenClass.value, centerClass.value, overlayClass.value];
      return {
        baseClasses: baseClasses,
        attachClasses: baseClasses.concat([name.value, fullClass.value, _defineProperty__default["default"]({}, overlayClass.value, props2.showOverlay)]),
        withContentClasses: baseClasses.concat([name.value, fullClass.value, _defineProperty__default["default"]({}, overlayClass.value, props2.showOverlay)]),
        fullScreenClasses: fullScreenClasses,
        normalClasses: baseClasses.concat([name.value])
      };
    });
    var _toRefs = Vue.toRefs(props2),
      loading = _toRefs.loading;
    Vue.watch([loading], function (_ref5) {
      var _ref6 = _slicedToArray__default["default"](_ref5, 1),
        isLoading = _ref6[0];
      if (isLoading) {
        countDelay();
        lockFullscreen.value && utils_dom.addClass(document.body, lockClass.value);
      } else {
        lockFullscreen.value && utils_dom.removeClass(document.body, lockClass.value);
      }
    });
    Vue.onMounted(function () {
      props2.delay && countDelay();
    });
    return function () {
      var _classes$value = classes.value,
        fullScreenClasses = _classes$value.fullScreenClasses,
        baseClasses = _classes$value.baseClasses,
        withContentClasses = _classes$value.withContentClasses,
        attachClasses = _classes$value.attachClasses,
        normalClasses = _classes$value.normalClasses;
      var defaultIndicator = Vue.createVNode(loading_icon_gradient["default"], {
        "size": props2.size
      }, null);
      var indicator = loading.value && renderTNodeJSX("indicator", defaultIndicator);
      var text = showText.value && Vue.createVNode("div", {
        "class": "".concat(classPrefix.value, "-loading__text")
      }, [renderTNodeJSX("text")]);
      if (props2.fullscreen) {
        if (!showFullScreenLoading.value || !props2.loading) return null;
        return Vue.createVNode(Vue.Teleport, {
          "disabled": !props2.attach || !teleportElement.value,
          "to": teleportElement.value
        }, {
          "default": function _default() {
            return [Vue.createVNode("div", Vue.mergeProps({
              "class": fullScreenClasses,
              "style": styles.value
            }, attrs), [Vue.createVNode("div", {
              "class": baseClasses
            }, [indicator, text])])];
          }
        });
      }
      if (hasContent.value) {
        return Vue.createVNode("div", Vue.mergeProps({
          "class": relativeClass.value
        }, attrs), [renderContent("default", "content"), showWrapLoading.value && Vue.createVNode("div", {
          "class": withContentClasses,
          "style": styles.value
        }, [indicator, text])]);
      }
      if (props2.attach) {
        if (!showAttachedLoading.value || !loading.value) return null;
        return Vue.createVNode(Vue.Teleport, {
          "disabled": !props2.attach || !teleportElement.value,
          "to": teleportElement.value
        }, {
          "default": function _default() {
            return [Vue.createVNode("div", Vue.mergeProps({
              "class": attachClasses,
              "style": styles.value
            }, attrs), [indicator, text])];
          }
        });
      }
      return loading.value ? Vue.createVNode("div", Vue.mergeProps({
        "class": normalClasses,
        "style": styles.value
      }, attrs), [indicator, text]) : null;
    };
  }
});

exports["default"] = _Loading;
//# sourceMappingURL=loading.js.map
