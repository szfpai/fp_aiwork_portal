/**
 * tdesign v1.11.5
 * (c) 2025 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var Vue = require('vue');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var dialog_dialogCardProps = require('./dialog-card-props.js');
var hooks_useGlobalIcon = require('../hooks/useGlobalIcon.js');
var hooks_useConfig = require('../hooks/useConfig.js');
var dialog_hooks_useAction = require('./hooks/useAction.js');
var hooks_tnode = require('../_chunks/dep-a69ce597.js');
var dialog_props = require('./props.js');
var dialog_utils_index = require('./utils/index.js');
var configProvider_hooks_useConfig = require('../config-provider/hooks/useConfig.js');
require('@babel/runtime/helpers/typeof');
require('../button/index.js');
require('../button/button.js');
require('@babel/runtime/helpers/toConsumableArray');
require('../loading/index.js');
require('../_chunks/dep-0d31a2f0.js');
require('../loading/plugin.js');
require('../loading/loading.js');
require('@babel/runtime/helpers/slicedToArray');
require('../loading/icon/gradient.js');
require('../_chunks/dep-b1b8272b.js');
require('../_chunks/dep-25acc189.js');
require('@babel/runtime/helpers/objectWithoutProperties');
require('../_chunks/dep-93cf0a54.js');
require('../_chunks/dep-8afe2bf0.js');
require('../_chunks/dep-b8b9c2a3.js');
require('../_chunks/dep-bbe343d7.js');
require('../_chunks/dep-5ad8a2ab.js');
require('../_chunks/dep-0c2ad01b.js');
require('../_chunks/dep-cea0dc9b.js');
require('../utils/dom.js');
require('../_chunks/dep-30fb1b25.js');
require('../_chunks/dep-047617bf.js');
require('../_chunks/dep-0a510359.js');
require('../hooks/useTeleport.js');
require('../loading/props.js');
require('../_chunks/dep-b4c4a54b.js');
require('../_chunks/dep-f8ff548f.js');
require('dayjs');
require('../_chunks/dep-b6c192db.js');
require('../_chunks/dep-ba2090c8.js');
require('../_chunks/dep-b27d3215.js');
require('../_chunks/dep-ed572eb3.js');
require('../_chunks/dep-50a41d31.js');
require('../_chunks/dep-be3c3d53.js');
require('../_chunks/dep-8b98fa07.js');
require('../_chunks/dep-b0b4fff1.js');
require('../_chunks/dep-7a21da5b.js');
require('../_chunks/dep-49fa220e.js');
require('../_chunks/dep-02ebb419.js');
require('../_chunks/dep-feae46a3.js');
require('../_chunks/dep-abf21389.js');
require('../_chunks/dep-7f32423d.js');
require('../_chunks/dep-7c9e3d93.js');
require('../utils/render-tnode.js');
require('../_chunks/dep-db023c41.js');
require('../_chunks/dep-e495f218.js');
require('../_chunks/dep-bafc1f63.js');
require('../_chunks/dep-c07d6878.js');
require('../_chunks/dep-a957c564.js');
require('../_chunks/dep-acb090bf.js');
require('../_chunks/dep-76218bd8.js');
require('../_chunks/dep-9a321a91.js');
require('../_chunks/dep-ecbaedee.js');
require('../_chunks/dep-9de7d250.js');
require('../_chunks/dep-61a7e281.js');
require('../_chunks/dep-6f8a66a3.js');
require('../_chunks/dep-d4796921.js');
require('../_chunks/dep-62aae11c.js');
require('../_chunks/dep-7c08b9a8.js');
require('../_chunks/dep-56c837c8.js');
require('../_chunks/dep-55d8c3ed.js');
require('../_chunks/dep-fd1ddb6b.js');
require('../_chunks/dep-d83ac33f.js');
require('../utils/withInstall.js');
require('../button/props.js');
require('../hooks/useRipple.js');
require('../hooks/useKeepAnimation.js');
require('../hooks/useDisabled.js');
require('../_chunks/dep-82a90f9f.js');
require('../_chunks/dep-d67d6b6f.js');
require('../_chunks/dep-beb9de0a.js');
require('../_chunks/dep-43bc982b.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty__default["default"](e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var _DialogCard = Vue.defineComponent({
  name: "TDialogCard",
  directives: {
    draggable: function draggable(el, binding) {
      if (el && binding && binding.value) {
        dialog_utils_index.initDragEvent(el);
      }
    }
  },
  props: _objectSpread(_objectSpread({}, dialog_props["default"]), dialog_dialogCardProps["default"]),
  setup: function setup(props, _ref) {
    var expose = _ref.expose;
    var rootRef = Vue.ref(null);
    var COMPONENT_NAME = hooks_useConfig.usePrefixClass("dialog");
    var classPrefix = hooks_useConfig.usePrefixClass();
    var renderTNodeJSX = hooks_tnode.useTNodeJSX();
    var renderContent = hooks_tnode.useContent();
    var _useConfig = configProvider_hooks_useConfig.useConfig("dialog"),
      globalConfig = _useConfig.globalConfig;
    var _useGlobalIcon = hooks_useGlobalIcon.useGlobalIcon({
        CloseIcon: tdesignIconsVueNext.CloseIcon,
        InfoCircleFilledIcon: tdesignIconsVueNext.InfoCircleFilledIcon,
        CheckCircleFilledIcon: tdesignIconsVueNext.CheckCircleFilledIcon,
        ErrorCircleFilledIcon: tdesignIconsVueNext.ErrorCircleFilledIcon
      }),
      CloseIcon = _useGlobalIcon.CloseIcon,
      InfoCircleFilledIcon = _useGlobalIcon.InfoCircleFilledIcon,
      CheckCircleFilledIcon = _useGlobalIcon.CheckCircleFilledIcon,
      ErrorCircleFilledIcon = _useGlobalIcon.ErrorCircleFilledIcon;
    var _toRefs = Vue.toRefs(props),
      cancelBtn = _toRefs.cancelBtn,
      confirmBtn = _toRefs.confirmBtn,
      confirmLoading = _toRefs.confirmLoading;
    var confirmBtnAction = function confirmBtnAction(e) {
      var _props$onConfirm;
      return (_props$onConfirm = props.onConfirm) === null || _props$onConfirm === void 0 ? void 0 : _props$onConfirm.call(props, {
        e: e
      });
    };
    var cancelBtnAction = function cancelBtnAction(e) {
      var _props$onCancel;
      return (_props$onCancel = props.onCancel) === null || _props$onCancel === void 0 ? void 0 : _props$onCancel.call(props, {
        e: e
      });
    };
    var _useAction = dialog_hooks_useAction.useAction({
        confirmBtnAction: confirmBtnAction,
        cancelBtnAction: cancelBtnAction
      }),
      getConfirmBtn = _useAction.getConfirmBtn,
      getCancelBtn = _useAction.getCancelBtn;
    var isModeLess = Vue.computed(function () {
      return props.mode === "modeless";
    });
    var isFullScreen = Vue.computed(function () {
      return props.mode === "full-screen";
    });
    var closeBtnAction = function closeBtnAction(e) {
      var _props$onCloseBtnClic;
      return props === null || props === void 0 || (_props$onCloseBtnClic = props.onCloseBtnClick) === null || _props$onCloseBtnClic === void 0 ? void 0 : _props$onCloseBtnClic.call(props, {
        e: e
      });
    };
    var onStopDown = function onStopDown(e) {
      if (isModeLess.value && props !== null && props !== void 0 && props.draggable) e.stopPropagation();
    };
    var resetPosition = function resetPosition() {
      if (!rootRef.value && isModeLess.value && props.draggable) return;
      rootRef.value.style.position = "relative";
      rootRef.value.style.left = "unset";
      rootRef.value.style.top = "unset";
    };
    expose({
      $el: rootRef,
      resetPosition: resetPosition
    });
    var dialogClass = Vue.computed(function () {
      var dialogClass2 = ["".concat(COMPONENT_NAME.value), "".concat(COMPONENT_NAME.value, "__modal-").concat(props.theme), isModeLess.value && props.draggable && "".concat(COMPONENT_NAME.value, "--draggable"), props.dialogClassName];
      if (isFullScreen.value) {
        dialogClass2.push("".concat(COMPONENT_NAME.value, "__fullscreen"));
      } else {
        dialogClass2.push.apply(dialogClass2, ["".concat(COMPONENT_NAME.value, "--default"), "".concat(COMPONENT_NAME.value, "--").concat(props.placement)]);
      }
      return dialogClass2;
    });
    var dialogStyle = Vue.computed(function () {
      return !isFullScreen.value ? _objectSpread({
        width: dialog_utils_index.getCSSValue(props.width)
      }, props.dialogStyle) : _objectSpread({}, props.dialogStyle);
    });
    var renderCard = function renderCard() {
      var confirmBtnLoading = Vue.computed(function () {
        var _confirmBtn$value;
        return ((_confirmBtn$value = confirmBtn.value) === null || _confirmBtn$value === void 0 ? void 0 : _confirmBtn$value.loading) || confirmLoading.value;
      });
      var defaultFooter = Vue.createVNode("div", null, [getCancelBtn({
        cancelBtn: cancelBtn.value,
        globalCancel: globalConfig.value.cancel,
        className: "".concat(COMPONENT_NAME.value, "__cancel")
      }), getConfirmBtn({
        theme: props === null || props === void 0 ? void 0 : props.theme,
        confirmBtn: confirmBtn.value,
        globalConfirm: globalConfig.value.confirm,
        globalConfirmBtnTheme: globalConfig.value.confirmBtnTheme,
        className: "".concat(COMPONENT_NAME.value, "__confirm"),
        confirmLoading: confirmBtnLoading.value
      })]);
      var footerContent = renderTNodeJSX("footer", defaultFooter);
      var renderHeader = function renderHeader() {
        var _renderTNodeJSX;
        var header = (_renderTNodeJSX = renderTNodeJSX("header", Vue.createVNode("h5", {
          "class": "title"
        }, null))) !== null && _renderTNodeJSX !== void 0 ? _renderTNodeJSX : false;
        var headerClassName = isFullScreen.value ? ["".concat(COMPONENT_NAME.value, "__header"), "".concat(COMPONENT_NAME.value, "__header--fullscreen")] : "".concat(COMPONENT_NAME.value, "__header");
        var closeClassName = isFullScreen.value ? ["".concat(COMPONENT_NAME.value, "__close"), "".concat(COMPONENT_NAME.value, "__close--fullscreen")] : "".concat(COMPONENT_NAME.value, "__close");
        var getIcon = function getIcon() {
          var icon = {
            info: Vue.createVNode(InfoCircleFilledIcon, {
              "class": "".concat(classPrefix.value, "-is-info")
            }, null),
            warning: Vue.createVNode(ErrorCircleFilledIcon, {
              "class": "".concat(classPrefix.value, "-is-warning")
            }, null),
            danger: Vue.createVNode(ErrorCircleFilledIcon, {
              "class": "".concat(classPrefix.value, "-is-error")
            }, null),
            success: Vue.createVNode(CheckCircleFilledIcon, {
              "class": "".concat(classPrefix.value, "-is-success")
            }, null)
          };
          return icon[props === null || props === void 0 ? void 0 : props.theme];
        };
        return (header || (props === null || props === void 0 ? void 0 : props.closeBtn)) && Vue.createVNode("div", {
          "class": headerClassName,
          "onMousedown": onStopDown
        }, [Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__header-content")
        }, [getIcon(), header]), props !== null && props !== void 0 && props.closeBtn ? Vue.createVNode("span", {
          "class": closeClassName,
          "onClick": closeBtnAction
        }, [renderTNodeJSX("closeBtn", Vue.createVNode(CloseIcon, null, null))]) : null]);
      };
      var renderBody = function renderBody() {
        var body = renderContent("default", "body");
        var bodyClassName = (props === null || props === void 0 ? void 0 : props.theme) === "default" ? ["".concat(COMPONENT_NAME.value, "__body")] : ["".concat(COMPONENT_NAME.value, "__body__icon")];
        if (isFullScreen.value && footerContent) {
          bodyClassName.push("".concat(COMPONENT_NAME.value, "__body--fullscreen"));
        } else if (isFullScreen.value) {
          bodyClassName.push("".concat(COMPONENT_NAME.value, "__body--fullscreen--without-footer"));
        }
        return Vue.createVNode("div", {
          "class": bodyClassName,
          "onMousedown": onStopDown
        }, [body]);
      };
      var renderFooter = function renderFooter() {
        var footerClassName = isFullScreen.value ? ["".concat(COMPONENT_NAME.value, "__footer"), "".concat(COMPONENT_NAME.value, "__footer--fullscreen")] : "".concat(COMPONENT_NAME.value, "__footer");
        return footerContent && Vue.createVNode("div", {
          "class": footerClassName,
          "onMousedown": onStopDown
        }, [footerContent]);
      };
      return Vue.createVNode(Vue.Fragment, null, [renderHeader(), renderBody(), !!props.footer && renderFooter()]);
    };
    return function () {
      return Vue.withDirectives(Vue.createVNode("div", {
        "key": "dialog",
        "ref": rootRef,
        "class": dialogClass.value,
        "style": dialogStyle.value
      }, [renderCard()]), [[Vue.resolveDirective("draggable"), isModeLess.value && props.draggable]]);
    };
  }
});

exports["default"] = _DialogCard;
//# sourceMappingURL=dialog-card.js.map
