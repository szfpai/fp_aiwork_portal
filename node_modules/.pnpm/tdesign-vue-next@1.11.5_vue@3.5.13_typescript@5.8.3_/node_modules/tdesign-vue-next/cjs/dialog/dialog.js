/**
 * tdesign v1.11.5
 * (c) 2025 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var _objectWithoutProperties = require('@babel/runtime/helpers/objectWithoutProperties');
var Vue = require('vue');
var dialog_props = require('./props.js');
var hooks_useConfig = require('../hooks/useConfig.js');
require('@babel/runtime/helpers/typeof');
require('../button/index.js');
var dialog_hooks_useSameTarget = require('./hooks/useSameTarget.js');
var hooks_useDestroyOnClose = require('../hooks/useDestroyOnClose.js');
var getScrollbarWidth = require('../_chunks/dep-31c4c452.js');
var hooks_useTeleport = require('../hooks/useTeleport.js');
var hooks_usePopupManager = require('../hooks/usePopupManager.js');
var dialog_utils_index = require('./utils/index.js');
var dialog_dialogCard = require('./dialog-card.js');
var configProvider_hooks_useConfig = require('../config-provider/hooks/useConfig.js');
require('../button/button.js');
require('@babel/runtime/helpers/toConsumableArray');
require('../loading/index.js');
require('../_chunks/dep-0d31a2f0.js');
require('../loading/plugin.js');
require('../loading/loading.js');
require('@babel/runtime/helpers/slicedToArray');
require('../loading/icon/gradient.js');
require('../_chunks/dep-b1b8272b.js');
require('../_chunks/dep-25acc189.js');
require('../_chunks/dep-93cf0a54.js');
require('../_chunks/dep-8afe2bf0.js');
require('../_chunks/dep-b8b9c2a3.js');
require('../_chunks/dep-bbe343d7.js');
require('../_chunks/dep-5ad8a2ab.js');
require('../_chunks/dep-0c2ad01b.js');
require('../_chunks/dep-cea0dc9b.js');
require('../utils/dom.js');
require('../_chunks/dep-30fb1b25.js');
require('../_chunks/dep-047617bf.js');
require('../_chunks/dep-0a510359.js');
require('../_chunks/dep-a69ce597.js');
require('../utils/render-tnode.js');
require('../_chunks/dep-db023c41.js');
require('../_chunks/dep-e495f218.js');
require('../_chunks/dep-bafc1f63.js');
require('../_chunks/dep-c07d6878.js');
require('../_chunks/dep-a957c564.js');
require('../_chunks/dep-acb090bf.js');
require('../_chunks/dep-76218bd8.js');
require('../_chunks/dep-9a321a91.js');
require('../_chunks/dep-ecbaedee.js');
require('../_chunks/dep-8b98fa07.js');
require('../_chunks/dep-b0b4fff1.js');
require('../_chunks/dep-7a21da5b.js');
require('../_chunks/dep-ed572eb3.js');
require('../_chunks/dep-9de7d250.js');
require('../_chunks/dep-be3c3d53.js');
require('../loading/props.js');
require('../_chunks/dep-b4c4a54b.js');
require('../_chunks/dep-f8ff548f.js');
require('dayjs');
require('../_chunks/dep-b6c192db.js');
require('../_chunks/dep-ba2090c8.js');
require('../_chunks/dep-b27d3215.js');
require('../_chunks/dep-50a41d31.js');
require('../_chunks/dep-49fa220e.js');
require('../_chunks/dep-02ebb419.js');
require('../_chunks/dep-feae46a3.js');
require('../_chunks/dep-abf21389.js');
require('../_chunks/dep-7f32423d.js');
require('../_chunks/dep-7c9e3d93.js');
require('../_chunks/dep-61a7e281.js');
require('../_chunks/dep-6f8a66a3.js');
require('../_chunks/dep-d4796921.js');
require('../_chunks/dep-62aae11c.js');
require('../_chunks/dep-7c08b9a8.js');
require('../_chunks/dep-56c837c8.js');
require('../_chunks/dep-55d8c3ed.js');
require('../_chunks/dep-fd1ddb6b.js');
require('../_chunks/dep-d83ac33f.js');
require('../utils/withInstall.js');
require('../button/props.js');
require('../hooks/useRipple.js');
require('../hooks/useKeepAnimation.js');
require('../hooks/useDisabled.js');
require('../_chunks/dep-82a90f9f.js');
require('@babel/runtime/helpers/createClass');
require('@babel/runtime/helpers/classCallCheck');
require('tdesign-icons-vue-next');
require('./dialog-card-props.js');
require('../hooks/useGlobalIcon.js');
require('./hooks/useAction.js');
require('../_chunks/dep-d67d6b6f.js');
require('../_chunks/dep-beb9de0a.js');
require('../_chunks/dep-43bc982b.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var _objectWithoutProperties__default = /*#__PURE__*/_interopDefaultLegacy(_objectWithoutProperties);

var _excluded = ["theme", "onConfirm", "onCancel", "onCloseBtnClick"];
var mousePosition;
var getClickPosition = function getClickPosition(e) {
  mousePosition = {
    x: e.clientX,
    y: e.clientY
  };
  setTimeout(function () {
    mousePosition = null;
  }, 100);
};
if (typeof window !== "undefined" && window.document && window.document.documentElement) {
  document.documentElement.addEventListener("click", getClickPosition, true);
}
var key = 1;
var _Dialog = Vue.defineComponent({
  name: "TDialog",
  inheritAttrs: false,
  props: dialog_props["default"],
  emits: ["update:visible"],
  setup: function setup(props2, context) {
    var COMPONENT_NAME = hooks_useConfig.usePrefixClass("dialog");
    var classPrefix = hooks_useConfig.usePrefixClass();
    var dialogCardRef = Vue.ref(null);
    var _useConfig = configProvider_hooks_useConfig.useConfig("dialog"),
      globalConfig = _useConfig.globalConfig;
    var confirmBtnAction = function confirmBtnAction(context2) {
      var _props2$onConfirm;
      (_props2$onConfirm = props2.onConfirm) === null || _props2$onConfirm === void 0 || _props2$onConfirm.call(props2, context2);
    };
    var cancelBtnAction = function cancelBtnAction(context2) {
      var _props2$onCancel;
      (_props2$onCancel = props2.onCancel) === null || _props2$onCancel === void 0 || _props2$onCancel.call(props2, context2);
      emitCloseEvent({
        e: context2.e,
        trigger: "cancel"
      });
    };
    var teleportElement = hooks_useTeleport["default"](function () {
      return props2.attach;
    });
    hooks_useDestroyOnClose["default"]();
    var timer = Vue.ref();
    var styleEl = Vue.ref();
    var isModal = Vue.computed(function () {
      return props2.mode === "modal";
    });
    var isModeLess = Vue.computed(function () {
      return props2.mode === "modeless";
    });
    var isFullScreen = Vue.computed(function () {
      return props2.mode === "full-screen";
    });
    var computedVisible = Vue.computed(function () {
      return props2.visible;
    });
    var maskClass = Vue.computed(function () {
      return ["".concat(COMPONENT_NAME.value, "__mask"), !props2.showOverlay && "".concat(classPrefix.value, "-is-hidden")];
    });
    var positionClass = Vue.computed(function () {
      if (isFullScreen.value) return ["".concat(COMPONENT_NAME.value, "__position_fullscreen")];
      if (isModal.value || isModeLess.value) {
        return ["".concat(COMPONENT_NAME.value, "__position"), !!props2.top && "".concat(COMPONENT_NAME.value, "--top"), "".concat(props2.placement && !props2.top ? "".concat(COMPONENT_NAME.value, "--").concat(props2.placement) : "")];
      }
      return [];
    });
    var wrapClass = Vue.computed(function () {
      return isFullScreen.value || isModal.value || isModeLess.value ? ["".concat(COMPONENT_NAME.value, "__wrap")] : null;
    });
    var positionStyle = Vue.computed(function () {
      if (isFullScreen.value) return {};
      var top = props2.top;
      var topStyle = {};
      if (top !== void 0) {
        var topValue = dialog_utils_index.getCSSValue(top);
        topStyle = {
          paddingTop: topValue
        };
      }
      return topStyle;
    });
    var _usePopupManager = hooks_usePopupManager["default"]("dialog", {
        visible: computedVisible
      }),
      isLastDialog = _usePopupManager.isLastDialog;
    Vue.watch(function () {
      return props2.visible;
    }, function (value) {
      if (value) {
        var _document$activeEleme;
        if (isModal.value && !props2.showInAttachedElement || isFullScreen.value) {
          if (props2.preventScrollThrough) {
            document.body.appendChild(styleEl.value);
          }
          Vue.nextTick(function () {
            var _dialogCardRef$value;
            if (mousePosition && (_dialogCardRef$value = dialogCardRef.value) !== null && _dialogCardRef$value !== void 0 && _dialogCardRef$value.$el) {
              var el = dialogCardRef.value.$el;
              el.style.transformOrigin = "".concat(mousePosition.x - el.offsetLeft, "px ").concat(mousePosition.y - el.offsetTop, "px");
            }
          });
        }
        (_document$activeEleme = document.activeElement) === null || _document$activeEleme === void 0 || _document$activeEleme.blur();
      } else {
        clearStyleFunc();
      }
      addKeyboardEvent(value);
    });
    function destroySelf() {
      var _styleEl$value$parent, _styleEl$value$parent2;
      (_styleEl$value$parent = styleEl.value.parentNode) === null || _styleEl$value$parent === void 0 || (_styleEl$value$parent2 = _styleEl$value$parent.removeChild) === null || _styleEl$value$parent2 === void 0 || _styleEl$value$parent2.call(_styleEl$value$parent, styleEl.value);
    }
    function clearStyleFunc() {
      clearTimeout(timer.value);
      timer.value = setTimeout(function () {
        destroySelf();
      }, 150);
    }
    var addKeyboardEvent = function addKeyboardEvent(status) {
      if (status) {
        document.addEventListener("keydown", keyboardEvent);
        props2.confirmOnEnter && document.addEventListener("keydown", keyboardEnterEvent);
      } else {
        document.removeEventListener("keydown", keyboardEvent);
        props2.confirmOnEnter && document.removeEventListener("keydown", keyboardEnterEvent);
      }
    };
    var keyboardEnterEvent = function keyboardEnterEvent(e) {
      var eventSrc = e.target;
      if (eventSrc.tagName.toLowerCase() === "input") return;
      var code = e.code;
      if ((code === "Enter" || code === "NumpadEnter") && isLastDialog()) {
        var _props2$onConfirm2;
        (_props2$onConfirm2 = props2.onConfirm) === null || _props2$onConfirm2 === void 0 || _props2$onConfirm2.call(props2, {
          e: e
        });
      }
    };
    var keyboardEvent = function keyboardEvent(e) {
      if (e.code === "Escape" && isLastDialog()) {
        var _props2$onEscKeydown, _props2$closeOnEscKey;
        (_props2$onEscKeydown = props2.onEscKeydown) === null || _props2$onEscKeydown === void 0 || _props2$onEscKeydown.call(props2, {
          e: e
        });
        if ((_props2$closeOnEscKey = props2.closeOnEscKeydown) !== null && _props2$closeOnEscKey !== void 0 ? _props2$closeOnEscKey : globalConfig.value.closeOnEscKeydown) {
          emitCloseEvent({
            e: e,
            trigger: "esc"
          });
        }
      }
    };
    var overlayAction = function overlayAction(e) {
      var _props2$closeOnOverla;
      if (props2.showOverlay && ((_props2$closeOnOverla = props2.closeOnOverlayClick) !== null && _props2$closeOnOverla !== void 0 ? _props2$closeOnOverla : globalConfig.value.closeOnOverlayClick)) {
        var _props2$onOverlayClic;
        (_props2$onOverlayClic = props2.onOverlayClick) === null || _props2$onOverlayClic === void 0 || _props2$onOverlayClic.call(props2, {
          e: e
        });
        emitCloseEvent({
          e: e,
          trigger: "overlay"
        });
      }
    };
    var _useSameTarget = dialog_hooks_useSameTarget.useSameTarget(overlayAction),
      onClick = _useSameTarget.onClick,
      onMousedown = _useSameTarget.onMousedown,
      onMouseup = _useSameTarget.onMouseup;
    var closeBtnAction = function closeBtnAction(context2) {
      var _props2$onCloseBtnCli;
      (_props2$onCloseBtnCli = props2.onCloseBtnClick) === null || _props2$onCloseBtnCli === void 0 || _props2$onCloseBtnCli.call(props2, context2);
      emitCloseEvent({
        trigger: "close-btn",
        e: context2.e
      });
    };
    var beforeEnter = function beforeEnter() {
      var _props2$onBeforeOpen;
      (_props2$onBeforeOpen = props2.onBeforeOpen) === null || _props2$onBeforeOpen === void 0 || _props2$onBeforeOpen.call(props2);
    };
    var afterEnter = function afterEnter() {
      var _props2$onOpened;
      (_props2$onOpened = props2.onOpened) === null || _props2$onOpened === void 0 || _props2$onOpened.call(props2);
    };
    var beforeLeave = function beforeLeave() {
      var _props2$onBeforeClose;
      (_props2$onBeforeClose = props2.onBeforeClose) === null || _props2$onBeforeClose === void 0 || _props2$onBeforeClose.call(props2);
    };
    var afterLeave = function afterLeave() {
      var _dialogCardRef$value2, _dialogCardRef$value3, _props2$onClosed;
      (_dialogCardRef$value2 = dialogCardRef.value) === null || _dialogCardRef$value2 === void 0 || (_dialogCardRef$value3 = _dialogCardRef$value2.resetPosition) === null || _dialogCardRef$value3 === void 0 || _dialogCardRef$value3.call(_dialogCardRef$value2);
      (_props2$onClosed = props2.onClosed) === null || _props2$onClosed === void 0 || _props2$onClosed.call(props2);
    };
    var emitCloseEvent = function emitCloseEvent(ctx) {
      var _props2$onClose;
      (_props2$onClose = props2.onClose) === null || _props2$onClose === void 0 || _props2$onClose.call(props2, ctx);
      context.emit("update:visible", false);
    };
    var renderDialog = function renderDialog() {
      var theme = props2.theme;
        props2.onConfirm;
        props2.onCancel;
        props2.onCloseBtnClick;
        var otherProps = _objectWithoutProperties__default["default"](props2, _excluded);
      return Vue.createVNode("div", {
        "class": wrapClass.value
      }, [Vue.createVNode("div", {
        "class": positionClass.value,
        "style": positionStyle.value,
        "onClick": onClick,
        "onMousedown": onMousedown,
        "onMouseup": onMouseup
      }, [Vue.createVNode(dialog_dialogCard["default"], Vue.mergeProps({
        "ref": dialogCardRef,
        "theme": theme
      }, otherProps, {
        "onConfirm": confirmBtnAction,
        "onCancel": cancelBtnAction,
        "onCloseBtnClick": closeBtnAction
      }), context.slots)])]);
    };
    Vue.onMounted(function () {
      var hasScrollBar = document.documentElement.scrollHeight > document.documentElement.clientHeight;
      var scrollWidth = hasScrollBar ? getScrollbarWidth.getScrollbarWidth() : 0;
      styleEl.value = document.createElement("style");
      styleEl.value.dataset.id = "td_dialog_".concat(+new Date(), "_").concat(key += 1);
      styleEl.value.innerHTML = "\n        html body {\n          overflow-y: hidden;\n          width: calc(100% - ".concat(scrollWidth, "px);\n        }\n      ");
    });
    Vue.onBeforeUnmount(function () {
      addKeyboardEvent(false);
      destroySelf();
    });
    return function () {
      var maskView = (isModal.value || isFullScreen.value) && Vue.createVNode("div", {
        "key": "mask",
        "class": maskClass.value
      }, null);
      var dialogView = renderDialog();
      var view = [maskView, dialogView];
      var ctxStyle = {
        zIndex: props2.zIndex
      };
      var ctxClass = ["".concat(COMPONENT_NAME.value, "__ctx"), _defineProperty__default["default"](_defineProperty__default["default"](_defineProperty__default["default"]({}, "".concat(COMPONENT_NAME.value, "__ctx--fixed"), isModal.value || isFullScreen.value), "".concat(COMPONENT_NAME.value, "__ctx--absolute"), isModal.value && props2.showInAttachedElement), "".concat(COMPONENT_NAME.value, "__ctx--modeless"), isModeLess.value)];
      return Vue.createVNode(Vue.Teleport, {
        "disabled": !props2.attach || !teleportElement.value,
        "to": teleportElement.value
      }, {
        "default": function _default() {
          return [Vue.createVNode(Vue.Transition, {
            "duration": 300,
            "name": "".concat(COMPONENT_NAME.value, "-zoom__vue"),
            "onBeforeEnter": beforeEnter,
            "onAfterEnter": afterEnter,
            "onBeforeLeave": beforeLeave,
            "onAfterLeave": afterLeave
          }, {
            "default": function _default() {
              return [(!props2.destroyOnClose || props2.visible) && Vue.withDirectives(Vue.createVNode("div", Vue.mergeProps({
                "class": ctxClass,
                "style": ctxStyle
              }, context.attrs), [view]), [[Vue.vShow, props2.visible]])];
            }
          })];
        }
      });
    };
  }
});

exports["default"] = _Dialog;
//# sourceMappingURL=dialog.js.map
