/**
 * tdesign v1.11.5
 * (c) 2025 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _typeof = require('@babel/runtime/helpers/typeof');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var Vue = require('vue');
var hooks_tnode = require('../../_chunks/dep-a69ce597.js');
var button_index = require('../../button/index.js');
var omit = require('../../_chunks/dep-d67d6b6f.js');
var isString = require('../../_chunks/dep-b8b9c2a3.js');
var isObject = require('../../_chunks/dep-0a510359.js');
require('../../utils/render-tnode.js');
require('../../_chunks/dep-db023c41.js');
require('../../_chunks/dep-e495f218.js');
require('../../_chunks/dep-bbe343d7.js');
require('../../_chunks/dep-5ad8a2ab.js');
require('../../_chunks/dep-bafc1f63.js');
require('../../_chunks/dep-0c2ad01b.js');
require('../../_chunks/dep-c07d6878.js');
require('../../_chunks/dep-a957c564.js');
require('../../_chunks/dep-acb090bf.js');
require('../../_chunks/dep-76218bd8.js');
require('../../_chunks/dep-047617bf.js');
require('../../_chunks/dep-9a321a91.js');
require('../../_chunks/dep-ecbaedee.js');
require('../../_chunks/dep-8b98fa07.js');
require('../../_chunks/dep-b0b4fff1.js');
require('../../_chunks/dep-7a21da5b.js');
require('../../_chunks/dep-ed572eb3.js');
require('../../_chunks/dep-9de7d250.js');
require('../../_chunks/dep-be3c3d53.js');
require('../../button/button.js');
require('@babel/runtime/helpers/toConsumableArray');
require('../../loading/index.js');
require('../../_chunks/dep-0d31a2f0.js');
require('../../loading/plugin.js');
require('../../loading/loading.js');
require('@babel/runtime/helpers/slicedToArray');
require('../../loading/icon/gradient.js');
require('../../hooks/useConfig.js');
require('../../config-provider/hooks/useConfig.js');
require('../../_chunks/dep-b4c4a54b.js');
require('../../_chunks/dep-f8ff548f.js');
require('../../_chunks/dep-30fb1b25.js');
require('dayjs');
require('../../_chunks/dep-b6c192db.js');
require('../../_chunks/dep-ba2090c8.js');
require('../../_chunks/dep-b27d3215.js');
require('../../_chunks/dep-50a41d31.js');
require('../../_chunks/dep-49fa220e.js');
require('../../_chunks/dep-02ebb419.js');
require('../../_chunks/dep-feae46a3.js');
require('../../_chunks/dep-abf21389.js');
require('../../_chunks/dep-7f32423d.js');
require('../../_chunks/dep-7c9e3d93.js');
require('../../_chunks/dep-61a7e281.js');
require('../../_chunks/dep-6f8a66a3.js');
require('../../_chunks/dep-b1b8272b.js');
require('../../_chunks/dep-25acc189.js');
require('@babel/runtime/helpers/objectWithoutProperties');
require('../../_chunks/dep-93cf0a54.js');
require('../../_chunks/dep-8afe2bf0.js');
require('../../_chunks/dep-cea0dc9b.js');
require('../../utils/dom.js');
require('../../hooks/useTeleport.js');
require('../../loading/props.js');
require('../../_chunks/dep-d4796921.js');
require('../../_chunks/dep-62aae11c.js');
require('../../_chunks/dep-7c08b9a8.js');
require('../../_chunks/dep-56c837c8.js');
require('../../_chunks/dep-55d8c3ed.js');
require('../../_chunks/dep-fd1ddb6b.js');
require('../../_chunks/dep-d83ac33f.js');
require('../../utils/withInstall.js');
require('../../button/props.js');
require('../../hooks/useRipple.js');
require('../../hooks/useKeepAnimation.js');
require('../../hooks/useDisabled.js');
require('../../_chunks/dep-82a90f9f.js');
require('../../_chunks/dep-beb9de0a.js');
require('../../_chunks/dep-43bc982b.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _typeof__default = /*#__PURE__*/_interopDefaultLegacy(_typeof);
var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty__default["default"](e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function useAction(action) {
  var instance = Vue.getCurrentInstance();
  var renderTNodeJSX = hooks_tnode.useTNodeJSX();
  var getDefaultConfirmBtnProps = function getDefaultConfirmBtnProps(options) {
    var globalConfirm = options.globalConfirm,
      theme = options.theme,
      globalConfirmBtnTheme = options.globalConfirmBtnTheme;
    var defaultTheme = hooks_tnode.getPropertyValFromObj(omit.omit(globalConfirmBtnTheme, ["info"]), theme) || "primary";
    var props = {
      theme: defaultTheme,
      size: options.size,
      onClick: function onClick(e) {
        action.confirmBtnAction(e);
      }
    };
    if (isString.isString(globalConfirm)) {
      props.content = globalConfirm;
    } else if (isObject.isObject(globalConfirm)) {
      props = _objectSpread(_objectSpread({}, props), globalConfirm);
    }
    return props;
  };
  var getDefaultCancelBtnProps = function getDefaultCancelBtnProps(options) {
    var globalCancel = options.globalCancel;
    var props = {
      theme: "default",
      size: options.size,
      onClick: function onClick(e) {
        action.cancelBtnAction(e);
      }
    };
    if (isString.isString(globalCancel)) {
      props.content = globalCancel;
    } else if (isObject.isObject(globalCancel)) {
      props = _objectSpread(_objectSpread({}, props), globalCancel);
    }
    return props;
  };
  var getButtonByProps = function getButtonByProps(button, params) {
    var defaultButtonProps = params.defaultButtonProps,
      className = params.className,
      confirmLoading = params.confirmLoading;
    var newOptions = defaultButtonProps;
    if (isString.isString(button)) {
      newOptions.content = button;
    } else if (isObject.isObject(button)) {
      newOptions = _objectSpread(_objectSpread({}, newOptions), button);
    }
    if (confirmLoading !== void 0) {
      newOptions.loading = confirmLoading;
    }
    return Vue.createVNode(button_index.Button, Vue.mergeProps({
      "class": className
    }, newOptions), null);
  };
  var getConfirmBtn = function getConfirmBtn(options) {
    var confirmBtn = options.confirmBtn,
      className = options.className,
      confirmLoading = options.confirmLoading;
    if (confirmBtn === null) return null;
    if (confirmBtn && instance.slots.confirmBtn) {
      console.warn("Both $props.confirmBtn and $scopedSlots.confirmBtn exist, $props.confirmBtn is preferred.");
    }
    var defaultButtonProps = getDefaultConfirmBtnProps(options);
    if (!confirmBtn && !instance.slots.confirmBtn) {
      return Vue.createVNode(button_index.Button, Vue.mergeProps({
        "class": className,
        "loading": confirmLoading
      }, defaultButtonProps), null);
    }
    if (confirmBtn && ["string", "object"].includes(_typeof__default["default"](confirmBtn))) {
      return getButtonByProps(confirmBtn, {
        defaultButtonProps: defaultButtonProps,
        className: className,
        confirmLoading: confirmLoading
      });
    }
    return renderTNodeJSX("confirmBtn");
  };
  var getCancelBtn = function getCancelBtn(options) {
    var cancelBtn = options.cancelBtn,
      className = options.className;
    if (cancelBtn === null) return null;
    if (cancelBtn && instance.slots.cancelBtn) {
      console.warn("Both $props.cancelBtn and $scopedSlots.cancelBtn exist, $props.cancelBtn is preferred.");
    }
    var defaultButtonProps = getDefaultCancelBtnProps(options);
    if (!cancelBtn && !instance.slots.cancelBtn) {
      return Vue.createVNode(button_index.Button, Vue.mergeProps({
        "class": className
      }, defaultButtonProps), null);
    }
    if (cancelBtn && ["string", "object"].includes(_typeof__default["default"](cancelBtn))) {
      return getButtonByProps(cancelBtn, {
        defaultButtonProps: defaultButtonProps,
        className: className
      });
    }
    return renderTNodeJSX("cancelBtn");
  };
  return {
    getConfirmBtn: getConfirmBtn,
    getCancelBtn: getCancelBtn
  };
}

exports.useAction = useAction;
//# sourceMappingURL=useAction.js.map
