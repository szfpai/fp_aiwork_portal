/**
 * tdesign v1.11.5
 * (c) 2025 tdesign
 * @license MIT
 */

import { defineComponent, toRefs, provide, reactive, createVNode, mergeProps } from 'vue';
import props from './props.mjs';
import _BreadcrumbItem from './breadcrumb-item.mjs';
import { u as useTNodeJSX } from '../_chunks/dep-46ec3e86.mjs';
import { usePrefixClass } from '../hooks/useConfig.mjs';
import '../_chunks/dep-da95471f.mjs';
import '../_chunks/dep-4ed7019e.mjs';
import 'tdesign-icons-vue-next';
import './breadcrumb-item-props.mjs';
import '../tooltip/index.mjs';
import '../tooltip/tooltip.mjs';
import '../_chunks/dep-6d9c1bfc.mjs';
import '../_chunks/dep-9f375e51.mjs';
import 'lodash-es';
import '../tooltip/props.mjs';
import '../popup/props.mjs';
import '../popup/index.mjs';
import '../popup/popup.mjs';
import '@popperjs/core';
import '../hooks/index.mjs';
import '../hooks/icon.mjs';
import '../hooks/slot.mjs';
import '../utils/render-tnode.mjs';
import '../hooks/useCommonClassName.mjs';
import '../config-provider/hooks/useConfig.mjs';
import '../config-provider/utils/context.mjs';
import '../_chunks/dep-a5ae2f3f.mjs';
import '../_chunks/dep-82d2a14f.mjs';
import '../_chunks/dep-37fa6ccb.mjs';
import '../_chunks/dep-7fb24b17.mjs';
import '../hooks/useDefaultValue.mjs';
import '../hooks/useDestroyOnClose.mjs';
import '../hooks/useKeepAnimation.mjs';
import '../hooks/useRipple.mjs';
import '../_chunks/dep-6cfc5734.mjs';
import '../hooks/useVirtualScroll.mjs';
import '../hooks/useVModel.mjs';
import '../hooks/useImagePreviewUrl.mjs';
import '../_chunks/dep-dda40c90.mjs';
import '../_chunks/dep-88187fb2.mjs';
import '../utils/dom.mjs';
import '../popup/container.mjs';
import '../_chunks/dep-03e058e5.mjs';
import '../hooks/useResizeObserver.mjs';
import '../utils/withInstall.mjs';
import './style/css.mjs';
import '../tooltip/utils/index.mjs';
import '../hooks/useGlobalIcon.mjs';

var _Breadcrumb = defineComponent({
  name: "TBreadcrumb",
  props: props,
  setup: function setup(props2, _ref) {
    var slots = _ref.slots;
    var _toRefs = toRefs(props2),
      separator = _toRefs.separator,
      theme = _toRefs.theme,
      maxItemWidth = _toRefs.maxItemWidth;
    var COMPONENT_NAME = usePrefixClass("breadcrumb");
    provide("tBreadcrumb", reactive({
      separator: separator,
      theme: theme,
      slots: {
        separator: slots.separator
      },
      maxItemWidth: maxItemWidth
    }));
    var renderTNodeJSX = useTNodeJSX();
    return function () {
      var content = renderTNodeJSX("default");
      if (props2.options && props2.options.length) {
        content = props2.options.map(function (option, index) {
          return createVNode(_BreadcrumbItem, mergeProps(option, {
            "key": index
          }), {
            "default": function _default() {
              return [option["default"] || option.content];
            }
          });
        });
      }
      return createVNode("div", {
        "class": COMPONENT_NAME.value
      }, [content]);
    };
  }
});

export { _Breadcrumb as default };
//# sourceMappingURL=breadcrumb.mjs.map
