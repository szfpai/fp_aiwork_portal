/**
 * tdesign v1.11.5
 * (c) 2025 tdesign
 * @license MIT
 */

import { getOutputValue } from './useInput.mjs';
import '../../_chunks/dep-6d9c1bfc.mjs';
import '../../_chunks/dep-9f375e51.mjs';
import 'vue';
import '../../form/consts/index.mjs';
import '../../hooks/index.mjs';
import '../../hooks/icon.mjs';
import 'lodash-es';
import '../../hooks/slot.mjs';
import '../../_chunks/dep-4ed7019e.mjs';
import '../../utils/render-tnode.mjs';
import '../../_chunks/dep-46ec3e86.mjs';
import '../../hooks/useConfig.mjs';
import '../../config-provider/hooks/useConfig.mjs';
import '../../config-provider/utils/context.mjs';
import '../../_chunks/dep-a5ae2f3f.mjs';
import '../../_chunks/dep-82d2a14f.mjs';
import '../../_chunks/dep-37fa6ccb.mjs';
import '../../_chunks/dep-7fb24b17.mjs';
import '../../hooks/useCommonClassName.mjs';
import '../../hooks/useDefaultValue.mjs';
import '../../hooks/useDestroyOnClose.mjs';
import '../../hooks/useKeepAnimation.mjs';
import '../../hooks/useRipple.mjs';
import '../../_chunks/dep-6cfc5734.mjs';
import '../../hooks/useVirtualScroll.mjs';
import '../../_chunks/dep-da95471f.mjs';
import '../../hooks/useVModel.mjs';
import '../../hooks/useImagePreviewUrl.mjs';
import '../../_chunks/dep-dda40c90.mjs';
import '../../_chunks/dep-88187fb2.mjs';
import '../../hooks/useDisabled.mjs';
import './useLengthLimit.mjs';
import '../../_chunks/dep-198540b0.mjs';
import '../../_chunks/dep-3d81ac0a.mjs';
import '../../_chunks/dep-03e058e5.mjs';
import '../../_chunks/dep-6a79c950.mjs';
import '../../hooks/useReadonly.mjs';

function useInputEventHandler(props, isHover) {
  var handleKeydown = function handleKeydown(e) {
    if (props.disabled) return;
    var code = e.code;
    var tmpValue = getOutputValue(e.currentTarget.value, props.type);
    if (/enter/i.test(code) || /enter/i.test(e.key)) {
      var _props$onEnter;
      (_props$onEnter = props.onEnter) === null || _props$onEnter === void 0 || _props$onEnter.call(props, tmpValue, {
        e: e
      });
    } else {
      var _props$onKeydown;
      (_props$onKeydown = props.onKeydown) === null || _props$onKeydown === void 0 || _props$onKeydown.call(props, tmpValue, {
        e: e
      });
    }
  };
  var handleKeyUp = function handleKeyUp(e) {
    var _props$onKeyup;
    if (props.disabled) return;
    var tmpValue = getOutputValue(e.currentTarget.value, props.type);
    (_props$onKeyup = props.onKeyup) === null || _props$onKeyup === void 0 || _props$onKeyup.call(props, tmpValue, {
      e: e
    });
  };
  var handleKeypress = function handleKeypress(e) {
    var _props$onKeypress;
    if (props.disabled) return;
    var tmpValue = getOutputValue(e.currentTarget.value, props.type);
    (_props$onKeypress = props.onKeypress) === null || _props$onKeypress === void 0 || _props$onKeypress.call(props, tmpValue, {
      e: e
    });
  };
  var onHandlePaste = function onHandlePaste(e) {
    var _props$onPaste;
    if (props.disabled) return;
    var clipData = e.clipboardData || window.clipboardData;
    (_props$onPaste = props.onPaste) === null || _props$onPaste === void 0 || _props$onPaste.call(props, {
      e: e,
      pasteValue: clipData === null || clipData === void 0 ? void 0 : clipData.getData("text/plain")
    });
  };
  var mouseEvent = function mouseEvent(v) {
    return isHover.value = v;
  };
  var onHandleMousewheel = function onHandleMousewheel(e) {
    var _props$onWheel;
    return (_props$onWheel = props.onWheel) === null || _props$onWheel === void 0 ? void 0 : _props$onWheel.call(props, {
      e: e
    });
  };
  var onInputMouseenter = function onInputMouseenter(e) {
    var _props$onMouseenter;
    mouseEvent(true);
    (_props$onMouseenter = props.onMouseenter) === null || _props$onMouseenter === void 0 || _props$onMouseenter.call(props, {
      e: e
    });
  };
  var onInputMouseleave = function onInputMouseleave(e) {
    var _props$onMouseleave;
    mouseEvent(false);
    (_props$onMouseleave = props.onMouseleave) === null || _props$onMouseleave === void 0 || _props$onMouseleave.call(props, {
      e: e
    });
  };
  return {
    isHover: isHover,
    handleKeydown: handleKeydown,
    handleKeyUp: handleKeyUp,
    handleKeypress: handleKeypress,
    onHandlePaste: onHandlePaste,
    onHandleMousewheel: onHandleMousewheel,
    onInputMouseenter: onInputMouseenter,
    onInputMouseleave: onInputMouseleave
  };
}

export { useInputEventHandler };
//# sourceMappingURL=useInputEventHandler.mjs.map
