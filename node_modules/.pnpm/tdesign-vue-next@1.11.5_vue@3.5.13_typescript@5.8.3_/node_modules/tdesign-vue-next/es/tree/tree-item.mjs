/**
 * tdesign v1.11.5
 * (c) 2025 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-da95471f.mjs';
import { TreeItemDefinition, useRipple, getCreateElement } from './adapt.mjs';
import useItemState from './hooks/useItemState.mjs';
import useTreeItem from './hooks/useTreeItem.mjs';
import { defineComponent, ref } from 'vue';
import '../_chunks/dep-4ed7019e.mjs';
import '../utils/withInstall.mjs';
import '../hooks/useVModel.mjs';
import 'lodash-es';
import '../hooks/useDefaultValue.mjs';
import 'tdesign-icons-vue-next';
import '../checkbox/index.mjs';
import '../checkbox/checkbox.mjs';
import '../_chunks/dep-6d9c1bfc.mjs';
import '../_chunks/dep-9f375e51.mjs';
import '../checkbox/props.mjs';
import '../hooks/useRipple.mjs';
import '../hooks/useKeepAnimation.mjs';
import '../hooks/useConfig.mjs';
import '../config-provider/hooks/useConfig.mjs';
import '../config-provider/utils/context.mjs';
import '../_chunks/dep-a5ae2f3f.mjs';
import '../_chunks/dep-82d2a14f.mjs';
import '../_chunks/dep-37fa6ccb.mjs';
import '../_chunks/dep-7fb24b17.mjs';
import '../_chunks/dep-6cfc5734.mjs';
import '../_chunks/dep-46ec3e86.mjs';
import '../utils/render-tnode.mjs';
import '../checkbox/consts/index.mjs';
import '../checkbox/hooks/useCheckboxLazyLoad.mjs';
import '../_chunks/dep-221379fb.mjs';
import '../checkbox/hooks/useKeyboardEvent.mjs';
import '../_chunks/dep-251d5b63.mjs';
import '../hooks/useDisabled.mjs';
import '../hooks/useReadonly.mjs';
import '../checkbox/group.mjs';
import '../_chunks/dep-03e058e5.mjs';
import '../checkbox/checkbox-group-props.mjs';
import '../hooks/slot.mjs';
import './style/css.mjs';
import '../loading/index.mjs';
import '../loading/directive.mjs';
import '../loading/plugin.mjs';
import '../loading/loading.mjs';
import '../loading/icon/gradient.mjs';
import '../_chunks/dep-3d81ac0a.mjs';
import '../_chunks/dep-6a79c950.mjs';
import '../utils/dom.mjs';
import '../hooks/useTeleport.mjs';
import '../loading/props.mjs';
import '../hooks/useGlobalIcon.mjs';
import '../hooks/useLazyLoad.mjs';
import '../hooks/useVirtualScrollNew.mjs';
import '../hooks/useResizeObserver.mjs';
import '../_chunks/dep-3f189a8c.mjs';
import '../_chunks/dep-3630a49c.mjs';
import '../_chunks/dep-7dcc7954.mjs';
import '../_chunks/dep-88187fb2.mjs';
import '../_chunks/dep-198540b0.mjs';
import './hooks/useItemEvents.mjs';
import './hooks/useRenderIcon.mjs';
import './util.mjs';
import './hooks/useRenderLabel.mjs';
import './hooks/useRenderLine.mjs';
import './hooks/useRenderOperations.mjs';
import './hooks/useDraggable.mjs';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var treeItemProps = {
  stateId: {
    type: String
  },
  itemKey: {
    type: String
  },
  rowIndex: {
    type: Number
  },
  treeScope: {
    type: Object
  }
};
var TreeItem = defineComponent(_objectSpread(_objectSpread({
  props: treeItemProps
}, TreeItemDefinition), {}, {
  setup: function setup(props, context) {
    var _useItemState = useItemState(props, context),
      state = _useItemState.state;
    var treeItemRef = state.treeItemRef;
    var label = ref();
    useRipple(label);
    var _useTreeItem = useTreeItem(state),
      renderItemNode = _useTreeItem.renderItemNode;
    return {
      treeItemRef: treeItemRef,
      renderItemNode: renderItemNode
    };
  },
  render: function render(h) {
    var createElement = getCreateElement(h);
    if (typeof this.renderItemNode === "function") {
      return this.renderItemNode(createElement);
    }
    return null;
  }
}));

export { TreeItem as default, treeItemProps };
//# sourceMappingURL=tree-item.mjs.map
