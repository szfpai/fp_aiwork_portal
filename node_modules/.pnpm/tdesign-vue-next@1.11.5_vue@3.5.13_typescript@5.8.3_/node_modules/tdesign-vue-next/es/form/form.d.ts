import { TdFormProps } from './type';
declare const _default: import("vue").DefineComponent<{
    colon: BooleanConstructor;
    data: {
        type: import("vue").PropType<TdFormProps["data"]>;
        default: () => {};
    };
    disabled: {
        type: BooleanConstructor;
        default: any;
    };
    errorMessage: {
        type: import("vue").PropType<TdFormProps["errorMessage"]>;
    };
    formControlledComponents: {
        type: import("vue").PropType<TdFormProps["formControlledComponents"]>;
    };
    id: {
        type: StringConstructor;
        default: any;
    };
    labelAlign: {
        type: import("vue").PropType<TdFormProps["labelAlign"]>;
        default: TdFormProps["labelAlign"];
        validator(val: TdFormProps["labelAlign"]): boolean;
    };
    labelWidth: {
        type: import("vue").PropType<TdFormProps["labelWidth"]>;
        default: TdFormProps["labelWidth"];
    };
    layout: {
        type: import("vue").PropType<TdFormProps["layout"]>;
        default: TdFormProps["layout"];
        validator(val: TdFormProps["layout"]): boolean;
    };
    preventSubmitDefault: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: any;
    };
    requiredMark: {
        type: BooleanConstructor;
        default: any;
    };
    resetType: {
        type: import("vue").PropType<TdFormProps["resetType"]>;
        default: TdFormProps["resetType"];
        validator(val: TdFormProps["resetType"]): boolean;
    };
    rules: {
        type: import("vue").PropType<TdFormProps["rules"]>;
    };
    scrollToFirstError: {
        type: import("vue").PropType<TdFormProps["scrollToFirstError"]>;
        validator(val: TdFormProps["scrollToFirstError"]): boolean;
    };
    showErrorMessage: {
        type: BooleanConstructor;
        default: boolean;
    };
    statusIcon: {
        type: import("vue").PropType<TdFormProps["statusIcon"]>;
        default: TdFormProps["statusIcon"];
    };
    submitWithWarningMessage: BooleanConstructor;
    onReset: import("vue").PropType<TdFormProps["onReset"]>;
    onSubmit: import("vue").PropType<TdFormProps["onSubmit"]>;
    onValidate: import("vue").PropType<TdFormProps["onValidate"]>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    colon: BooleanConstructor;
    data: {
        type: import("vue").PropType<TdFormProps["data"]>;
        default: () => {};
    };
    disabled: {
        type: BooleanConstructor;
        default: any;
    };
    errorMessage: {
        type: import("vue").PropType<TdFormProps["errorMessage"]>;
    };
    formControlledComponents: {
        type: import("vue").PropType<TdFormProps["formControlledComponents"]>;
    };
    id: {
        type: StringConstructor;
        default: any;
    };
    labelAlign: {
        type: import("vue").PropType<TdFormProps["labelAlign"]>;
        default: TdFormProps["labelAlign"];
        validator(val: TdFormProps["labelAlign"]): boolean;
    };
    labelWidth: {
        type: import("vue").PropType<TdFormProps["labelWidth"]>;
        default: TdFormProps["labelWidth"];
    };
    layout: {
        type: import("vue").PropType<TdFormProps["layout"]>;
        default: TdFormProps["layout"];
        validator(val: TdFormProps["layout"]): boolean;
    };
    preventSubmitDefault: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: any;
    };
    requiredMark: {
        type: BooleanConstructor;
        default: any;
    };
    resetType: {
        type: import("vue").PropType<TdFormProps["resetType"]>;
        default: TdFormProps["resetType"];
        validator(val: TdFormProps["resetType"]): boolean;
    };
    rules: {
        type: import("vue").PropType<TdFormProps["rules"]>;
    };
    scrollToFirstError: {
        type: import("vue").PropType<TdFormProps["scrollToFirstError"]>;
        validator(val: TdFormProps["scrollToFirstError"]): boolean;
    };
    showErrorMessage: {
        type: BooleanConstructor;
        default: boolean;
    };
    statusIcon: {
        type: import("vue").PropType<TdFormProps["statusIcon"]>;
        default: TdFormProps["statusIcon"];
    };
    submitWithWarningMessage: BooleanConstructor;
    onReset: import("vue").PropType<TdFormProps["onReset"]>;
    onSubmit: import("vue").PropType<TdFormProps["onSubmit"]>;
    onValidate: import("vue").PropType<TdFormProps["onValidate"]>;
}>>, {
    id: string;
    disabled: boolean;
    data: {};
    showErrorMessage: boolean;
    readonly: boolean;
    labelAlign: "left" | "right" | "top";
    labelWidth: string | number;
    statusIcon: boolean | ((h: typeof import("vue").h, props: import("./type").TdFormItemProps) => import("..").TNodeReturnValue);
    requiredMark: boolean;
    colon: boolean;
    resetType: "empty" | "initial";
    layout: "inline" | "vertical";
    preventSubmitDefault: boolean;
    submitWithWarningMessage: boolean;
}, {}>;
export default _default;
