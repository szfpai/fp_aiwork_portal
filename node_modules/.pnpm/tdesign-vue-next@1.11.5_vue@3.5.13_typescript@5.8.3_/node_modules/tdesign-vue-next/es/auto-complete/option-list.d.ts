import { PropType } from 'vue';
import { CommonClassNameType } from '../hooks/useCommonClassName';
import { TdAutoCompleteProps } from './type';
declare const _default: import("vue").DefineComponent<{
    sizeClassNames: PropType<CommonClassNameType["sizeClassNames"]>;
    value: StringConstructor;
    size: PropType<TdAutoCompleteProps["size"]>;
    options: PropType<TdAutoCompleteProps["options"]>;
    popupVisible: BooleanConstructor;
    highlightKeyword: BooleanConstructor;
    filterable: BooleanConstructor;
    filter: PropType<TdAutoCompleteProps["filter"]>;
    empty: PropType<TdAutoCompleteProps["empty"]>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "select"[], "select", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    sizeClassNames: PropType<CommonClassNameType["sizeClassNames"]>;
    value: StringConstructor;
    size: PropType<TdAutoCompleteProps["size"]>;
    options: PropType<TdAutoCompleteProps["options"]>;
    popupVisible: BooleanConstructor;
    highlightKeyword: BooleanConstructor;
    filterable: BooleanConstructor;
    filter: PropType<TdAutoCompleteProps["filter"]>;
    empty: PropType<TdAutoCompleteProps["empty"]>;
}>> & {
    onSelect?: (...args: any[]) => any;
}, {
    popupVisible: boolean;
    filterable: boolean;
    highlightKeyword: boolean;
}, {}>;
export default _default;
